
USBproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800c6d8  0800c6d8  0001c6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c818  0800c818  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c818  0800c818  0001c818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c820  0800c820  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c820  0800c820  0001c820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c824  0800c824  0001c824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00025bc0  200001f0  0800ca18  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20025db0  0800ca18  00025db0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028756  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005297  00000000  00000000  00048974  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b28  00000000  00000000  0004dc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018c0  00000000  00000000  0004f738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ea28  00000000  00000000  00050ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a308  00000000  00000000  0007fa20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110da8  00000000  00000000  00099d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aaad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076a0  00000000  00000000  001aab4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c6c0 	.word	0x0800c6c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	0800c6c0 	.word	0x0800c6c0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 fdaa 	bl	800113e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f00a f9a4 	bl	800a938 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f00a f810 	bl	800a614 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_IncTick+0x20>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	461a      	mov	r2, r3
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <HAL_IncTick+0x24>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4413      	add	r3, r2
 800060c:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_IncTick+0x24>)
 800060e:	6013      	str	r3, [r2, #0]
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	20000000 	.word	0x20000000
 8000620:	20004364 	.word	0x20004364

08000624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <HAL_GetTick+0x14>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20004364 	.word	0x20004364

0800063c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000644:	f7ff ffee 	bl	8000624 <HAL_GetTick>
 8000648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000654:	d005      	beq.n	8000662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_Delay+0x40>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000662:	bf00      	nop
 8000664:	f7ff ffde 	bl	8000624 <HAL_GetTick>
 8000668:	4602      	mov	r2, r0
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	429a      	cmp	r2, r3
 8000672:	d8f7      	bhi.n	8000664 <HAL_Delay+0x28>
  {
  }
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000000 	.word	0x20000000

08000680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
 8000694:	e031      	b.n	80006fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	2b00      	cmp	r3, #0
 800069c:	d109      	bne.n	80006b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f009 ffe0 	bl	800a664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f003 0310 	and.w	r3, r3, #16
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d116      	bne.n	80006ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <HAL_ADC_Init+0x84>)
 80006c4:	4013      	ands	r3, r2
 80006c6:	f043 0202 	orr.w	r2, r3, #2
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f000 fb84 	bl	8000ddc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f023 0303 	bic.w	r3, r3, #3
 80006e2:	f043 0201 	orr.w	r2, r3, #1
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	641a      	str	r2, [r3, #64]	; 0x40
 80006ea:	e001      	b.n	80006f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	ffffeefd 	.word	0xffffeefd

08000708 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800071a:	2b01      	cmp	r3, #1
 800071c:	d101      	bne.n	8000722 <HAL_ADC_Start_IT+0x1a>
 800071e:	2302      	movs	r3, #2
 8000720:	e0a8      	b.n	8000874 <HAL_ADC_Start_IT+0x16c>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2201      	movs	r2, #1
 8000726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	2b01      	cmp	r3, #1
 8000736:	d018      	beq.n	800076a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	689a      	ldr	r2, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f042 0201 	orr.w	r2, r2, #1
 8000746:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000748:	4b4d      	ldr	r3, [pc, #308]	; (8000880 <HAL_ADC_Start_IT+0x178>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a4d      	ldr	r2, [pc, #308]	; (8000884 <HAL_ADC_Start_IT+0x17c>)
 800074e:	fba2 2303 	umull	r2, r3, r2, r3
 8000752:	0c9a      	lsrs	r2, r3, #18
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800075c:	e002      	b.n	8000764 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3b01      	subs	r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f9      	bne.n	800075e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	2b01      	cmp	r3, #1
 8000776:	d17c      	bne.n	8000872 <HAL_ADC_Start_IT+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800077c:	4b42      	ldr	r3, [pc, #264]	; (8000888 <HAL_ADC_Start_IT+0x180>)
 800077e:	4013      	ands	r3, r2
 8000780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000792:	2b00      	cmp	r3, #0
 8000794:	d007      	beq.n	80007a6 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800079e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007b2:	d106      	bne.n	80007c2 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b8:	f023 0206 	bic.w	r2, r3, #6
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	645a      	str	r2, [r3, #68]	; 0x44
 80007c0:	e002      	b.n	80007c8 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2200      	movs	r2, #0
 80007c6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80007d8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6859      	ldr	r1, [r3, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <HAL_ADC_Start_IT+0x184>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <HAL_ADC_Start_IT+0x188>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f003 031f 	and.w	r3, r3, #31
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d10f      	bne.n	8000816 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000800:	2b00      	cmp	r3, #0
 8000802:	d136      	bne.n	8000872 <HAL_ADC_Start_IT+0x16a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	e02d      	b.n	8000872 <HAL_ADC_Start_IT+0x16a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <HAL_ADC_Start_IT+0x18c>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d10e      	bne.n	800083e <HAL_ADC_Start_IT+0x136>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d107      	bne.n	800083e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	689a      	ldr	r2, [r3, #8]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800083c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_ADC_Start_IT+0x188>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f003 0310 	and.w	r3, r3, #16
 8000846:	2b00      	cmp	r3, #0
 8000848:	d113      	bne.n	8000872 <HAL_ADC_Start_IT+0x16a>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <HAL_ADC_Start_IT+0x190>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d10e      	bne.n	8000872 <HAL_ADC_Start_IT+0x16a>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800085e:	2b00      	cmp	r3, #0
 8000860:	d107      	bne.n	8000872 <HAL_ADC_Start_IT+0x16a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	689a      	ldr	r2, [r3, #8]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000870:	609a      	str	r2, [r3, #8]
      } 
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	20000118 	.word	0x20000118
 8000884:	431bde83 	.word	0x431bde83
 8000888:	fffff8fe 	.word	0xfffff8fe
 800088c:	04000020 	.word	0x04000020
 8000890:	40012300 	.word	0x40012300
 8000894:	40012000 	.word	0x40012000
 8000898:	40012200 	.word	0x40012200

0800089c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	bf0c      	ite	eq
 80008ba:	2301      	moveq	r3, #1
 80008bc:	2300      	movne	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0320 	and.w	r3, r3, #32
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d049      	beq.n	8000972 <HAL_ADC_IRQHandler+0xd6>
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d046      	beq.n	8000972 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d105      	bne.n	80008fc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d12b      	bne.n	8000962 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800090e:	2b00      	cmp	r3, #0
 8000910:	d127      	bne.n	8000962 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800091c:	2b00      	cmp	r3, #0
 800091e:	d006      	beq.n	800092e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800092a:	2b00      	cmp	r3, #0
 800092c:	d119      	bne.n	8000962 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f022 0220 	bic.w	r2, r2, #32
 800093c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d105      	bne.n	8000962 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f043 0201 	orr.w	r2, r3, #1
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000962:	6878      	ldr	r0, [r7, #4]
 8000964:	f000 f8e8 	bl	8000b38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f06f 0212 	mvn.w	r2, #18
 8000970:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	2b04      	cmp	r3, #4
 800097e:	bf0c      	ite	eq
 8000980:	2301      	moveq	r3, #1
 8000982:	2300      	movne	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	2b80      	cmp	r3, #128	; 0x80
 8000994:	bf0c      	ite	eq
 8000996:	2301      	moveq	r3, #1
 8000998:	2300      	movne	r3, #0
 800099a:	b2db      	uxtb	r3, r3
 800099c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d057      	beq.n	8000a54 <HAL_ADC_IRQHandler+0x1b8>
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d054      	beq.n	8000a54 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d105      	bne.n	80009c2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d139      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d006      	beq.n	80009ec <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d12b      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d124      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d11d      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d119      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d105      	bne.n	8000a44 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f043 0201 	orr.w	r2, r3, #1
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f000 fac3 	bl	8000fd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f06f 020c 	mvn.w	r2, #12
 8000a52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	bf0c      	ite	eq
 8000a62:	2301      	moveq	r3, #1
 8000a64:	2300      	movne	r3, #0
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a74:	2b40      	cmp	r3, #64	; 0x40
 8000a76:	bf0c      	ite	eq
 8000a78:	2301      	moveq	r3, #1
 8000a7a:	2300      	movne	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d017      	beq.n	8000ab6 <HAL_ADC_IRQHandler+0x21a>
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d014      	beq.n	8000ab6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d10d      	bne.n	8000ab6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f850 	bl	8000b4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f06f 0201 	mvn.w	r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	2b20      	cmp	r3, #32
 8000ac2:	bf0c      	ite	eq
 8000ac4:	2301      	moveq	r3, #1
 8000ac6:	2300      	movne	r3, #0
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ada:	bf0c      	ite	eq
 8000adc:	2301      	moveq	r3, #1
 8000ade:	2300      	movne	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d015      	beq.n	8000b16 <HAL_ADC_IRQHandler+0x27a>
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d012      	beq.n	8000b16 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	f043 0202 	orr.w	r2, r3, #2
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f06f 0220 	mvn.w	r2, #32
 8000b04:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f82a 	bl	8000b60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f06f 0220 	mvn.w	r2, #32
 8000b14:	601a      	str	r2, [r3, #0]
  }
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d101      	bne.n	8000b90 <HAL_ADC_ConfigChannel+0x1c>
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	e115      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x248>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2201      	movs	r2, #1
 8000b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b09      	cmp	r3, #9
 8000b9e:	d935      	bls.n	8000c0c <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	68d9      	ldr	r1, [r3, #12]
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	461a      	mov	r2, r3
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	3b1e      	subs	r3, #30
 8000bb6:	2207      	movs	r2, #7
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43da      	mvns	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a7f      	ldr	r2, [pc, #508]	; (8000dc8 <HAL_ADC_ConfigChannel+0x254>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d10a      	bne.n	8000be6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	68d9      	ldr	r1, [r3, #12]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	061a      	lsls	r2, r3, #24
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	430a      	orrs	r2, r1
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	e035      	b.n	8000c52 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68d9      	ldr	r1, [r3, #12]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4403      	add	r3, r0
 8000bfe:	3b1e      	subs	r3, #30
 8000c00:	409a      	lsls	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	430a      	orrs	r2, r1
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	e022      	b.n	8000c52 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6919      	ldr	r1, [r3, #16]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	2207      	movs	r2, #7
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6919      	ldr	r1, [r3, #16]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	4618      	mov	r0, r3
 8000c42:	4603      	mov	r3, r0
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4403      	add	r3, r0
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d824      	bhi.n	8000ca4 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	4613      	mov	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4413      	add	r3, r2
 8000c6a:	3b05      	subs	r3, #5
 8000c6c:	221f      	movs	r2, #31
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	400a      	ands	r2, r1
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	3b05      	subs	r3, #5
 8000c96:	fa00 f203 	lsl.w	r2, r0, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ca2:	e04c      	b.n	8000d3e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	2b0c      	cmp	r3, #12
 8000caa:	d824      	bhi.n	8000cf6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	3b23      	subs	r3, #35	; 0x23
 8000cbe:	221f      	movs	r2, #31
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43da      	mvns	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	400a      	ands	r2, r1
 8000ccc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4618      	mov	r0, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3b23      	subs	r3, #35	; 0x23
 8000ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8000cf4:	e023      	b.n	8000d3e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	3b41      	subs	r3, #65	; 0x41
 8000d08:	221f      	movs	r2, #31
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	400a      	ands	r2, r1
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	3b41      	subs	r3, #65	; 0x41
 8000d32:	fa00 f203 	lsl.w	r2, r0, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a22      	ldr	r2, [pc, #136]	; (8000dcc <HAL_ADC_ConfigChannel+0x258>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d109      	bne.n	8000d5c <HAL_ADC_ConfigChannel+0x1e8>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b12      	cmp	r3, #18
 8000d4e:	d105      	bne.n	8000d5c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_ADC_ConfigChannel+0x25c>)
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <HAL_ADC_ConfigChannel+0x25c>)
 8000d56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d5a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a1a      	ldr	r2, [pc, #104]	; (8000dcc <HAL_ADC_ConfigChannel+0x258>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d125      	bne.n	8000db2 <HAL_ADC_ConfigChannel+0x23e>
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <HAL_ADC_ConfigChannel+0x254>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d003      	beq.n	8000d78 <HAL_ADC_ConfigChannel+0x204>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b11      	cmp	r3, #17
 8000d76:	d11c      	bne.n	8000db2 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000d78:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_ADC_ConfigChannel+0x25c>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_ADC_ConfigChannel+0x25c>)
 8000d7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d82:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0f      	ldr	r2, [pc, #60]	; (8000dc8 <HAL_ADC_ConfigChannel+0x254>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d111      	bne.n	8000db2 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_ADC_ConfigChannel+0x260>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <HAL_ADC_ConfigChannel+0x264>)
 8000d94:	fba2 2303 	umull	r2, r3, r2, r3
 8000d98:	0c9a      	lsrs	r2, r3, #18
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000da4:	e002      	b.n	8000dac <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f9      	bne.n	8000da6 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	10000012 	.word	0x10000012
 8000dcc:	40012000 	.word	0x40012000
 8000dd0:	40012300 	.word	0x40012300
 8000dd4:	20000118 	.word	0x20000118
 8000dd8:	431bde83 	.word	0x431bde83

08000ddc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000de4:	4b78      	ldr	r3, [pc, #480]	; (8000fc8 <ADC_Init+0x1ec>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a77      	ldr	r2, [pc, #476]	; (8000fc8 <ADC_Init+0x1ec>)
 8000dea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000dee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000df0:	4b75      	ldr	r3, [pc, #468]	; (8000fc8 <ADC_Init+0x1ec>)
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4973      	ldr	r1, [pc, #460]	; (8000fc8 <ADC_Init+0x1ec>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6859      	ldr	r1, [r3, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	021a      	lsls	r2, r3, #8
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	6859      	ldr	r1, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	430a      	orrs	r2, r1
 8000e42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6899      	ldr	r1, [r3, #8]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	4a58      	ldr	r2, [pc, #352]	; (8000fcc <ADC_Init+0x1f0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d022      	beq.n	8000eb6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6899      	ldr	r1, [r3, #8]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ea0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6899      	ldr	r1, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	e00f      	b.n	8000ed6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ec4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689a      	ldr	r2, [r3, #8]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ed4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0202 	bic.w	r2, r2, #2
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6899      	ldr	r1, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	005a      	lsls	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d01b      	beq.n	8000f3c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	685a      	ldr	r2, [r3, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000f22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6859      	ldr	r1, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	035a      	lsls	r2, r3, #13
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	e007      	b.n	8000f4c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	051a      	lsls	r2, r3, #20
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6899      	ldr	r1, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f8e:	025a      	lsls	r2, r3, #9
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6899      	ldr	r1, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	029a      	lsls	r2, r3, #10
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	609a      	str	r2, [r3, #8]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40012300 	.word	0x40012300
 8000fcc:	0f000001 	.word	0x0f000001

08000fd0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	4313      	orrs	r3, r2
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x40>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00
 8001028:	05fa0000 	.word	0x05fa0000

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	db0b      	blt.n	8001072 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	f003 021f 	and.w	r2, r3, #31
 8001060:	4907      	ldr	r1, [pc, #28]	; (8001080 <__NVIC_EnableIRQ+0x38>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	095b      	lsrs	r3, r3, #5
 8001068:	2001      	movs	r0, #1
 800106a:	fa00 f202 	lsl.w	r2, r0, r2
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000e100 	.word	0xe000e100

08001084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	db0a      	blt.n	80010ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	490c      	ldr	r1, [pc, #48]	; (80010d0 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	0112      	lsls	r2, r2, #4
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	440b      	add	r3, r1
 80010a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ac:	e00a      	b.n	80010c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	0112      	lsls	r2, r2, #4
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	440b      	add	r3, r1
 80010c2:	761a      	strb	r2, [r3, #24]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000e100 	.word	0xe000e100
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	f1c3 0307 	rsb	r3, r3, #7
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	bf28      	it	cs
 80010f6:	2304      	movcs	r3, #4
 80010f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3304      	adds	r3, #4
 80010fe:	2b06      	cmp	r3, #6
 8001100:	d902      	bls.n	8001108 <NVIC_EncodePriority+0x30>
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3b03      	subs	r3, #3
 8001106:	e000      	b.n	800110a <NVIC_EncodePriority+0x32>
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43da      	mvns	r2, r3
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001120:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	43d9      	mvns	r1, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff4c 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001166:	f7ff ff61 	bl	800102c <__NVIC_GetPriorityGrouping>
 800116a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	6978      	ldr	r0, [r7, #20]
 8001172:	f7ff ffb1 	bl	80010d8 <NVIC_EncodePriority>
 8001176:	4602      	mov	r2, r0
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	4611      	mov	r1, r2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ff80 	bl	8001084 <__NVIC_SetPriority>
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff54 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80011b8:	4ba9      	ldr	r3, [pc, #676]	; (8001460 <HAL_ETH_Init+0x2b8>)
 80011ba:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e183      	b.n	80014d6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d106      	bne.n	80011e8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f009 fa86 	bl	800a6f4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b9e      	ldr	r3, [pc, #632]	; (8001464 <HAL_ETH_Init+0x2bc>)
 80011ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ec:	4a9d      	ldr	r2, [pc, #628]	; (8001464 <HAL_ETH_Init+0x2bc>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f2:	6453      	str	r3, [r2, #68]	; 0x44
 80011f4:	4b9b      	ldr	r3, [pc, #620]	; (8001464 <HAL_ETH_Init+0x2bc>)
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001200:	4b99      	ldr	r3, [pc, #612]	; (8001468 <HAL_ETH_Init+0x2c0>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4a98      	ldr	r2, [pc, #608]	; (8001468 <HAL_ETH_Init+0x2c0>)
 8001206:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800120a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800120c:	4b96      	ldr	r3, [pc, #600]	; (8001468 <HAL_ETH_Init+0x2c0>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4994      	ldr	r1, [pc, #592]	; (8001468 <HAL_ETH_Init+0x2c0>)
 8001216:	4313      	orrs	r3, r2
 8001218:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0201 	orr.w	r2, r2, #1
 800122c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001230:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001232:	f7ff f9f7 	bl	8000624 <HAL_GetTick>
 8001236:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001238:	e011      	b.n	800125e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800123a:	f7ff f9f3 	bl	8000624 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001248:	d909      	bls.n	800125e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2203      	movs	r2, #3
 800124e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e13b      	b.n	80014d6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e4      	bne.n	800123a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f023 031c 	bic.w	r3, r3, #28
 800127e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001280:	f002 fbfe 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8001284:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4a78      	ldr	r2, [pc, #480]	; (800146c <HAL_ETH_Init+0x2c4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d908      	bls.n	80012a0 <HAL_ETH_Init+0xf8>
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4a77      	ldr	r2, [pc, #476]	; (8001470 <HAL_ETH_Init+0x2c8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d804      	bhi.n	80012a0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e027      	b.n	80012f0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	4a73      	ldr	r2, [pc, #460]	; (8001470 <HAL_ETH_Init+0x2c8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d908      	bls.n	80012ba <HAL_ETH_Init+0x112>
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	4a72      	ldr	r2, [pc, #456]	; (8001474 <HAL_ETH_Init+0x2cc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d804      	bhi.n	80012ba <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f043 030c 	orr.w	r3, r3, #12
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e01a      	b.n	80012f0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4a6d      	ldr	r2, [pc, #436]	; (8001474 <HAL_ETH_Init+0x2cc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d903      	bls.n	80012ca <HAL_ETH_Init+0x122>
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_ETH_Init+0x2d0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d911      	bls.n	80012ee <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4a6a      	ldr	r2, [pc, #424]	; (8001478 <HAL_ETH_Init+0x2d0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d908      	bls.n	80012e4 <HAL_ETH_Init+0x13c>
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4a69      	ldr	r2, [pc, #420]	; (800147c <HAL_ETH_Init+0x2d4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d804      	bhi.n	80012e4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e005      	b.n	80012f0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f043 0310 	orr.w	r3, r3, #16
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	e000      	b.n	80012f0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80012ee:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80012f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012fc:	2100      	movs	r1, #0
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f956 	bl	80015b0 <HAL_ETH_WritePHYRegister>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00b      	beq.n	8001322 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800130e:	6939      	ldr	r1, [r7, #16]
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f9b3 	bl	800167c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0d9      	b.n	80014d6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001322:	20ff      	movs	r0, #255	; 0xff
 8001324:	f7ff f98a 	bl	800063c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 80a7 	beq.w	8001480 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001332:	f7ff f977 	bl	8000624 <HAL_GetTick>
 8001336:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	461a      	mov	r2, r3
 800133e:	2101      	movs	r1, #1
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f8cd 	bl	80014e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001346:	f7ff f96d 	bl	8000624 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d90f      	bls.n	8001378 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800135c:	6939      	ldr	r1, [r7, #16]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f98c 	bl	800167c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e0ae      	b.n	80014d6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0da      	beq.n	8001338 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001382:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001386:	2100      	movs	r1, #0
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f911 	bl	80015b0 <HAL_ETH_WritePHYRegister>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001398:	6939      	ldr	r1, [r7, #16]
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f96e 	bl	800167c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013a8:	2301      	movs	r3, #1
 80013aa:	e094      	b.n	80014d6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80013ac:	f7ff f93a 	bl	8000624 <HAL_GetTick>
 80013b0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	461a      	mov	r2, r3
 80013b8:	2101      	movs	r1, #1
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f890 	bl	80014e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80013c0:	f7ff f930 	bl	8000624 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d90f      	bls.n	80013f2 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013d6:	6939      	ldr	r1, [r7, #16]
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f94f 	bl	800167c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e071      	b.n	80014d6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f003 0320 	and.w	r3, r3, #32
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0da      	beq.n	80013b2 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	461a      	mov	r2, r3
 8001402:	211f      	movs	r1, #31
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f86b 	bl	80014e0 <HAL_ETH_ReadPHYRegister>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f930 	bl	800167c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001424:	2301      	movs	r3, #1
 8001426:	e056      	b.n	80014d6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	2b00      	cmp	r3, #0
 8001430:	d004      	beq.n	800143c <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e002      	b.n	8001442 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	e037      	b.n	80014c4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	e032      	b.n	80014c4 <HAL_ETH_Init+0x31c>
 800145e:	bf00      	nop
 8001460:	03938700 	.word	0x03938700
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	01312cff 	.word	0x01312cff
 8001470:	02160ebf 	.word	0x02160ebf
 8001474:	039386ff 	.word	0x039386ff
 8001478:	05f5e0ff 	.word	0x05f5e0ff
 800147c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	08db      	lsrs	r3, r3, #3
 8001486:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001490:	4313      	orrs	r3, r2
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	2100      	movs	r1, #0
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f889 	bl	80015b0 <HAL_ETH_WritePHYRegister>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014a8:	6939      	ldr	r1, [r7, #16]
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f8e6 	bl	800167c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e00c      	b.n	80014d6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80014bc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80014c0:	f7ff f8bc 	bl	800063c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80014c4:	6939      	ldr	r1, [r7, #16]
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f8d8 	bl	800167c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop

080014e0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	460b      	mov	r3, r1
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b82      	cmp	r3, #130	; 0x82
 8001500:	d101      	bne.n	8001506 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001502:	2302      	movs	r3, #2
 8001504:	e050      	b.n	80015a8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2282      	movs	r2, #130	; 0x82
 800150a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f003 031c 	and.w	r3, r3, #28
 800151c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8a1b      	ldrh	r3, [r3, #16]
 8001522:	02db      	lsls	r3, r3, #11
 8001524:	b29b      	uxth	r3, r3
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800152c:	897b      	ldrh	r3, [r7, #10]
 800152e:	019b      	lsls	r3, r3, #6
 8001530:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	4313      	orrs	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f023 0302 	bic.w	r3, r3, #2
 8001540:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001552:	f7ff f867 	bl	8000624 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001558:	e015      	b.n	8001586 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800155a:	f7ff f863 	bl	8000624 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d309      	bcc.n	800157e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e014      	b.n	80015a8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1e4      	bne.n	800155a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	b29b      	uxth	r3, r3
 8001598:	461a      	mov	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	460b      	mov	r3, r1
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b42      	cmp	r3, #66	; 0x42
 80015d0:	d101      	bne.n	80015d6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80015d2:	2302      	movs	r3, #2
 80015d4:	e04e      	b.n	8001674 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2242      	movs	r2, #66	; 0x42
 80015da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 031c 	and.w	r3, r3, #28
 80015ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8a1b      	ldrh	r3, [r3, #16]
 80015f2:	02db      	lsls	r3, r3, #11
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	019b      	lsls	r3, r3, #6
 8001600:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800162c:	f7fe fffa 	bl	8000624 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001632:	e015      	b.n	8001660 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001634:	f7fe fff6 	bl	8000624 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001642:	d309      	bcc.n	8001658 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e00d      	b.n	8001674 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1e4      	bne.n	8001634 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0b0      	sub	sp, #192	; 0xc0
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d007      	beq.n	80016a2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001698:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80016aa:	2300      	movs	r3, #0
 80016ac:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80016c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c6:	663b      	str	r3, [r7, #96]	; 0x60
 80016c8:	e001      	b.n	80016ce <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80016ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80016d8:	2300      	movs	r3, #0
 80016da:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80016e8:	2340      	movs	r3, #64	; 0x40
 80016ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001710:	2300      	movs	r3, #0
 8001712:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001750:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001754:	4bab      	ldr	r3, [pc, #684]	; (8001a04 <ETH_MACDMAConfig+0x388>)
 8001756:	4013      	ands	r3, r2
 8001758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800175c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800175e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001760:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001764:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001768:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800176e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001772:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001776:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800177c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800177e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001780:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001784:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001788:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800178a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800178c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800178e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001790:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001792:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001796:	4313      	orrs	r3, r2
 8001798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017a4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7fe ff43 	bl	800063c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017be:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80017c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017c4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80017c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80017c8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80017ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80017ce:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80017d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80017d4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80017d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80017da:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80017dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80017e0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80017e4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80017ec:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80017ee:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7fe ff1e 	bl	800063c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001808:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001812:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800181c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001828:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800182c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001830:	4013      	ands	r3, r2
 8001832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001836:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800183a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800183c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001840:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001842:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001846:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800184c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800184e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001852:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001858:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800185a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800185e:	4313      	orrs	r3, r2
 8001860:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800186c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001878:	2001      	movs	r0, #1
 800187a:	f7fe fedf 	bl	800063c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001886:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001888:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800188c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a2:	2001      	movs	r0, #1
 80018a4:	f7fe feca 	bl	800063c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018b0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80018b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ba:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80018c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018c4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80018d6:	2304      	movs	r3, #4
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80018da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80018e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f241 0318 	movw	r3, #4120	; 0x1018
 8001906:	4413      	add	r3, r2
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800190e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <ETH_MACDMAConfig+0x38c>)
 8001914:	4013      	ands	r3, r2
 8001916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800191a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800191c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800191e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001920:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001922:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001924:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001926:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001928:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800192a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800192c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800192e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001930:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001932:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001936:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001938:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800193a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800193c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001940:	4313      	orrs	r3, r2
 8001942:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	f241 0318 	movw	r3, #4120	; 0x1018
 800194e:	4413      	add	r3, r2
 8001950:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001954:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	f241 0318 	movw	r3, #4120	; 0x1018
 800195e:	4413      	add	r3, r2
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001966:	2001      	movs	r0, #1
 8001968:	f7fe fe68 	bl	800063c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	f241 0318 	movw	r3, #4120	; 0x1018
 8001974:	4413      	add	r3, r2
 8001976:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800197a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800197c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001980:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001984:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001988:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800198a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800198c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800198e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001990:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001992:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001996:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f7fe fe41 	bl	800063c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019c6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d10d      	bne.n	80019ec <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	f241 031c 	movw	r3, #4124	; 0x101c
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6811      	ldr	r1, [r2, #0]
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <ETH_MACDMAConfig+0x390>)
 80019e2:	431a      	orrs	r2, r3
 80019e4:	f241 031c 	movw	r3, #4124	; 0x101c
 80019e8:	440b      	add	r3, r1
 80019ea:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	461a      	mov	r2, r3
 80019f2:	2100      	movs	r1, #0
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f80b 	bl	8001a10 <ETH_MACAddressConfig>
}
 80019fa:	bf00      	nop
 80019fc:	37c0      	adds	r7, #192	; 0xc0
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	ff20810f 	.word	0xff20810f
 8001a08:	f8de3f23 	.word	0xf8de3f23
 8001a0c:	00010040 	.word	0x00010040

08001a10 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3305      	adds	r3, #5
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	3204      	adds	r2, #4
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <ETH_MACAddressConfig+0x68>)
 8001a32:	4413      	add	r3, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3303      	adds	r3, #3
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	061a      	lsls	r2, r3, #24
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3302      	adds	r3, #2
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	4313      	orrs	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	7812      	ldrb	r2, [r2, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <ETH_MACAddressConfig+0x6c>)
 8001a62:	4413      	add	r3, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	6013      	str	r3, [r2, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40028040 	.word	0x40028040
 8001a7c:	40028044 	.word	0x40028044

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
 8001a9e:	e175      	b.n	8001d8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	f040 8164 	bne.w	8001d86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x4e>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d123      	bne.n	8001b16 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	08da      	lsrs	r2, r3, #3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3208      	adds	r2, #8
 8001ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	08da      	lsrs	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3208      	adds	r2, #8
 8001b10:	69b9      	ldr	r1, [r7, #24]
 8001b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	2203      	movs	r2, #3
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0203 	and.w	r2, r3, #3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d00b      	beq.n	8001b6a <HAL_GPIO_Init+0xea>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5e:	2b11      	cmp	r3, #17
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b12      	cmp	r3, #18
 8001b68:	d130      	bne.n	8001bcc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80be 	beq.w	8001d86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0a:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <HAL_GPIO_Init+0x320>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a64      	ldr	r2, [pc, #400]	; (8001da0 <HAL_GPIO_Init+0x320>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <HAL_GPIO_Init+0x320>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c22:	4a60      	ldr	r2, [pc, #384]	; (8001da4 <HAL_GPIO_Init+0x324>)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a57      	ldr	r2, [pc, #348]	; (8001da8 <HAL_GPIO_Init+0x328>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d037      	beq.n	8001cbe <HAL_GPIO_Init+0x23e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_GPIO_Init+0x32c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d031      	beq.n	8001cba <HAL_GPIO_Init+0x23a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a55      	ldr	r2, [pc, #340]	; (8001db0 <HAL_GPIO_Init+0x330>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d02b      	beq.n	8001cb6 <HAL_GPIO_Init+0x236>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a54      	ldr	r2, [pc, #336]	; (8001db4 <HAL_GPIO_Init+0x334>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d025      	beq.n	8001cb2 <HAL_GPIO_Init+0x232>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a53      	ldr	r2, [pc, #332]	; (8001db8 <HAL_GPIO_Init+0x338>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01f      	beq.n	8001cae <HAL_GPIO_Init+0x22e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a52      	ldr	r2, [pc, #328]	; (8001dbc <HAL_GPIO_Init+0x33c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0x22a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a51      	ldr	r2, [pc, #324]	; (8001dc0 <HAL_GPIO_Init+0x340>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <HAL_GPIO_Init+0x226>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a50      	ldr	r2, [pc, #320]	; (8001dc4 <HAL_GPIO_Init+0x344>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_GPIO_Init+0x222>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4f      	ldr	r2, [pc, #316]	; (8001dc8 <HAL_GPIO_Init+0x348>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d007      	beq.n	8001c9e <HAL_GPIO_Init+0x21e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4e      	ldr	r2, [pc, #312]	; (8001dcc <HAL_GPIO_Init+0x34c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d101      	bne.n	8001c9a <HAL_GPIO_Init+0x21a>
 8001c96:	2309      	movs	r3, #9
 8001c98:	e012      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001c9a:	230a      	movs	r3, #10
 8001c9c:	e010      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	e00e      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	e00c      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	e00a      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e008      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cae:	2304      	movs	r3, #4
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e004      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x240>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f002 0203 	and.w	r2, r2, #3
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	4093      	lsls	r3, r2
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cd0:	4934      	ldr	r1, [pc, #208]	; (8001da4 <HAL_GPIO_Init+0x324>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cde:	4b3c      	ldr	r3, [pc, #240]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d02:	4a33      	ldr	r2, [pc, #204]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d08:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2c:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d56:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <HAL_GPIO_Init+0x350>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	f67f ae86 	bls.w	8001aa0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	3724      	adds	r7, #36	; 0x24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40013800 	.word	0x40013800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40021400 	.word	0x40021400
 8001dc0:	40021800 	.word	0x40021800
 8001dc4:	40021c00 	.word	0x40021c00
 8001dc8:	40022000 	.word	0x40022000
 8001dcc:	40022400 	.word	0x40022400
 8001dd0:	40013c00 	.word	0x40013c00

08001dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
 8001de0:	4613      	mov	r3, r2
 8001de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de4:	787b      	ldrb	r3, [r7, #1]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001df0:	e003      	b.n	8001dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	041a      	lsls	r2, r3, #16
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	619a      	str	r2, [r3, #24]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	401a      	ands	r2, r3
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d104      	bne.n	8001e2a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	619a      	str	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d006      	beq.n	8001e60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f806 	bl	8001e6c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40013c00 	.word	0x40013c00

08001e6c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e84:	b08f      	sub	sp, #60	; 0x3c
 8001e86:	af0a      	add	r7, sp, #40	; 0x28
 8001e88:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e10a      	b.n	80020aa <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d106      	bne.n	8001eae <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f009 f829 	bl	800af00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2203      	movs	r2, #3
 8001eb2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fa65 	bl	800538a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	687e      	ldr	r6, [r7, #4]
 8001ec8:	466d      	mov	r5, sp
 8001eca:	f106 0410 	add.w	r4, r6, #16
 8001ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eda:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ede:	1d33      	adds	r3, r6, #4
 8001ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f003 f946 	bl	8005174 <USB_CoreInit>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0d7      	b.n	80020aa <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fa53 	bl	80053ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	e04a      	b.n	8001fa2 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	333d      	adds	r3, #61	; 0x3d
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	333c      	adds	r3, #60	; 0x3c
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	b298      	uxth	r0, r3
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	3342      	adds	r3, #66	; 0x42
 8001f48:	4602      	mov	r2, r0
 8001f4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	333f      	adds	r3, #63	; 0x3f
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3344      	adds	r3, #68	; 0x44
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	3348      	adds	r3, #72	; 0x48
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	3350      	adds	r3, #80	; 0x50
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d3af      	bcc.n	8001f0c <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e044      	b.n	800203c <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	1a9b      	subs	r3, r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	3301      	adds	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	d3b5      	bcc.n	8001fb2 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	687e      	ldr	r6, [r7, #4]
 800204e:	466d      	mov	r5, sp
 8002050:	f106 0410 	add.w	r4, r6, #16
 8002054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002060:	e885 0003 	stmia.w	r5, {r0, r1}
 8002064:	1d33      	adds	r3, r6, #4
 8002066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002068:	6838      	ldr	r0, [r7, #0]
 800206a:	f003 f9c9 	bl	8005400 <USB_DevInit>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e014      	b.n	80020aa <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	2b01      	cmp	r3, #1
 8002096:	d102      	bne.n	800209e <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f001 f88b 	bl	80031b4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 f988 	bl	80063b8 <USB_DevDisconnect>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_PCD_Start+0x16>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e012      	b.n	80020ee <HAL_PCD_Start+0x3c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 f957 	bl	8006388 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 f942 	bl	8005368 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f6:	b590      	push	{r4, r7, lr}
 80020f8:	b08d      	sub	sp, #52	; 0x34
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum = 0U;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f004 f9fc 	bl	800650e <USB_GetMode>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 83bd 	bne.w	8002898 <HAL_PCD_IRQHandler+0x7a2>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f004 f960 	bl	80063e8 <USB_ReadInterrupts>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 83b3 	beq.w	8002896 <HAL_PCD_IRQHandler+0x7a0>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f004 f957 	bl	80063e8 <USB_ReadInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b02      	cmp	r3, #2
 8002142:	d107      	bne.n	8002154 <HAL_PCD_IRQHandler+0x5e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695a      	ldr	r2, [r3, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f002 0202 	and.w	r2, r2, #2
 8002152:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f004 f945 	bl	80063e8 <USB_ReadInterrupts>
 800215e:	4603      	mov	r3, r0
 8002160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002164:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002168:	d17b      	bne.n	8002262 <HAL_PCD_IRQHandler+0x16c>
    {
      epnum = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f004 f94b 	bl	800640e <USB_ReadDevAllOutEpInterrupt>
 8002178:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800217a:	e06f      	b.n	800225c <HAL_PCD_IRQHandler+0x166>
      {
        if ((ep_intr & 0x1U) != 0U)
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d064      	beq.n	8002250 <HAL_PCD_IRQHandler+0x15a>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	4611      	mov	r1, r2
 8002190:	4618      	mov	r0, r3
 8002192:	f004 f970 	bl	8006476 <USB_ReadDevOutEPInterrupt>
 8002196:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00c      	beq.n	80021bc <HAL_PCD_IRQHandler+0xc6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ae:	461a      	mov	r2, r3
 80021b0:	2301      	movs	r3, #1
 80021b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fe3c 	bl	8002e34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00c      	beq.n	80021e0 <HAL_PCD_IRQHandler+0xea>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80021c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 ff3b 	bl	8003044 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	015a      	lsls	r2, r3, #5
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	4413      	add	r3, r2
 80021d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021da:	461a      	mov	r2, r3
 80021dc:	2308      	movs	r3, #8
 80021de:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_PCD_IRQHandler+0x106>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021f6:	461a      	mov	r2, r3
 80021f8:	2310      	movs	r3, #16
 80021fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d015      	beq.n	8002232 <HAL_PCD_IRQHandler+0x13c>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d108      	bne.n	8002220 <HAL_PCD_IRQHandler+0x12a>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002218:	461a      	mov	r2, r3
 800221a:	2101      	movs	r1, #1
 800221c:	f004 f9bc 	bl	8006598 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222c:	461a      	mov	r2, r3
 800222e:	2320      	movs	r3, #32
 8002230:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <HAL_PCD_IRQHandler+0x15a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002248:	461a      	mov	r2, r3
 800224a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800224e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	3301      	adds	r3, #1
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	2b00      	cmp	r3, #0
 8002260:	d18c      	bne.n	800217c <HAL_PCD_IRQHandler+0x86>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f004 f8be 	bl	80063e8 <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002272:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002276:	f040 80c4 	bne.w	8002402 <HAL_PCD_IRQHandler+0x30c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f004 f8df 	bl	8006442 <USB_ReadDevAllInEpInterrupt>
 8002284:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800228a:	e0b6      	b.n	80023fa <HAL_PCD_IRQHandler+0x304>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80ab 	beq.w	80023ee <HAL_PCD_IRQHandler+0x2f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 f905 	bl	80064b2 <USB_ReadDevInEPInterrupt>
 80022a8:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05b      	beq.n	800236c <HAL_PCD_IRQHandler+0x276>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	2201      	movs	r2, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69f9      	ldr	r1, [r7, #28]
 80022d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022d4:	4013      	ands	r3, r2
 80022d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e4:	461a      	mov	r2, r3
 80022e6:	2301      	movs	r3, #1
 80022e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d11b      	bne.n	800232a <HAL_PCD_IRQHandler+0x234>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3348      	adds	r3, #72	; 0x48
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4403      	add	r3, r0
 8002312:	3344      	adds	r3, #68	; 0x44
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4419      	add	r1, r3
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	4613      	mov	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4403      	add	r3, r0
 8002326:	3348      	adds	r3, #72	; 0x48
 8002328:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4619      	mov	r1, r3
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f008 fe76 	bl	800b022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d116      	bne.n	800236c <HAL_PCD_IRQHandler+0x276>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d113      	bne.n	800236c <HAL_PCD_IRQHandler+0x276>
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3350      	adds	r3, #80	; 0x50
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d108      	bne.n	800236c <HAL_PCD_IRQHandler+0x276>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002364:	461a      	mov	r2, r3
 8002366:	2101      	movs	r1, #1
 8002368:	f004 f916 	bl	8006598 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d008      	beq.n	8002388 <HAL_PCD_IRQHandler+0x292>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	015a      	lsls	r2, r3, #5
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002382:	461a      	mov	r2, r3
 8002384:	2308      	movs	r3, #8
 8002386:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	2b00      	cmp	r3, #0
 8002390:	d008      	beq.n	80023a4 <HAL_PCD_IRQHandler+0x2ae>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	4413      	add	r3, r2
 800239a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800239e:	461a      	mov	r2, r3
 80023a0:	2310      	movs	r3, #16
 80023a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_PCD_IRQHandler+0x2ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ba:	461a      	mov	r2, r3
 80023bc:	2340      	movs	r3, #64	; 0x40
 80023be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_PCD_IRQHandler+0x2e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023d6:	461a      	mov	r2, r3
 80023d8:	2302      	movs	r3, #2
 80023da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_PCD_IRQHandler+0x2f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fc96 	bl	8002d1a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	3301      	adds	r3, #1
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f47f af45 	bne.w	800228c <HAL_PCD_IRQHandler+0x196>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 ffee 	bl	80063e8 <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002416:	d122      	bne.n	800245e <HAL_PCD_IRQHandler+0x368>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002432:	2b01      	cmp	r3, #1
 8002434:	d108      	bne.n	8002448 <HAL_PCD_IRQHandler+0x352>
      {
        hpcd->LPM_State = LPM_L0;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800243e:	2100      	movs	r1, #0
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f009 f841 	bl	800b4c8 <HAL_PCDEx_LPM_Callback>
 8002446:	e002      	b.n	800244e <HAL_PCD_IRQHandler+0x358>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f008 fe61 	bl	800b110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800245c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f003 ffc0 	bl	80063e8 <USB_ReadInterrupts>
 8002468:	4603      	mov	r3, r0
 800246a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002472:	d112      	bne.n	800249a <HAL_PCD_IRQHandler+0x3a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_PCD_IRQHandler+0x394>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f008 fe1d 	bl	800b0c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002498:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 ffa2 	bl	80063e8 <USB_ReadInterrupts>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ae:	d121      	bne.n	80024f4 <HAL_PCD_IRQHandler+0x3fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80024be:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d111      	bne.n	80024ee <HAL_PCD_IRQHandler+0x3f8>
      {
        hpcd->LPM_State = LPM_L1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	f003 020f 	and.w	r2, r3, #15
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024e4:	2101      	movs	r1, #1
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f008 ffee 	bl	800b4c8 <HAL_PCDEx_LPM_Callback>
 80024ec:	e002      	b.n	80024f4 <HAL_PCD_IRQHandler+0x3fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f008 fde8 	bl	800b0c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 ff75 	bl	80063e8 <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002508:	f040 80a7 	bne.w	800265a <HAL_PCD_IRQHandler+0x564>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2110      	movs	r1, #16
 8002526:	4618      	mov	r0, r3
 8002528:	f003 f8e6 	bl	80056f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800252c:	2300      	movs	r3, #0
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002530:	e036      	b.n	80025a0 <HAL_PCD_IRQHandler+0x4aa>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800253e:	461a      	mov	r2, r3
 8002540:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002544:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	4413      	add	r3, r2
 800254e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002556:	0151      	lsls	r1, r2, #5
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	440a      	add	r2, r1
 800255c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002560:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002564:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002572:	461a      	mov	r2, r3
 8002574:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002578:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	015a      	lsls	r2, r3, #5
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	4413      	add	r3, r2
 8002582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800258a:	0151      	lsls	r1, r2, #5
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	440a      	add	r2, r1
 8002590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002594:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002598:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	3301      	adds	r3, #1
 800259e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3c3      	bcc.n	8002532 <HAL_PCD_IRQHandler+0x43c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	69fa      	ldr	r2, [r7, #28]
 80025b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x4fe>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d6:	f043 030b 	orr.w	r3, r3, #11
 80025da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ec:	f043 030b 	orr.w	r3, r3, #11
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	e015      	b.n	8002620 <HAL_PCD_IRQHandler+0x52a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002602:	4619      	mov	r1, r3
 8002604:	f242 032b 	movw	r3, #8235	; 0x202b
 8002608:	4313      	orrs	r3, r2
 800260a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261a:	f043 030b 	orr.w	r3, r3, #11
 800261e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69fa      	ldr	r2, [r7, #28]
 800262a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800262e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002632:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002644:	461a      	mov	r2, r3
 8002646:	f003 ffa7 	bl	8006598 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695a      	ldr	r2, [r3, #20]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002658:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f003 fec2 	bl	80063e8 <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800266e:	d12a      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x5d0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 ff59 	bl	800652c <USB_ActivateSetup>

      if (USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 f89b 	bl	80057ba <USB_GetDevSpeed>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <HAL_PCD_IRQHandler+0x59c>
      {
        hpcd->Init.speed = USB_OTG_SPEED_HIGH;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	e002      	b.n	8002698 <HAL_PCD_IRQHandler+0x5a2>
      }
      else
      {
        hpcd->Init.speed = USB_OTG_SPEED_FULL;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2203      	movs	r2, #3
 8002696:	60da      	str	r2, [r3, #12]
      }

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681c      	ldr	r4, [r3, #0]
 800269c:	f001 f9f0 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 80026a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	4620      	mov	r0, r4
 80026ac:	f002 fdba 	bl	8005224 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f008 fcde 	bl	800b072 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fe8c 	bl	80063e8 <USB_ReadInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d161      	bne.n	800279e <HAL_PCD_IRQHandler+0x6a8>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0210 	bic.w	r2, r2, #16
 80026e8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	f003 020f 	and.w	r2, r3, #15
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	1a9b      	subs	r3, r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	0c5b      	lsrs	r3, r3, #17
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	2b02      	cmp	r3, #2
 8002714:	d124      	bne.n	8002760 <HAL_PCD_IRQHandler+0x66a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d035      	beq.n	800278e <HAL_PCD_IRQHandler+0x698>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	091b      	lsrs	r3, r3, #4
 800272a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800272c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	6a38      	ldr	r0, [r7, #32]
 8002736:	f003 fd04 	bl	8006142 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002746:	441a      	add	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002758:	441a      	add	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	619a      	str	r2, [r3, #24]
 800275e:	e016      	b.n	800278e <HAL_PCD_IRQHandler+0x698>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	0c5b      	lsrs	r3, r3, #17
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	2b06      	cmp	r3, #6
 800276a:	d110      	bne.n	800278e <HAL_PCD_IRQHandler+0x698>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002772:	2208      	movs	r2, #8
 8002774:	4619      	mov	r1, r3
 8002776:	6a38      	ldr	r0, [r7, #32]
 8002778:	f003 fce3 	bl	8006142 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002788:	441a      	add	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0210 	orr.w	r2, r2, #16
 800279c:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fe20 	bl	80063e8 <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 0308 	and.w	r3, r3, #8
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d10a      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x6d2>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f008 fc4f 	bl	800b056 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f002 0208 	and.w	r2, r2, #8
 80027c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fe0b 	bl	80063e8 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027dc:	d10d      	bne.n	80027fa <HAL_PCD_IRQHandler+0x704>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f008 fcb3 	bl	800b150 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fdf2 	bl	80063e8 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800280a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800280e:	d10d      	bne.n	800282c <HAL_PCD_IRQHandler+0x736>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	b2db      	uxtb	r3, r3
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f008 fc88 	bl	800b12c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800282a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fdd9 	bl	80063e8 <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800283c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002840:	d10a      	bne.n	8002858 <HAL_PCD_IRQHandler+0x762>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f008 fc96 	bl	800b174 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fdc3 	bl	80063e8 <USB_ReadInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b04      	cmp	r3, #4
 800286a:	d115      	bne.n	8002898 <HAL_PCD_IRQHandler+0x7a2>
    {
      temp = hpcd->Instance->GOTGINT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_PCD_IRQHandler+0x78e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f008 fc86 	bl	800b190 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	e000      	b.n	8002898 <HAL_PCD_IRQHandler+0x7a2>
      return;
 8002896:	bf00      	nop
    }
  }
}
 8002898:	3734      	adds	r7, #52	; 0x34
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}

0800289e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_PCD_SetAddress+0x1a>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e013      	b.n	80028e0 <HAL_PCD_SetAddress+0x42>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	78fa      	ldrb	r2, [r7, #3]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fd33 	bl	800633c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	70fb      	strb	r3, [r7, #3]
 80028fa:	460b      	mov	r3, r1
 80028fc:	803b      	strh	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800290a:	2b00      	cmp	r3, #0
 800290c:	da0f      	bge.n	800292e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	f003 020f 	and.w	r2, r3, #15
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	1a9b      	subs	r3, r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	3338      	adds	r3, #56	; 0x38
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	705a      	strb	r2, [r3, #1]
 800292c:	e00f      	b.n	800294e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	f003 020f 	and.w	r2, r3, #15
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	3304      	adds	r3, #4
 8002946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	b2da      	uxtb	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800295a:	883a      	ldrh	r2, [r7, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	78ba      	ldrb	r2, [r7, #2]
 8002964:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d004      	beq.n	8002978 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002978:	78bb      	ldrb	r3, [r7, #2]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d102      	bne.n	8002984 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_PCD_EP_Open+0xaa>
 800298e:	2302      	movs	r3, #2
 8002990:	e00e      	b.n	80029b0 <HAL_PCD_EP_Open+0xc8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68f9      	ldr	r1, [r7, #12]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 ff2f 	bl	8005804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80029ae:	7afb      	ldrb	r3, [r7, #11]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da0f      	bge.n	80029ec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	f003 020f 	and.w	r2, r3, #15
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	3338      	adds	r3, #56	; 0x38
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	4413      	add	r3, r2
 80029e0:	3304      	adds	r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	705a      	strb	r2, [r3, #1]
 80029ea:	e00f      	b.n	8002a0c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	f003 020f 	and.w	r2, r3, #15
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	4413      	add	r3, r2
 8002a02:	3304      	adds	r3, #4
 8002a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_PCD_EP_Close+0x6e>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e00e      	b.n	8002a44 <HAL_PCD_EP_Close+0x8c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f002 ff6d 	bl	8005914 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a5c:	7afb      	ldrb	r3, [r7, #11]
 8002a5e:	f003 020f 	and.w	r2, r3, #15
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a8e:	7afb      	ldrb	r3, [r7, #11]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	461a      	mov	r2, r3
 8002abe:	6979      	ldr	r1, [r7, #20]
 8002ac0:	f003 f9c2 	bl	8005e48 <USB_EP0StartXfer>
 8002ac4:	e008      	b.n	8002ad8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6979      	ldr	r1, [r7, #20]
 8002ad4:	f002 ffa2 	bl	8005a1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002b04:	681b      	ldr	r3, [r3, #0]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	460b      	mov	r3, r1
 8002b20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	7afb      	ldrb	r3, [r7, #11]
 8002b24:	f003 020f 	and.w	r2, r3, #15
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	3338      	adds	r3, #56	; 0x38
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b52:	7afb      	ldrb	r3, [r7, #11]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d102      	bne.n	8002b6c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b6c:	7afb      	ldrb	r3, [r7, #11]
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	6979      	ldr	r1, [r7, #20]
 8002b84:	f003 f960 	bl	8005e48 <USB_EP0StartXfer>
 8002b88:	e008      	b.n	8002b9c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	6979      	ldr	r1, [r7, #20]
 8002b98:	f002 ff40 	bl	8005a1c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 020f 	and.w	r2, r3, #15
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d901      	bls.n	8002bc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e050      	b.n	8002c66 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da0f      	bge.n	8002bec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 020f 	and.w	r2, r3, #15
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	3338      	adds	r3, #56	; 0x38
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	705a      	strb	r2, [r3, #1]
 8002bea:	e00d      	b.n	8002c08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3304      	adds	r3, #4
 8002c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_PCD_EP_SetStall+0x82>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e01e      	b.n	8002c66 <HAL_PCD_EP_SetStall+0xc0>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68f9      	ldr	r1, [r7, #12]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f003 faac 	bl	8006194 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	b2d9      	uxtb	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002c56:	461a      	mov	r2, r3
 8002c58:	f003 fc9e 	bl	8006598 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	f003 020f 	and.w	r2, r3, #15
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d901      	bls.n	8002c8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e042      	b.n	8002d12 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	da0f      	bge.n	8002cb4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	3338      	adds	r3, #56	; 0x38
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	705a      	strb	r2, [r3, #1]
 8002cb2:	e00f      	b.n	8002cd4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cb4:	78fb      	ldrb	r3, [r7, #3]
 8002cb6:	f003 020f 	and.w	r2, r3, #15
 8002cba:	4613      	mov	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	3304      	adds	r3, #4
 8002ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_PCD_EP_ClrStall+0x86>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e00e      	b.n	8002d12 <HAL_PCD_EP_ClrStall+0xa4>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68f9      	ldr	r1, [r7, #12]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f003 fab4 	bl	8006270 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b08a      	sub	sp, #40	; 0x28
 8002d1e:	af02      	add	r7, sp, #8
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	3338      	adds	r3, #56	; 0x38
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3304      	adds	r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d901      	bls.n	8002d52 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e06c      	b.n	8002e2c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d902      	bls.n	8002d6e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3303      	adds	r3, #3
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d76:	e02b      	b.n	8002dd0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d902      	bls.n	8002d94 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	3303      	adds	r3, #3
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68d9      	ldr	r1, [r3, #12]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	4603      	mov	r3, r0
 8002db2:	6978      	ldr	r0, [r7, #20]
 8002db4:	f003 f990 	bl	80060d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	441a      	add	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	441a      	add	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d809      	bhi.n	8002dfa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d203      	bcs.n	8002dfa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1be      	bne.n	8002d78 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d811      	bhi.n	8002e2a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	6939      	ldr	r1, [r7, #16]
 8002e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e26:	4013      	ands	r3, r2
 8002e28:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	333c      	adds	r3, #60	; 0x3c
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	f040 80b3 	bne.w	8002fd2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d028      	beq.n	8002ec8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4a70      	ldr	r2, [pc, #448]	; (800303c <PCD_EP_OutXfrComplete_int+0x208>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d90e      	bls.n	8002e9c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e94:	461a      	mov	r2, r3
 8002e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e9a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f008 f893 	bl	800afc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eac:	461a      	mov	r2, r3
 8002eae:	2101      	movs	r1, #1
 8002eb0:	f003 fb72 	bl	8006598 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	6093      	str	r3, [r2, #8]
 8002ec6:	e0b3      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2320      	movs	r3, #32
 8002ee2:	6093      	str	r3, [r2, #8]
 8002ee4:	e0a4      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 809f 	bne.w	8003030 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a51      	ldr	r2, [pc, #324]	; (800303c <PCD_EP_OutXfrComplete_int+0x208>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d90f      	bls.n	8002f1a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f16:	6093      	str	r3, [r2, #8]
 8002f18:	e08a      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f2c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	0159      	lsls	r1, r3, #5
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	440b      	add	r3, r1
 8002f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002f40:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4403      	add	r3, r0
 8002f50:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f54:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4403      	add	r3, r0
 8002f78:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4419      	add	r1, r3
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4403      	add	r3, r0
 8002f8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f92:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f008 f826 	bl	800afec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d144      	bne.n	8003030 <PCD_EP_OutXfrComplete_int+0x1fc>
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d138      	bne.n	8003030 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2101      	movs	r1, #1
 8002fcc:	f003 fae4 	bl	8006598 <USB_EP0_OutStart>
 8002fd0:	e02e      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <PCD_EP_OutXfrComplete_int+0x20c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d124      	bne.n	8003024 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff6:	6093      	str	r3, [r2, #8]
 8002ff8:	e01a      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003010:	461a      	mov	r2, r3
 8003012:	2320      	movs	r3, #32
 8003014:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f007 ffe5 	bl	800afec <HAL_PCD_DataOutStageCallback>
 8003022:	e005      	b.n	8003030 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f007 ffde 	bl	800afec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	4f54300a 	.word	0x4f54300a
 8003040:	4f54310a 	.word	0x4f54310a

08003044 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	333c      	adds	r3, #60	; 0x3c
 800305c:	3304      	adds	r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d113      	bne.n	80030a2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4a1f      	ldr	r2, [pc, #124]	; (80030fc <PCD_EP_OutSetupPacket_int+0xb8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d922      	bls.n	80030c8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01d      	beq.n	80030c8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003098:	461a      	mov	r2, r3
 800309a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800309e:	6093      	str	r3, [r2, #8]
 80030a0:	e012      	b.n	80030c8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a16      	ldr	r2, [pc, #88]	; (8003100 <PCD_EP_OutSetupPacket_int+0xbc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10e      	bne.n	80030c8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d009      	beq.n	80030c8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f007 ff7d 	bl	800afc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <PCD_EP_OutSetupPacket_int+0xb8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d90c      	bls.n	80030f0 <PCD_EP_OutSetupPacket_int+0xac>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030e8:	461a      	mov	r2, r3
 80030ea:	2101      	movs	r1, #1
 80030ec:	f003 fa54 	bl	8006598 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	4f54300a 	.word	0x4f54300a
 8003100:	4f54310a 	.word	0x4f54310a

08003104 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	70fb      	strb	r3, [r7, #3]
 8003110:	4613      	mov	r3, r2
 8003112:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003122:	883b      	ldrh	r3, [r7, #0]
 8003124:	0419      	lsls	r1, r3, #16
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	430a      	orrs	r2, r1
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
 8003130:	e028      	b.n	8003184 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	0c1b      	lsrs	r3, r3, #16
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003140:	2300      	movs	r3, #0
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	e00d      	b.n	8003162 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	3340      	adds	r3, #64	; 0x40
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	3301      	adds	r3, #1
 8003160:	73fb      	strb	r3, [r7, #15]
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	3b01      	subs	r3, #1
 8003168:	429a      	cmp	r2, r3
 800316a:	d3ec      	bcc.n	8003146 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800316c:	883b      	ldrh	r3, [r7, #0]
 800316e:	0418      	lsls	r0, r3, #16
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	3b01      	subs	r3, #1
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	4302      	orrs	r2, r0
 800317c:	3340      	adds	r3, #64	; 0x40
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <HAL_PCDEx_ActivateLPM+0x44>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	10000003 	.word	0x10000003

080031fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40007000 	.word	0x40007000

0800321c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e25e      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8087 	beq.w	800334e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003240:	4b96      	ldr	r3, [pc, #600]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b04      	cmp	r3, #4
 800324a:	d00c      	beq.n	8003266 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324c:	4b93      	ldr	r3, [pc, #588]	; (800349c <HAL_RCC_OscConfig+0x280>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 030c 	and.w	r3, r3, #12
 8003254:	2b08      	cmp	r3, #8
 8003256:	d112      	bne.n	800327e <HAL_RCC_OscConfig+0x62>
 8003258:	4b90      	ldr	r3, [pc, #576]	; (800349c <HAL_RCC_OscConfig+0x280>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003264:	d10b      	bne.n	800327e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003266:	4b8d      	ldr	r3, [pc, #564]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d06c      	beq.n	800334c <HAL_RCC_OscConfig+0x130>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d168      	bne.n	800334c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e238      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003286:	d106      	bne.n	8003296 <HAL_RCC_OscConfig+0x7a>
 8003288:	4b84      	ldr	r3, [pc, #528]	; (800349c <HAL_RCC_OscConfig+0x280>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a83      	ldr	r2, [pc, #524]	; (800349c <HAL_RCC_OscConfig+0x280>)
 800328e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	e02e      	b.n	80032f4 <HAL_RCC_OscConfig+0xd8>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10c      	bne.n	80032b8 <HAL_RCC_OscConfig+0x9c>
 800329e:	4b7f      	ldr	r3, [pc, #508]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7e      	ldr	r2, [pc, #504]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b7c      	ldr	r3, [pc, #496]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7b      	ldr	r2, [pc, #492]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e01d      	b.n	80032f4 <HAL_RCC_OscConfig+0xd8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c0:	d10c      	bne.n	80032dc <HAL_RCC_OscConfig+0xc0>
 80032c2:	4b76      	ldr	r3, [pc, #472]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a75      	ldr	r2, [pc, #468]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	4b73      	ldr	r3, [pc, #460]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a72      	ldr	r2, [pc, #456]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	e00b      	b.n	80032f4 <HAL_RCC_OscConfig+0xd8>
 80032dc:	4b6f      	ldr	r3, [pc, #444]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a6e      	ldr	r2, [pc, #440]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	4b6c      	ldr	r3, [pc, #432]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a6b      	ldr	r2, [pc, #428]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80032ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d013      	beq.n	8003324 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fd f992 	bl	8000624 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003304:	f7fd f98e 	bl	8000624 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b64      	cmp	r3, #100	; 0x64
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e1ec      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	4b61      	ldr	r3, [pc, #388]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0xe8>
 8003322:	e014      	b.n	800334e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fd f97e 	bl	8000624 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800332c:	f7fd f97a 	bl	8000624 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e1d8      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	4b57      	ldr	r3, [pc, #348]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x110>
 800334a:	e000      	b.n	800334e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d069      	beq.n	800342e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800335a:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_RCC_OscConfig+0x280>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003366:	4b4d      	ldr	r3, [pc, #308]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b08      	cmp	r3, #8
 8003370:	d11c      	bne.n	80033ac <HAL_RCC_OscConfig+0x190>
 8003372:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x17a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1ac      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	493d      	ldr	r1, [pc, #244]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	e040      	b.n	800342e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d023      	beq.n	80033fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b4:	4b39      	ldr	r3, [pc, #228]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a38      	ldr	r2, [pc, #224]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fd f930 	bl	8000624 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c8:	f7fd f92c 	bl	8000624 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e18a      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b30      	ldr	r3, [pc, #192]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	4929      	ldr	r1, [pc, #164]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	600b      	str	r3, [r1, #0]
 80033fa:	e018      	b.n	800342e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fc:	4b27      	ldr	r3, [pc, #156]	; (800349c <HAL_RCC_OscConfig+0x280>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a26      	ldr	r2, [pc, #152]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fd f90c 	bl	8000624 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003410:	f7fd f908 	bl	8000624 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e166      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d038      	beq.n	80034ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d019      	beq.n	8003476 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fd f8e9 	bl	8000624 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003456:	f7fd f8e5 	bl	8000624 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e143      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <HAL_RCC_OscConfig+0x280>)
 800346a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x23a>
 8003474:	e01a      	b.n	80034ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCC_OscConfig+0x280>)
 8003478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <HAL_RCC_OscConfig+0x280>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003482:	f7fd f8cf 	bl	8000624 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800348a:	f7fd f8cb 	bl	8000624 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d903      	bls.n	80034a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e129      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
 800349c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	4b95      	ldr	r3, [pc, #596]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80034a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ee      	bne.n	800348a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80a4 	beq.w	8003602 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ba:	4b8f      	ldr	r3, [pc, #572]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10d      	bne.n	80034e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c6:	4b8c      	ldr	r3, [pc, #560]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a8b      	ldr	r2, [pc, #556]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e2:	4b86      	ldr	r3, [pc, #536]	; (80036fc <HAL_RCC_OscConfig+0x4e0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80034ee:	4b83      	ldr	r3, [pc, #524]	; (80036fc <HAL_RCC_OscConfig+0x4e0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a82      	ldr	r2, [pc, #520]	; (80036fc <HAL_RCC_OscConfig+0x4e0>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fd f893 	bl	8000624 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003502:	f7fd f88f 	bl	8000624 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b64      	cmp	r3, #100	; 0x64
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e0ed      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003514:	4b79      	ldr	r3, [pc, #484]	; (80036fc <HAL_RCC_OscConfig+0x4e0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x31a>
 8003528:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a72      	ldr	r2, [pc, #456]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e02d      	b.n	8003592 <HAL_RCC_OscConfig+0x376>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x33c>
 800353e:	4b6e      	ldr	r3, [pc, #440]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a6d      	ldr	r2, [pc, #436]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
 800354a:	4b6b      	ldr	r3, [pc, #428]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a6a      	ldr	r2, [pc, #424]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003550:	f023 0304 	bic.w	r3, r3, #4
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	e01c      	b.n	8003592 <HAL_RCC_OscConfig+0x376>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b05      	cmp	r3, #5
 800355e:	d10c      	bne.n	800357a <HAL_RCC_OscConfig+0x35e>
 8003560:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	4a64      	ldr	r2, [pc, #400]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003566:	f043 0304 	orr.w	r3, r3, #4
 800356a:	6713      	str	r3, [r2, #112]	; 0x70
 800356c:	4b62      	ldr	r3, [pc, #392]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	4a61      	ldr	r2, [pc, #388]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	; 0x70
 8003578:	e00b      	b.n	8003592 <HAL_RCC_OscConfig+0x376>
 800357a:	4b5f      	ldr	r3, [pc, #380]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	4a5e      	ldr	r2, [pc, #376]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6713      	str	r3, [r2, #112]	; 0x70
 8003586:	4b5c      	ldr	r3, [pc, #368]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358a:	4a5b      	ldr	r2, [pc, #364]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 800358c:	f023 0304 	bic.w	r3, r3, #4
 8003590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d015      	beq.n	80035c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fd f843 	bl	8000624 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	e00a      	b.n	80035b8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a2:	f7fd f83f 	bl	8000624 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e09b      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	4b4f      	ldr	r3, [pc, #316]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0ee      	beq.n	80035a2 <HAL_RCC_OscConfig+0x386>
 80035c4:	e014      	b.n	80035f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fd f82d 	bl	8000624 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ce:	f7fd f829 	bl	8000624 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e085      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	4b44      	ldr	r3, [pc, #272]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ee      	bne.n	80035ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f6:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a3f      	ldr	r2, [pc, #252]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80035fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d071      	beq.n	80036ee <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800360a:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b08      	cmp	r3, #8
 8003614:	d069      	beq.n	80036ea <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d14b      	bne.n	80036b6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a35      	ldr	r2, [pc, #212]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362a:	f7fc fffb 	bl	8000624 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003632:	f7fc fff7 	bl	8000624 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e055      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003644:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f0      	bne.n	8003632 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	019b      	lsls	r3, r3, #6
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	3b01      	subs	r3, #1
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	061b      	lsls	r3, r3, #24
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	071b      	lsls	r3, r3, #28
 800367c:	491e      	ldr	r1, [pc, #120]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 8003688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368e:	f7fc ffc9 	bl	8000624 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003696:	f7fc ffc5 	bl	8000624 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e023      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a8:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x47a>
 80036b4:	e01b      	b.n	80036ee <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a0f      	ldr	r2, [pc, #60]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80036bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c2:	f7fc ffaf 	bl	8000624 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ca:	f7fc ffab 	bl	8000624 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e009      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCC_OscConfig+0x4dc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f0      	bne.n	80036ca <HAL_RCC_OscConfig+0x4ae>
 80036e8:	e001      	b.n	80036ee <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40007000 	.word	0x40007000

08003700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0ce      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003718:	4b69      	ldr	r3, [pc, #420]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d910      	bls.n	8003748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b66      	ldr	r3, [pc, #408]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 020f 	bic.w	r2, r3, #15
 800372e:	4964      	ldr	r1, [pc, #400]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b62      	ldr	r3, [pc, #392]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0b6      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003760:	4b58      	ldr	r3, [pc, #352]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a57      	ldr	r2, [pc, #348]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800376a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003778:	4b52      	ldr	r3, [pc, #328]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a51      	ldr	r2, [pc, #324]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003782:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	494c      	ldr	r1, [pc, #304]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d040      	beq.n	8003824 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	4b46      	ldr	r3, [pc, #280]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d115      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e07d      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e071      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b3c      	ldr	r3, [pc, #240]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e069      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b38      	ldr	r3, [pc, #224]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4935      	ldr	r1, [pc, #212]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f4:	f7fc ff16 	bl	8000624 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fc ff12 	bl	8000624 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e051      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b2c      	ldr	r3, [pc, #176]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003824:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d210      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 020f 	bic.w	r2, r3, #15
 800383a:	4921      	ldr	r1, [pc, #132]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e030      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003860:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4915      	ldr	r1, [pc, #84]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	490d      	ldr	r1, [pc, #52]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003892:	f000 f81d 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8003896:	4601      	mov	r1, r0
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	5cd3      	ldrb	r3, [r2, r3]
 80038a6:	fa21 f303 	lsr.w	r3, r1, r3
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <HAL_RCC_ClockConfig+0x1cc>)
 80038ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80038ae:	2000      	movs	r0, #0
 80038b0:	f007 f842 	bl	800a938 <HAL_InitTick>

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023c00 	.word	0x40023c00
 80038c4:	40023800 	.word	0x40023800
 80038c8:	0800c768 	.word	0x0800c768
 80038cc:	20000118 	.word	0x20000118

080038d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	2300      	movs	r3, #0
 80038e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d007      	beq.n	8003902 <HAL_RCC_GetSysClockFreq+0x32>
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d008      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x38>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 80b4 	bne.w	8003a64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b5e      	ldr	r3, [pc, #376]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038fe:	60bb      	str	r3, [r7, #8]
       break;
 8003900:	e0b3      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003902:	4b5e      	ldr	r3, [pc, #376]	; (8003a7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003904:	60bb      	str	r3, [r7, #8]
      break;
 8003906:	e0b0      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003908:	4b5a      	ldr	r3, [pc, #360]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003910:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003912:	4b58      	ldr	r3, [pc, #352]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d04a      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391e:	4b55      	ldr	r3, [pc, #340]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	f04f 0400 	mov.w	r4, #0
 8003928:	f240 11ff 	movw	r1, #511	; 0x1ff
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	ea03 0501 	and.w	r5, r3, r1
 8003934:	ea04 0602 	and.w	r6, r4, r2
 8003938:	4629      	mov	r1, r5
 800393a:	4632      	mov	r2, r6
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	f04f 0400 	mov.w	r4, #0
 8003944:	0154      	lsls	r4, r2, #5
 8003946:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800394a:	014b      	lsls	r3, r1, #5
 800394c:	4619      	mov	r1, r3
 800394e:	4622      	mov	r2, r4
 8003950:	1b49      	subs	r1, r1, r5
 8003952:	eb62 0206 	sbc.w	r2, r2, r6
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	f04f 0400 	mov.w	r4, #0
 800395e:	0194      	lsls	r4, r2, #6
 8003960:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003964:	018b      	lsls	r3, r1, #6
 8003966:	1a5b      	subs	r3, r3, r1
 8003968:	eb64 0402 	sbc.w	r4, r4, r2
 800396c:	f04f 0100 	mov.w	r1, #0
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	00e2      	lsls	r2, r4, #3
 8003976:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800397a:	00d9      	lsls	r1, r3, #3
 800397c:	460b      	mov	r3, r1
 800397e:	4614      	mov	r4, r2
 8003980:	195b      	adds	r3, r3, r5
 8003982:	eb44 0406 	adc.w	r4, r4, r6
 8003986:	f04f 0100 	mov.w	r1, #0
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	0262      	lsls	r2, r4, #9
 8003990:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003994:	0259      	lsls	r1, r3, #9
 8003996:	460b      	mov	r3, r1
 8003998:	4614      	mov	r4, r2
 800399a:	4618      	mov	r0, r3
 800399c:	4621      	mov	r1, r4
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f04f 0400 	mov.w	r4, #0
 80039a4:	461a      	mov	r2, r3
 80039a6:	4623      	mov	r3, r4
 80039a8:	f7fc fc9a 	bl	80002e0 <__aeabi_uldivmod>
 80039ac:	4603      	mov	r3, r0
 80039ae:	460c      	mov	r4, r1
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e049      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b4:	4b2f      	ldr	r3, [pc, #188]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	f04f 0400 	mov.w	r4, #0
 80039be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	ea03 0501 	and.w	r5, r3, r1
 80039ca:	ea04 0602 	and.w	r6, r4, r2
 80039ce:	4629      	mov	r1, r5
 80039d0:	4632      	mov	r2, r6
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	f04f 0400 	mov.w	r4, #0
 80039da:	0154      	lsls	r4, r2, #5
 80039dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039e0:	014b      	lsls	r3, r1, #5
 80039e2:	4619      	mov	r1, r3
 80039e4:	4622      	mov	r2, r4
 80039e6:	1b49      	subs	r1, r1, r5
 80039e8:	eb62 0206 	sbc.w	r2, r2, r6
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	f04f 0400 	mov.w	r4, #0
 80039f4:	0194      	lsls	r4, r2, #6
 80039f6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039fa:	018b      	lsls	r3, r1, #6
 80039fc:	1a5b      	subs	r3, r3, r1
 80039fe:	eb64 0402 	sbc.w	r4, r4, r2
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	00e2      	lsls	r2, r4, #3
 8003a0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a10:	00d9      	lsls	r1, r3, #3
 8003a12:	460b      	mov	r3, r1
 8003a14:	4614      	mov	r4, r2
 8003a16:	195b      	adds	r3, r3, r5
 8003a18:	eb44 0406 	adc.w	r4, r4, r6
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	f04f 0200 	mov.w	r2, #0
 8003a24:	02a2      	lsls	r2, r4, #10
 8003a26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a2a:	0299      	lsls	r1, r3, #10
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4614      	mov	r4, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	4621      	mov	r1, r4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f04f 0400 	mov.w	r4, #0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	f7fc fc4f 	bl	80002e0 <__aeabi_uldivmod>
 8003a42:	4603      	mov	r3, r0
 8003a44:	460c      	mov	r4, r1
 8003a46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	0c1b      	lsrs	r3, r3, #16
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	3301      	adds	r3, #1
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	60bb      	str	r3, [r7, #8]
      break;
 8003a62:	e002      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b04      	ldr	r3, [pc, #16]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a66:	60bb      	str	r3, [r7, #8]
      break;
 8003a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	00f42400 	.word	0x00f42400
 8003a7c:	007a1200 	.word	0x007a1200

08003a80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000118 	.word	0x20000118

08003a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a9c:	f7ff fff0 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0a9b      	lsrs	r3, r3, #10
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4a03      	ldr	r2, [pc, #12]	; (8003abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aae:	5cd3      	ldrb	r3, [r2, r3]
 8003ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	0800c778 	.word	0x0800c778

08003ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ac4:	f7ff ffdc 	bl	8003a80 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4601      	mov	r1, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	0b5b      	lsrs	r3, r3, #13
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4a03      	ldr	r2, [pc, #12]	; (8003ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad6:	5cd3      	ldrb	r3, [r2, r3]
 8003ad8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	0800c778 	.word	0x0800c778

08003ae8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	220f      	movs	r2, #15
 8003af6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_GetClockConfig+0x5c>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 0203 	and.w	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <HAL_RCC_GetClockConfig+0x5c>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <HAL_RCC_GetClockConfig+0x5c>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_RCC_GetClockConfig+0x5c>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	08db      	lsrs	r3, r3, #3
 8003b22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <HAL_RCC_GetClockConfig+0x60>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40023c00 	.word	0x40023c00

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d012      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b74:	4b69      	ldr	r3, [pc, #420]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a68      	ldr	r2, [pc, #416]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	4b66      	ldr	r3, [pc, #408]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	4964      	ldr	r1, [pc, #400]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d017      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	4959      	ldr	r1, [pc, #356]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc4:	d101      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d017      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003be2:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	494a      	ldr	r1, [pc, #296]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c00:	d101      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 808b 	beq.w	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c30:	4b3a      	ldr	r3, [pc, #232]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	4a39      	ldr	r2, [pc, #228]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3c:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c48:	4b35      	ldr	r3, [pc, #212]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a34      	ldr	r2, [pc, #208]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c54:	f7fc fce6 	bl	8000624 <HAL_GetTick>
 8003c58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7fc fce2 	bl	8000624 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e38d      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7a:	4b28      	ldr	r3, [pc, #160]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d035      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d02e      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cae:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a1a      	ldr	r2, [pc, #104]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cba:	4a18      	ldr	r2, [pc, #96]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d114      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fc fcaa 	bl	8000624 <HAL_GetTick>
 8003cd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fc fca6 	bl	8000624 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e34f      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d02:	d111      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d12:	400b      	ands	r3, r1
 8003d14:	4901      	ldr	r1, [pc, #4]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000
 8003d24:	0ffffcff 	.word	0x0ffffcff
 8003d28:	4bb3      	ldr	r3, [pc, #716]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4ab2      	ldr	r2, [pc, #712]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d32:	6093      	str	r3, [r2, #8]
 8003d34:	4bb0      	ldr	r3, [pc, #704]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	49ad      	ldr	r1, [pc, #692]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d52:	4ba9      	ldr	r3, [pc, #676]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d58:	4aa7      	ldr	r2, [pc, #668]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d62:	4ba5      	ldr	r3, [pc, #660]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d64:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	49a2      	ldr	r1, [pc, #648]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d80:	4b9d      	ldr	r3, [pc, #628]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d8e:	499a      	ldr	r1, [pc, #616]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003da2:	4b95      	ldr	r3, [pc, #596]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db0:	4991      	ldr	r1, [pc, #580]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dc4:	4b8c      	ldr	r3, [pc, #560]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	4989      	ldr	r1, [pc, #548]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003de6:	4b84      	ldr	r3, [pc, #528]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df4:	4980      	ldr	r1, [pc, #512]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e08:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	f023 0203 	bic.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	4978      	ldr	r1, [pc, #480]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e2a:	4b73      	ldr	r3, [pc, #460]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e30:	f023 020c 	bic.w	r2, r3, #12
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e38:	496f      	ldr	r1, [pc, #444]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	4967      	ldr	r1, [pc, #412]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e6e:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	495e      	ldr	r1, [pc, #376]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e90:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	4956      	ldr	r1, [pc, #344]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003eb2:	4b51      	ldr	r3, [pc, #324]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	494d      	ldr	r1, [pc, #308]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ed4:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	4945      	ldr	r1, [pc, #276]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ef6:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f04:	493c      	ldr	r1, [pc, #240]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f18:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f26:	4934      	ldr	r1, [pc, #208]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d011      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f3a:	4b2f      	ldr	r3, [pc, #188]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f48:	492b      	ldr	r1, [pc, #172]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f58:	d101      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f88:	491b      	ldr	r1, [pc, #108]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f9c:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fac:	4912      	ldr	r1, [pc, #72]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00b      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd0:	4909      	ldr	r1, [pc, #36]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00f      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	e002      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	4985      	ldr	r1, [pc, #532]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004010:	4b80      	ldr	r3, [pc, #512]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004012:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004016:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004020:	497c      	ldr	r1, [pc, #496]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d005      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004036:	f040 80d6 	bne.w	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a75      	ldr	r2, [pc, #468]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004040:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004046:	f7fc faed 	bl	8000624 <HAL_GetTick>
 800404a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800404c:	e008      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800404e:	f7fc fae9 	bl	8000624 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b64      	cmp	r3, #100	; 0x64
 800405a:	d901      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e194      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004060:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f0      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d021      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407c:	2b00      	cmp	r3, #0
 800407e:	d11d      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004080:	4b64      	ldr	r3, [pc, #400]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800408e:	4b61      	ldr	r3, [pc, #388]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004094:	0e1b      	lsrs	r3, r3, #24
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	019a      	lsls	r2, r3, #6
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	041b      	lsls	r3, r3, #16
 80040a6:	431a      	orrs	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	071b      	lsls	r3, r3, #28
 80040b4:	4957      	ldr	r1, [pc, #348]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d004      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d02e      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e6:	d129      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80040e8:	4b4a      	ldr	r3, [pc, #296]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ee:	0c1b      	lsrs	r3, r3, #16
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040f6:	4b47      	ldr	r3, [pc, #284]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80040f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fc:	0f1b      	lsrs	r3, r3, #28
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	019a      	lsls	r2, r3, #6
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	041b      	lsls	r3, r3, #16
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	061b      	lsls	r3, r3, #24
 8004116:	431a      	orrs	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	071b      	lsls	r3, r3, #28
 800411c:	493d      	ldr	r1, [pc, #244]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004124:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800412a:	f023 021f 	bic.w	r2, r3, #31
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	3b01      	subs	r3, #1
 8004134:	4937      	ldr	r1, [pc, #220]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01d      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004148:	4b32      	ldr	r3, [pc, #200]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800414a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800414e:	0e1b      	lsrs	r3, r3, #24
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004156:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004158:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415c:	0f1b      	lsrs	r3, r3, #28
 800415e:	f003 0307 	and.w	r3, r3, #7
 8004162:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	019a      	lsls	r2, r3, #6
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	431a      	orrs	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	071b      	lsls	r3, r3, #28
 800417c:	4925      	ldr	r1, [pc, #148]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d011      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	019a      	lsls	r2, r3, #6
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	061b      	lsls	r3, r3, #24
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	071b      	lsls	r3, r3, #28
 80041ac:	4919      	ldr	r1, [pc, #100]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a16      	ldr	r2, [pc, #88]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c0:	f7fc fa30 	bl	8000624 <HAL_GetTick>
 80041c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041c8:	f7fc fa2c 	bl	8000624 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b64      	cmp	r3, #100	; 0x64
 80041d4:	d901      	bls.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e0d7      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	f040 80cd 	bne.w	8004388 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80041f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fa:	f7fc fa13 	bl	8000624 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004200:	e00a      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004202:	f7fc fa0f 	bl	8000624 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b64      	cmp	r3, #100	; 0x64
 800420e:	d903      	bls.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e0ba      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004214:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004218:	4b5e      	ldr	r3, [pc, #376]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004224:	d0ed      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004242:	2b00      	cmp	r3, #0
 8004244:	d02e      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b00      	cmp	r3, #0
 800424c:	d12a      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800424e:	4b51      	ldr	r3, [pc, #324]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800425c:	4b4d      	ldr	r3, [pc, #308]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	0f1b      	lsrs	r3, r3, #28
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	019a      	lsls	r2, r3, #6
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	071b      	lsls	r3, r3, #28
 8004282:	4944      	ldr	r1, [pc, #272]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800428a:	4b42      	ldr	r3, [pc, #264]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800428c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004290:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004298:	3b01      	subs	r3, #1
 800429a:	021b      	lsls	r3, r3, #8
 800429c:	493d      	ldr	r1, [pc, #244]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d022      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b8:	d11d      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042ba:	4b36      	ldr	r3, [pc, #216]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	0e1b      	lsrs	r3, r3, #24
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042c8:	4b32      	ldr	r3, [pc, #200]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	0f1b      	lsrs	r3, r3, #28
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	019a      	lsls	r2, r3, #6
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	431a      	orrs	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	071b      	lsls	r3, r3, #28
 80042ee:	4929      	ldr	r1, [pc, #164]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d028      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	0e1b      	lsrs	r3, r3, #24
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	0c1b      	lsrs	r3, r3, #16
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	019a      	lsls	r2, r3, #6
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	041b      	lsls	r3, r3, #16
 8004328:	431a      	orrs	r2, r3
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	071b      	lsls	r3, r3, #28
 8004336:	4917      	ldr	r1, [pc, #92]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	4911      	ldr	r1, [pc, #68]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004354:	4b0f      	ldr	r3, [pc, #60]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a0e      	ldr	r2, [pc, #56]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800435a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004360:	f7fc f960 	bl	8000624 <HAL_GetTick>
 8004364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004368:	f7fc f95c 	bl	8000624 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e007      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004386:	d1ef      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800

08004398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e01d      	b.n	80043e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f006 fa50 	bl	800a864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f000 f9a6 	bl	8004728 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0201 	orr.w	r2, r2, #1
 8004406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <HAL_TIM_Base_Start_IT+0x50>)
 8004410:	4013      	ands	r3, r2
 8004412:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b06      	cmp	r3, #6
 8004418:	d00b      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x42>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004420:	d007      	beq.n	8004432 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0201 	orr.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	00010007 	.word	0x00010007

08004444 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a1a      	ldr	r2, [r3, #32]
 8004462:	f241 1311 	movw	r3, #4369	; 0x1111
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10f      	bne.n	800448c <HAL_TIM_Base_Stop_IT+0x48>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a1a      	ldr	r2, [r3, #32]
 8004472:	f240 4344 	movw	r3, #1092	; 0x444
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_TIM_Base_Stop_IT+0x48>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d122      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d11b      	bne.n	80044f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0202 	mvn.w	r2, #2
 80044c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f905 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 80044e2:	e005      	b.n	80044f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f8f7 	bl	80046d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f908 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d122      	bne.n	800454a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b04      	cmp	r3, #4
 8004510:	d11b      	bne.n	800454a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f06f 0204 	mvn.w	r2, #4
 800451a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8db 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 8004536:	e005      	b.n	8004544 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f8cd 	bl	80046d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f8de 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b08      	cmp	r3, #8
 8004556:	d122      	bne.n	800459e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b08      	cmp	r3, #8
 8004564:	d11b      	bne.n	800459e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f06f 0208 	mvn.w	r2, #8
 800456e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2204      	movs	r2, #4
 8004574:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f8b1 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 800458a:	e005      	b.n	8004598 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f8a3 	bl	80046d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8b4 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d122      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d11b      	bne.n	80045f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f06f 0210 	mvn.w	r2, #16
 80045c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2208      	movs	r2, #8
 80045c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f887 	bl	80046ec <HAL_TIM_IC_CaptureCallback>
 80045de:	e005      	b.n	80045ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f879 	bl	80046d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f88a 	bl	8004700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10e      	bne.n	800461e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0201 	mvn.w	r2, #1
 8004616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f005 ffe1 	bl	800a5e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004628:	2b80      	cmp	r3, #128	; 0x80
 800462a:	d10e      	bne.n	800464a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b80      	cmp	r3, #128	; 0x80
 8004638:	d107      	bne.n	800464a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f975 	bl	8004934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004658:	d10e      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d107      	bne.n	8004678 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f968 	bl	8004948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d10e      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d107      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800469c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f838 	bl	8004714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0320 	and.w	r3, r3, #32
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d10e      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d107      	bne.n	80046d0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0220 	mvn.w	r2, #32
 80046c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f928 	bl	8004920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d0:	bf00      	nop
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a40      	ldr	r2, [pc, #256]	; (800483c <TIM_Base_SetConfig+0x114>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <TIM_Base_SetConfig+0x40>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d00f      	beq.n	8004768 <TIM_Base_SetConfig+0x40>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a3d      	ldr	r2, [pc, #244]	; (8004840 <TIM_Base_SetConfig+0x118>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00b      	beq.n	8004768 <TIM_Base_SetConfig+0x40>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a3c      	ldr	r2, [pc, #240]	; (8004844 <TIM_Base_SetConfig+0x11c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d007      	beq.n	8004768 <TIM_Base_SetConfig+0x40>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <TIM_Base_SetConfig+0x120>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a3a      	ldr	r2, [pc, #232]	; (800484c <TIM_Base_SetConfig+0x124>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d108      	bne.n	800477a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2f      	ldr	r2, [pc, #188]	; (800483c <TIM_Base_SetConfig+0x114>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d02b      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004788:	d027      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a2c      	ldr	r2, [pc, #176]	; (8004840 <TIM_Base_SetConfig+0x118>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d023      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a2b      	ldr	r2, [pc, #172]	; (8004844 <TIM_Base_SetConfig+0x11c>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d01f      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <TIM_Base_SetConfig+0x120>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01b      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a29      	ldr	r2, [pc, #164]	; (800484c <TIM_Base_SetConfig+0x124>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d017      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a28      	ldr	r2, [pc, #160]	; (8004850 <TIM_Base_SetConfig+0x128>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a27      	ldr	r2, [pc, #156]	; (8004854 <TIM_Base_SetConfig+0x12c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00f      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a26      	ldr	r2, [pc, #152]	; (8004858 <TIM_Base_SetConfig+0x130>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00b      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a25      	ldr	r2, [pc, #148]	; (800485c <TIM_Base_SetConfig+0x134>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a24      	ldr	r2, [pc, #144]	; (8004860 <TIM_Base_SetConfig+0x138>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a23      	ldr	r2, [pc, #140]	; (8004864 <TIM_Base_SetConfig+0x13c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d108      	bne.n	80047ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a0a      	ldr	r2, [pc, #40]	; (800483c <TIM_Base_SetConfig+0x114>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_Base_SetConfig+0xf8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a0c      	ldr	r2, [pc, #48]	; (800484c <TIM_Base_SetConfig+0x124>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d103      	bne.n	8004828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	615a      	str	r2, [r3, #20]
}
 800482e:	bf00      	nop
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40010400 	.word	0x40010400
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800
 800485c:	40001800 	.word	0x40001800
 8004860:	40001c00 	.word	0x40001c00
 8004864:	40002000 	.word	0x40002000

08004868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800487c:	2302      	movs	r3, #2
 800487e:	e045      	b.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1b      	ldr	r2, [pc, #108]	; (800491c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d108      	bne.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048de:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40010000 	.word	0x40010000
 800491c:	40010400 	.word	0x40010400

08004920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e040      	b.n	80049f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f005 ff96 	bl	800a8b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2224      	movs	r2, #36	; 0x24
 8004988:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f82c 	bl	80049f8 <UART_SetConfig>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d101      	bne.n	80049aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e022      	b.n	80049f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fac4 	bl	8004f40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fb4b 	bl	8005084 <UART_CheckIdleState>
 80049ee:	4603      	mov	r3, r0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4bb1      	ldr	r3, [pc, #708]	; (8004cec <UART_SetConfig+0x2f4>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	6939      	ldr	r1, [r7, #16]
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a9f      	ldr	r2, [pc, #636]	; (8004cf0 <UART_SetConfig+0x2f8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d121      	bne.n	8004abc <UART_SetConfig+0xc4>
 8004a78:	4b9e      	ldr	r3, [pc, #632]	; (8004cf4 <UART_SetConfig+0x2fc>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d816      	bhi.n	8004ab4 <UART_SetConfig+0xbc>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <UART_SetConfig+0x94>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aa9 	.word	0x08004aa9
 8004a94:	08004aa3 	.word	0x08004aa3
 8004a98:	08004aaf 	.word	0x08004aaf
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e151      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e14e      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e14b      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004aae:	2308      	movs	r3, #8
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e148      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	bf00      	nop
 8004aba:	e144      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a8d      	ldr	r2, [pc, #564]	; (8004cf8 <UART_SetConfig+0x300>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d134      	bne.n	8004b30 <UART_SetConfig+0x138>
 8004ac6:	4b8b      	ldr	r3, [pc, #556]	; (8004cf4 <UART_SetConfig+0x2fc>)
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	d829      	bhi.n	8004b28 <UART_SetConfig+0x130>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0xe4>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b11 	.word	0x08004b11
 8004ae0:	08004b29 	.word	0x08004b29
 8004ae4:	08004b29 	.word	0x08004b29
 8004ae8:	08004b29 	.word	0x08004b29
 8004aec:	08004b1d 	.word	0x08004b1d
 8004af0:	08004b29 	.word	0x08004b29
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b29 	.word	0x08004b29
 8004afc:	08004b17 	.word	0x08004b17
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004b29 	.word	0x08004b29
 8004b0c:	08004b23 	.word	0x08004b23
 8004b10:	2300      	movs	r3, #0
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e117      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b16:	2302      	movs	r3, #2
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e114      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e111      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b22:	2308      	movs	r3, #8
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e10e      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	bf00      	nop
 8004b2e:	e10a      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a71      	ldr	r2, [pc, #452]	; (8004cfc <UART_SetConfig+0x304>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d120      	bne.n	8004b7c <UART_SetConfig+0x184>
 8004b3a:	4b6e      	ldr	r3, [pc, #440]	; (8004cf4 <UART_SetConfig+0x2fc>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d00f      	beq.n	8004b68 <UART_SetConfig+0x170>
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d802      	bhi.n	8004b52 <UART_SetConfig+0x15a>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <UART_SetConfig+0x164>
 8004b50:	e010      	b.n	8004b74 <UART_SetConfig+0x17c>
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d005      	beq.n	8004b62 <UART_SetConfig+0x16a>
 8004b56:	2b30      	cmp	r3, #48	; 0x30
 8004b58:	d009      	beq.n	8004b6e <UART_SetConfig+0x176>
 8004b5a:	e00b      	b.n	8004b74 <UART_SetConfig+0x17c>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e0f1      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b62:	2302      	movs	r3, #2
 8004b64:	77fb      	strb	r3, [r7, #31]
 8004b66:	e0ee      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b68:	2304      	movs	r3, #4
 8004b6a:	77fb      	strb	r3, [r7, #31]
 8004b6c:	e0eb      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b6e:	2308      	movs	r3, #8
 8004b70:	77fb      	strb	r3, [r7, #31]
 8004b72:	e0e8      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b74:	2310      	movs	r3, #16
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	bf00      	nop
 8004b7a:	e0e4      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a5f      	ldr	r2, [pc, #380]	; (8004d00 <UART_SetConfig+0x308>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d120      	bne.n	8004bc8 <UART_SetConfig+0x1d0>
 8004b86:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <UART_SetConfig+0x2fc>)
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b90:	2b40      	cmp	r3, #64	; 0x40
 8004b92:	d00f      	beq.n	8004bb4 <UART_SetConfig+0x1bc>
 8004b94:	2b40      	cmp	r3, #64	; 0x40
 8004b96:	d802      	bhi.n	8004b9e <UART_SetConfig+0x1a6>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <UART_SetConfig+0x1b0>
 8004b9c:	e010      	b.n	8004bc0 <UART_SetConfig+0x1c8>
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d005      	beq.n	8004bae <UART_SetConfig+0x1b6>
 8004ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba4:	d009      	beq.n	8004bba <UART_SetConfig+0x1c2>
 8004ba6:	e00b      	b.n	8004bc0 <UART_SetConfig+0x1c8>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e0cb      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e0c8      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e0c5      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004bba:	2308      	movs	r3, #8
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e0c2      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	bf00      	nop
 8004bc6:	e0be      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a4d      	ldr	r2, [pc, #308]	; (8004d04 <UART_SetConfig+0x30c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d124      	bne.n	8004c1c <UART_SetConfig+0x224>
 8004bd2:	4b48      	ldr	r3, [pc, #288]	; (8004cf4 <UART_SetConfig+0x2fc>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be0:	d012      	beq.n	8004c08 <UART_SetConfig+0x210>
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004be6:	d802      	bhi.n	8004bee <UART_SetConfig+0x1f6>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <UART_SetConfig+0x204>
 8004bec:	e012      	b.n	8004c14 <UART_SetConfig+0x21c>
 8004bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf2:	d006      	beq.n	8004c02 <UART_SetConfig+0x20a>
 8004bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf8:	d009      	beq.n	8004c0e <UART_SetConfig+0x216>
 8004bfa:	e00b      	b.n	8004c14 <UART_SetConfig+0x21c>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	77fb      	strb	r3, [r7, #31]
 8004c00:	e0a1      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e09e      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e09b      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e098      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c14:	2310      	movs	r3, #16
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	bf00      	nop
 8004c1a:	e094      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a39      	ldr	r2, [pc, #228]	; (8004d08 <UART_SetConfig+0x310>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d124      	bne.n	8004c70 <UART_SetConfig+0x278>
 8004c26:	4b33      	ldr	r3, [pc, #204]	; (8004cf4 <UART_SetConfig+0x2fc>)
 8004c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c34:	d012      	beq.n	8004c5c <UART_SetConfig+0x264>
 8004c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c3a:	d802      	bhi.n	8004c42 <UART_SetConfig+0x24a>
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <UART_SetConfig+0x258>
 8004c40:	e012      	b.n	8004c68 <UART_SetConfig+0x270>
 8004c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c46:	d006      	beq.n	8004c56 <UART_SetConfig+0x25e>
 8004c48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c4c:	d009      	beq.n	8004c62 <UART_SetConfig+0x26a>
 8004c4e:	e00b      	b.n	8004c68 <UART_SetConfig+0x270>
 8004c50:	2301      	movs	r3, #1
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e077      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e074      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e071      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c62:	2308      	movs	r3, #8
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e06e      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	bf00      	nop
 8004c6e:	e06a      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a25      	ldr	r2, [pc, #148]	; (8004d0c <UART_SetConfig+0x314>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d124      	bne.n	8004cc4 <UART_SetConfig+0x2cc>
 8004c7a:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <UART_SetConfig+0x2fc>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c88:	d012      	beq.n	8004cb0 <UART_SetConfig+0x2b8>
 8004c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8e:	d802      	bhi.n	8004c96 <UART_SetConfig+0x29e>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <UART_SetConfig+0x2ac>
 8004c94:	e012      	b.n	8004cbc <UART_SetConfig+0x2c4>
 8004c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9a:	d006      	beq.n	8004caa <UART_SetConfig+0x2b2>
 8004c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ca0:	d009      	beq.n	8004cb6 <UART_SetConfig+0x2be>
 8004ca2:	e00b      	b.n	8004cbc <UART_SetConfig+0x2c4>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e04d      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004caa:	2302      	movs	r3, #2
 8004cac:	77fb      	strb	r3, [r7, #31]
 8004cae:	e04a      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	77fb      	strb	r3, [r7, #31]
 8004cb4:	e047      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	77fb      	strb	r3, [r7, #31]
 8004cba:	e044      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	bf00      	nop
 8004cc2:	e040      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a11      	ldr	r2, [pc, #68]	; (8004d10 <UART_SetConfig+0x318>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d139      	bne.n	8004d42 <UART_SetConfig+0x34a>
 8004cce:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <UART_SetConfig+0x2fc>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cdc:	d027      	beq.n	8004d2e <UART_SetConfig+0x336>
 8004cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce2:	d817      	bhi.n	8004d14 <UART_SetConfig+0x31c>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01c      	beq.n	8004d22 <UART_SetConfig+0x32a>
 8004ce8:	e027      	b.n	8004d3a <UART_SetConfig+0x342>
 8004cea:	bf00      	nop
 8004cec:	efff69f3 	.word	0xefff69f3
 8004cf0:	40011000 	.word	0x40011000
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40004400 	.word	0x40004400
 8004cfc:	40004800 	.word	0x40004800
 8004d00:	40004c00 	.word	0x40004c00
 8004d04:	40005000 	.word	0x40005000
 8004d08:	40011400 	.word	0x40011400
 8004d0c:	40007800 	.word	0x40007800
 8004d10:	40007c00 	.word	0x40007c00
 8004d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d18:	d006      	beq.n	8004d28 <UART_SetConfig+0x330>
 8004d1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d1e:	d009      	beq.n	8004d34 <UART_SetConfig+0x33c>
 8004d20:	e00b      	b.n	8004d3a <UART_SetConfig+0x342>
 8004d22:	2300      	movs	r3, #0
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e00e      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	77fb      	strb	r3, [r7, #31]
 8004d2c:	e00b      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004d2e:	2304      	movs	r3, #4
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e008      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004d34:	2308      	movs	r3, #8
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e005      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	bf00      	nop
 8004d40:	e001      	b.n	8004d46 <UART_SetConfig+0x34e>
 8004d42:	2310      	movs	r3, #16
 8004d44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d4e:	d17c      	bne.n	8004e4a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004d50:	7ffb      	ldrb	r3, [r7, #31]
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d859      	bhi.n	8004e0a <UART_SetConfig+0x412>
 8004d56:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0x364>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004d81 	.word	0x08004d81
 8004d60:	08004d9f 	.word	0x08004d9f
 8004d64:	08004dbd 	.word	0x08004dbd
 8004d68:	08004e0b 	.word	0x08004e0b
 8004d6c:	08004dd5 	.word	0x08004dd5
 8004d70:	08004e0b 	.word	0x08004e0b
 8004d74:	08004e0b 	.word	0x08004e0b
 8004d78:	08004e0b 	.word	0x08004e0b
 8004d7c:	08004df3 	.word	0x08004df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004d80:	f7fe fe8a 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8004d84:	4603      	mov	r3, r0
 8004d86:	005a      	lsls	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	085b      	lsrs	r3, r3, #1
 8004d8e:	441a      	add	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	61bb      	str	r3, [r7, #24]
        break;
 8004d9c:	e038      	b.n	8004e10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004d9e:	f7fe fe8f 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8004da2:	4603      	mov	r3, r0
 8004da4:	005a      	lsls	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	441a      	add	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	61bb      	str	r3, [r7, #24]
        break;
 8004dba:	e029      	b.n	8004e10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	085a      	lsrs	r2, r3, #1
 8004dc2:	4b5d      	ldr	r3, [pc, #372]	; (8004f38 <UART_SetConfig+0x540>)
 8004dc4:	4413      	add	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	6852      	ldr	r2, [r2, #4]
 8004dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	61bb      	str	r3, [r7, #24]
        break;
 8004dd2:	e01d      	b.n	8004e10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004dd4:	f7fe fd7c 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	005a      	lsls	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	085b      	lsrs	r3, r3, #1
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	61bb      	str	r3, [r7, #24]
        break;
 8004df0:	e00e      	b.n	8004e10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	61bb      	str	r3, [r7, #24]
        break;
 8004e08:	e002      	b.n	8004e10 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	75fb      	strb	r3, [r7, #23]
        break;
 8004e0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b0f      	cmp	r3, #15
 8004e14:	d916      	bls.n	8004e44 <UART_SetConfig+0x44c>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1c:	d212      	bcs.n	8004e44 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f023 030f 	bic.w	r3, r3, #15
 8004e26:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	085b      	lsrs	r3, r3, #1
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	89fb      	ldrh	r3, [r7, #14]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	89fa      	ldrh	r2, [r7, #14]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	e06e      	b.n	8004f22 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	75fb      	strb	r3, [r7, #23]
 8004e48:	e06b      	b.n	8004f22 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004e4a:	7ffb      	ldrb	r3, [r7, #31]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d857      	bhi.n	8004f00 <UART_SetConfig+0x508>
 8004e50:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x460>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e99 	.word	0x08004e99
 8004e60:	08004eb5 	.word	0x08004eb5
 8004e64:	08004f01 	.word	0x08004f01
 8004e68:	08004ecd 	.word	0x08004ecd
 8004e6c:	08004f01 	.word	0x08004f01
 8004e70:	08004f01 	.word	0x08004f01
 8004e74:	08004f01 	.word	0x08004f01
 8004e78:	08004ee9 	.word	0x08004ee9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004e7c:	f7fe fe0c 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	085b      	lsrs	r3, r3, #1
 8004e88:	441a      	add	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	61bb      	str	r3, [r7, #24]
        break;
 8004e96:	e036      	b.n	8004f06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004e98:	f7fe fe12 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	085b      	lsrs	r3, r3, #1
 8004ea4:	441a      	add	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	61bb      	str	r3, [r7, #24]
        break;
 8004eb2:	e028      	b.n	8004f06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	085a      	lsrs	r2, r3, #1
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <UART_SetConfig+0x544>)
 8004ebc:	4413      	add	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6852      	ldr	r2, [r2, #4]
 8004ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	61bb      	str	r3, [r7, #24]
        break;
 8004eca:	e01c      	b.n	8004f06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004ecc:	f7fe fd00 	bl	80038d0 <HAL_RCC_GetSysClockFreq>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	61bb      	str	r3, [r7, #24]
        break;
 8004ee6:	e00e      	b.n	8004f06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	61bb      	str	r3, [r7, #24]
        break;
 8004efe:	e002      	b.n	8004f06 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
        break;
 8004f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b0f      	cmp	r3, #15
 8004f0a:	d908      	bls.n	8004f1e <UART_SetConfig+0x526>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f12:	d204      	bcs.n	8004f1e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	60da      	str	r2, [r3, #12]
 8004f1c:	e001      	b.n	8004f22 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	01e84800 	.word	0x01e84800
 8004f3c:	00f42400 	.word	0x00f42400

08004f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	430a      	orrs	r2, r1
 8005012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01a      	beq.n	8005056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800503e:	d10a      	bne.n	8005056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005092:	f7fb fac7 	bl	8000624 <HAL_GetTick>
 8005096:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d10e      	bne.n	80050c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f814 	bl	80050e2 <UART_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e00a      	b.n	80050da <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	60f8      	str	r0, [r7, #12]
 80050ea:	60b9      	str	r1, [r7, #8]
 80050ec:	603b      	str	r3, [r7, #0]
 80050ee:	4613      	mov	r3, r2
 80050f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f2:	e02a      	b.n	800514a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fa:	d026      	beq.n	800514a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fc:	f7fb fa92 	bl	8000624 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	429a      	cmp	r2, r3
 800510a:	d302      	bcc.n	8005112 <UART_WaitOnFlagUntilTimeout+0x30>
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11b      	bne.n	800514a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005120:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e00f      	b.n	800516a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4013      	ands	r3, r2
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	429a      	cmp	r2, r3
 8005158:	bf0c      	ite	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	2300      	movne	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	429a      	cmp	r2, r3
 8005166:	d0c5      	beq.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005174:	b084      	sub	sp, #16
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	f107 001c 	add.w	r0, r7, #28
 8005182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	2b01      	cmp	r3, #1
 800518a:	d120      	bne.n	80051ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	4b20      	ldr	r3, [pc, #128]	; (8005220 <USB_CoreInit+0xac>)
 800519e:	4013      	ands	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80051b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d105      	bne.n	80051c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 fa46 	bl	8006654 <USB_CoreReset>
 80051c8:	4603      	mov	r3, r0
 80051ca:	73fb      	strb	r3, [r7, #15]
 80051cc:	e010      	b.n	80051f0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f001 fa3a 	bl	8006654 <USB_CoreReset>
 80051e0:	4603      	mov	r3, r0
 80051e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10b      	bne.n	800520e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f043 0206 	orr.w	r2, r3, #6
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800520e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800521a:	b004      	add	sp, #16
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	ffbdffbf 	.word	0xffbdffbf

08005224 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	4613      	mov	r3, r2
 8005230:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USB_OTG_SPEED_FULL)
 8005232:	79fb      	ldrb	r3, [r7, #7]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d165      	bne.n	8005304 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4a41      	ldr	r2, [pc, #260]	; (8005340 <USB_SetTurnaroundTime+0x11c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d906      	bls.n	800524e <USB_SetTurnaroundTime+0x2a>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	4a40      	ldr	r2, [pc, #256]	; (8005344 <USB_SetTurnaroundTime+0x120>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d802      	bhi.n	800524e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005248:	230f      	movs	r3, #15
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e062      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4a3c      	ldr	r2, [pc, #240]	; (8005344 <USB_SetTurnaroundTime+0x120>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d906      	bls.n	8005264 <USB_SetTurnaroundTime+0x40>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4a3b      	ldr	r2, [pc, #236]	; (8005348 <USB_SetTurnaroundTime+0x124>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d802      	bhi.n	8005264 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800525e:	230e      	movs	r3, #14
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	e057      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a38      	ldr	r2, [pc, #224]	; (8005348 <USB_SetTurnaroundTime+0x124>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d906      	bls.n	800527a <USB_SetTurnaroundTime+0x56>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4a37      	ldr	r2, [pc, #220]	; (800534c <USB_SetTurnaroundTime+0x128>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d802      	bhi.n	800527a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005274:	230d      	movs	r3, #13
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e04c      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4a33      	ldr	r2, [pc, #204]	; (800534c <USB_SetTurnaroundTime+0x128>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d906      	bls.n	8005290 <USB_SetTurnaroundTime+0x6c>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4a32      	ldr	r2, [pc, #200]	; (8005350 <USB_SetTurnaroundTime+0x12c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d802      	bhi.n	8005290 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800528a:	230c      	movs	r3, #12
 800528c:	617b      	str	r3, [r7, #20]
 800528e:	e041      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4a2f      	ldr	r2, [pc, #188]	; (8005350 <USB_SetTurnaroundTime+0x12c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d906      	bls.n	80052a6 <USB_SetTurnaroundTime+0x82>
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <USB_SetTurnaroundTime+0x130>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d802      	bhi.n	80052a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80052a0:	230b      	movs	r3, #11
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e036      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4a2a      	ldr	r2, [pc, #168]	; (8005354 <USB_SetTurnaroundTime+0x130>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d906      	bls.n	80052bc <USB_SetTurnaroundTime+0x98>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4a29      	ldr	r2, [pc, #164]	; (8005358 <USB_SetTurnaroundTime+0x134>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d802      	bhi.n	80052bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80052b6:	230a      	movs	r3, #10
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	e02b      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	4a26      	ldr	r2, [pc, #152]	; (8005358 <USB_SetTurnaroundTime+0x134>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d906      	bls.n	80052d2 <USB_SetTurnaroundTime+0xae>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4a25      	ldr	r2, [pc, #148]	; (800535c <USB_SetTurnaroundTime+0x138>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d802      	bhi.n	80052d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80052cc:	2309      	movs	r3, #9
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	e020      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	4a21      	ldr	r2, [pc, #132]	; (800535c <USB_SetTurnaroundTime+0x138>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d906      	bls.n	80052e8 <USB_SetTurnaroundTime+0xc4>
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4a20      	ldr	r2, [pc, #128]	; (8005360 <USB_SetTurnaroundTime+0x13c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d802      	bhi.n	80052e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80052e2:	2308      	movs	r3, #8
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e015      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <USB_SetTurnaroundTime+0x13c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d906      	bls.n	80052fe <USB_SetTurnaroundTime+0xda>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <USB_SetTurnaroundTime+0x140>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d802      	bhi.n	80052fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80052f8:	2307      	movs	r3, #7
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	e00a      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80052fe:	2306      	movs	r3, #6
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e007      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USB_OTG_SPEED_HIGH)
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800530a:	2309      	movs	r3, #9
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e001      	b.n	8005314 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005310:	2309      	movs	r3, #9
 8005312:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800532c:	431a      	orrs	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	00d8acbf 	.word	0x00d8acbf
 8005344:	00e4e1bf 	.word	0x00e4e1bf
 8005348:	00f423ff 	.word	0x00f423ff
 800534c:	0106737f 	.word	0x0106737f
 8005350:	011a499f 	.word	0x011a499f
 8005354:	01312cff 	.word	0x01312cff
 8005358:	014ca43f 	.word	0x014ca43f
 800535c:	016e35ff 	.word	0x016e35ff
 8005360:	01a6ab1f 	.word	0x01a6ab1f
 8005364:	01e847ff 	.word	0x01e847ff

08005368 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f043 0201 	orr.w	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d106      	bne.n	80053d8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	e00b      	b.n	80053f0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	e001      	b.n	80053f0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e003      	b.n	80053f8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80053f0:	2032      	movs	r0, #50	; 0x32
 80053f2:	f7fb f923 	bl	800063c <HAL_Delay>

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005400:	b084      	sub	sp, #16
 8005402:	b580      	push	{r7, lr}
 8005404:	b086      	sub	sp, #24
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
 800540a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800540e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800541a:	2300      	movs	r3, #0
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	e009      	b.n	8005434 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3340      	adds	r3, #64	; 0x40
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4413      	add	r3, r2
 800542a:	2200      	movs	r2, #0
 800542c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	3301      	adds	r3, #1
 8005432:	613b      	str	r3, [r7, #16]
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b0e      	cmp	r3, #14
 8005438:	d9f2      	bls.n	8005420 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800543a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d112      	bne.n	8005466 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	e005      	b.n	8005472 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005478:	461a      	mov	r2, r3
 800547a:	2300      	movs	r3, #0
 800547c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005484:	4619      	mov	r1, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548c:	461a      	mov	r2, r3
 800548e:	680b      	ldr	r3, [r1, #0]
 8005490:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	2b01      	cmp	r3, #1
 8005496:	d10c      	bne.n	80054b2 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8005498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549a:	2b00      	cmp	r3, #0
 800549c:	d104      	bne.n	80054a8 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800549e:	2100      	movs	r1, #0
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f971 	bl	8005788 <USB_SetDevSpeed>
 80054a6:	e018      	b.n	80054da <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054a8:	2101      	movs	r1, #1
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f96c 	bl	8005788 <USB_SetDevSpeed>
 80054b0:	e013      	b.n	80054da <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d10c      	bne.n	80054d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d104      	bne.n	80054c8 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054be:	2100      	movs	r1, #0
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f961 	bl	8005788 <USB_SetDevSpeed>
 80054c6:	e008      	b.n	80054da <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054c8:	2101      	movs	r1, #1
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f95c 	bl	8005788 <USB_SetDevSpeed>
 80054d0:	e003      	b.n	80054da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054d2:	2103      	movs	r1, #3
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f957 	bl	8005788 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054da:	2110      	movs	r1, #16
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f90b 	bl	80056f8 <USB_FlushTxFifo>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f929 	bl	8005744 <USB_FlushRxFifo>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005502:	461a      	mov	r2, r3
 8005504:	2300      	movs	r3, #0
 8005506:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	461a      	mov	r2, r3
 8005510:	2300      	movs	r3, #0
 8005512:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551a:	461a      	mov	r2, r3
 800551c:	2300      	movs	r3, #0
 800551e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	e043      	b.n	80055ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005538:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800553c:	d118      	bne.n	8005570 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005550:	461a      	mov	r2, r3
 8005552:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	e013      	b.n	8005582 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	461a      	mov	r2, r3
 8005568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	e008      	b.n	8005582 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	461a      	mov	r2, r3
 800557e:	2300      	movs	r3, #0
 8005580:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	461a      	mov	r2, r3
 80055a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	3301      	adds	r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d3b7      	bcc.n	8005526 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b6:	2300      	movs	r3, #0
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	e043      	b.n	8005644 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055d2:	d118      	bne.n	8005606 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10a      	bne.n	80055f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	461a      	mov	r2, r3
 80055e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e013      	b.n	8005618 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fc:	461a      	mov	r2, r3
 80055fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	e008      	b.n	8005618 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	461a      	mov	r2, r3
 8005614:	2300      	movs	r3, #0
 8005616:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005624:	461a      	mov	r2, r3
 8005626:	2300      	movs	r3, #0
 8005628:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005636:	461a      	mov	r2, r3
 8005638:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800563c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	3301      	adds	r3, #1
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	429a      	cmp	r2, r3
 800564a:	d3b7      	bcc.n	80055bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800565a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800565e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	2b01      	cmp	r3, #1
 8005664:	d110      	bne.n	8005688 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	461a      	mov	r2, r3
 800566e:	4b1e      	ldr	r3, [pc, #120]	; (80056e8 <USB_DevInit+0x2e8>)
 8005670:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	4619      	mov	r1, r3
 8005682:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <USB_DevInit+0x2ec>)
 8005684:	4313      	orrs	r3, r2
 8005686:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005694:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f043 0210 	orr.w	r2, r3, #16
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	699a      	ldr	r2, [r3, #24]
 80056ac:	4b10      	ldr	r3, [pc, #64]	; (80056f0 <USB_DevInit+0x2f0>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d005      	beq.n	80056c6 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f043 0208 	orr.w	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d105      	bne.n	80056d8 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	4b08      	ldr	r3, [pc, #32]	; (80056f4 <USB_DevInit+0x2f4>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056e4:	b004      	add	sp, #16
 80056e6:	4770      	bx	lr
 80056e8:	00800100 	.word	0x00800100
 80056ec:	00010003 	.word	0x00010003
 80056f0:	803c3800 	.word	0x803c3800
 80056f4:	40000004 	.word	0x40000004

080056f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	019b      	lsls	r3, r3, #6
 800570a:	f043 0220 	orr.w	r2, r3, #32
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4a09      	ldr	r2, [pc, #36]	; (8005740 <USB_FlushTxFifo+0x48>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e006      	b.n	8005732 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b20      	cmp	r3, #32
 800572e:	d0f0      	beq.n	8005712 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	00030d40 	.word	0x00030d40

08005744 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2210      	movs	r2, #16
 8005754:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3301      	adds	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <USB_FlushRxFifo+0x40>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e006      	b.n	8005776 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b10      	cmp	r3, #16
 8005772:	d0f0      	beq.n	8005756 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	00030d40 	.word	0x00030d40

08005788 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057a8:	4313      	orrs	r3, r2
 80057aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b087      	sub	sp, #28
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0306 	and.w	r3, r3, #6
 80057d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d102      	bne.n	80057e0 <USB_GetDevSpeed+0x26>
  {
    speed = USB_OTG_SPEED_HIGH;
 80057da:	2300      	movs	r3, #0
 80057dc:	75fb      	strb	r3, [r7, #23]
 80057de:	e00a      	b.n	80057f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d002      	beq.n	80057ec <USB_GetDevSpeed+0x32>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b06      	cmp	r3, #6
 80057ea:	d102      	bne.n	80057f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USB_OTG_SPEED_FULL;
 80057ec:	2303      	movs	r3, #3
 80057ee:	75fb      	strb	r3, [r7, #23]
 80057f0:	e001      	b.n	80057f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d139      	bne.n	8005894 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	2101      	movs	r1, #1
 8005832:	fa01 f303 	lsl.w	r3, r1, r3
 8005836:	b29b      	uxth	r3, r3
 8005838:	68f9      	ldr	r1, [r7, #12]
 800583a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800583e:	4313      	orrs	r3, r2
 8005840:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d153      	bne.n	8005900 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	78db      	ldrb	r3, [r3, #3]
 8005872:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005874:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	059b      	lsls	r3, r3, #22
 800587a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800587c:	431a      	orrs	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	0159      	lsls	r1, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	440b      	add	r3, r1
 8005886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588a:	4619      	mov	r1, r3
 800588c:	4b20      	ldr	r3, [pc, #128]	; (8005910 <USB_ActivateEndpoint+0x10c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	600b      	str	r3, [r1, #0]
 8005892:	e035      	b.n	8005900 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	2101      	movs	r1, #1
 80058a6:	fa01 f303 	lsl.w	r3, r1, r3
 80058aa:	041b      	lsls	r3, r3, #16
 80058ac:	68f9      	ldr	r1, [r7, #12]
 80058ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b2:	4313      	orrs	r3, r2
 80058b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d119      	bne.n	8005900 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	78db      	ldrb	r3, [r3, #3]
 80058e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80058e8:	430b      	orrs	r3, r1
 80058ea:	431a      	orrs	r2, r3
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	0159      	lsls	r1, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	440b      	add	r3, r1
 80058f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f8:	4619      	mov	r1, r3
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <USB_ActivateEndpoint+0x10c>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	10008000 	.word	0x10008000

08005914 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d135      	bne.n	800599c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	2101      	movs	r1, #1
 8005942:	fa01 f303 	lsl.w	r3, r1, r3
 8005946:	b29b      	uxth	r3, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	68f9      	ldr	r1, [r7, #12]
 800594c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005950:	4013      	ands	r3, r2
 8005952:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	69da      	ldr	r2, [r3, #28]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 030f 	and.w	r3, r3, #15
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f303 	lsl.w	r3, r1, r3
 800596a:	b29b      	uxth	r3, r3
 800596c:	43db      	mvns	r3, r3
 800596e:	68f9      	ldr	r1, [r7, #12]
 8005970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005974:	4013      	ands	r3, r2
 8005976:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	0159      	lsls	r1, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	440b      	add	r3, r1
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	4619      	mov	r1, r3
 8005994:	4b1f      	ldr	r3, [pc, #124]	; (8005a14 <USB_DeactivateEndpoint+0x100>)
 8005996:	4013      	ands	r3, r2
 8005998:	600b      	str	r3, [r1, #0]
 800599a:	e034      	b.n	8005a06 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 030f 	and.w	r3, r3, #15
 80059ac:	2101      	movs	r1, #1
 80059ae:	fa01 f303 	lsl.w	r3, r1, r3
 80059b2:	041b      	lsls	r3, r3, #16
 80059b4:	43db      	mvns	r3, r3
 80059b6:	68f9      	ldr	r1, [r7, #12]
 80059b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059bc:	4013      	ands	r3, r2
 80059be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	041b      	lsls	r3, r3, #16
 80059d8:	43db      	mvns	r3, r3
 80059da:	68f9      	ldr	r1, [r7, #12]
 80059dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e0:	4013      	ands	r3, r2
 80059e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	0159      	lsls	r1, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	440b      	add	r3, r1
 80059fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fe:	4619      	mov	r1, r3
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <USB_DeactivateEndpoint+0x104>)
 8005a02:	4013      	ands	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	ec337800 	.word	0xec337800
 8005a18:	eff37800 	.word	0xeff37800

08005a1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	; 0x28
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	4613      	mov	r3, r2
 8005a28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	f040 812d 	bne.w	8005c98 <USB_EPStartXfer+0x27c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d132      	bne.n	8005aac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	0159      	lsls	r1, r3, #5
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	4619      	mov	r1, r3
 8005a62:	4b8a      	ldr	r3, [pc, #552]	; (8005c8c <USB_EPStartXfer+0x270>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	0159      	lsls	r1, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4b7a      	ldr	r3, [pc, #488]	; (8005c90 <USB_EPStartXfer+0x274>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	610b      	str	r3, [r1, #16]
 8005aaa:	e074      	b.n	8005b96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	0159      	lsls	r1, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	440b      	add	r3, r1
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4b71      	ldr	r3, [pc, #452]	; (8005c90 <USB_EPStartXfer+0x274>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	0159      	lsls	r1, r3, #5
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	440b      	add	r3, r1
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4b68      	ldr	r3, [pc, #416]	; (8005c8c <USB_EPStartXfer+0x270>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	6959      	ldr	r1, [r3, #20]
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	440b      	add	r3, r1
 8005b08:	1e59      	subs	r1, r3, #1
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b12:	04d9      	lsls	r1, r3, #19
 8005b14:	4b5f      	ldr	r3, [pc, #380]	; (8005c94 <USB_EPStartXfer+0x278>)
 8005b16:	400b      	ands	r3, r1
 8005b18:	69b9      	ldr	r1, [r7, #24]
 8005b1a:	0148      	lsls	r0, r1, #5
 8005b1c:	69f9      	ldr	r1, [r7, #28]
 8005b1e:	4401      	add	r1, r0
 8005b20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b24:	4313      	orrs	r3, r2
 8005b26:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	691a      	ldr	r2, [r3, #16]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b3e:	69b9      	ldr	r1, [r7, #24]
 8005b40:	0148      	lsls	r0, r1, #5
 8005b42:	69f9      	ldr	r1, [r7, #28]
 8005b44:	4401      	add	r1, r0
 8005b46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	78db      	ldrb	r3, [r3, #3]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d11f      	bne.n	8005b96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005b74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	69fa      	ldr	r2, [r7, #28]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d10e      	bne.n	8005bba <USB_EPStartXfer+0x19e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d022      	beq.n	8005bea <USB_EPStartXfer+0x1ce>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	6153      	str	r3, [r2, #20]
 8005bb8:	e017      	b.n	8005bea <USB_EPStartXfer+0x1ce>
      }
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	78db      	ldrb	r3, [r3, #3]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d013      	beq.n	8005bea <USB_EPStartXfer+0x1ce>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00f      	beq.n	8005bea <USB_EPStartXfer+0x1ce>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	2101      	movs	r1, #1
 8005bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005be0:	69f9      	ldr	r1, [r7, #28]
 8005be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be6:	4313      	orrs	r3, r2
 8005be8:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	78db      	ldrb	r3, [r3, #3]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d128      	bne.n	8005c44 <USB_EPStartXfer+0x228>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d110      	bne.n	8005c24 <USB_EPStartXfer+0x208>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e00f      	b.n	8005c44 <USB_EPStartXfer+0x228>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	69fa      	ldr	r2, [r7, #28]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c42:	6013      	str	r3, [r2, #0]
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c62:	6013      	str	r3, [r2, #0]

    if (ep->type == EP_TYPE_ISOC)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	78db      	ldrb	r3, [r3, #3]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	f040 80e1 	bne.w	8005e30 <USB_EPStartXfer+0x414>
    {
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	68d9      	ldr	r1, [r3, #12]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	b298      	uxth	r0, r3
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	4603      	mov	r3, r0
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 fa28 	bl	80060d8 <USB_WritePacket>
 8005c88:	e0d2      	b.n	8005e30 <USB_EPStartXfer+0x414>
 8005c8a:	bf00      	nop
 8005c8c:	e007ffff 	.word	0xe007ffff
 8005c90:	fff80000 	.word	0xfff80000
 8005c94:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	0159      	lsls	r1, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	440b      	add	r3, r1
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	4b61      	ldr	r3, [pc, #388]	; (8005e3c <USB_EPStartXfer+0x420>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	0159      	lsls	r1, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	440b      	add	r3, r1
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4b5a      	ldr	r3, [pc, #360]	; (8005e40 <USB_EPStartXfer+0x424>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d123      	bne.n	8005d2c <USB_EPStartXfer+0x310>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf0:	691a      	ldr	r2, [r3, #16]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cfa:	69b9      	ldr	r1, [r7, #24]
 8005cfc:	0148      	lsls	r0, r1, #5
 8005cfe:	69f9      	ldr	r1, [r7, #28]
 8005d00:	4401      	add	r1, r0
 8005d02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d06:	4313      	orrs	r3, r2
 8005d08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d28:	6113      	str	r3, [r2, #16]
 8005d2a:	e033      	b.n	8005d94 <USB_EPStartXfer+0x378>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	695a      	ldr	r2, [r3, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	4413      	add	r3, r2
 8005d36:	1e5a      	subs	r2, r3, #1
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	8afb      	ldrh	r3, [r7, #22]
 8005d52:	04d9      	lsls	r1, r3, #19
 8005d54:	4b3b      	ldr	r3, [pc, #236]	; (8005e44 <USB_EPStartXfer+0x428>)
 8005d56:	400b      	ands	r3, r1
 8005d58:	69b9      	ldr	r1, [r7, #24]
 8005d5a:	0148      	lsls	r0, r1, #5
 8005d5c:	69f9      	ldr	r1, [r7, #28]
 8005d5e:	4401      	add	r1, r0
 8005d60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d64:	4313      	orrs	r3, r2
 8005d66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	8af9      	ldrh	r1, [r7, #22]
 8005d7c:	fb01 f303 	mul.w	r3, r1, r3
 8005d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	0148      	lsls	r0, r1, #5
 8005d88:	69f9      	ldr	r1, [r7, #28]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d90:	4313      	orrs	r3, r2
 8005d92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d10d      	bne.n	8005db6 <USB_EPStartXfer+0x39a>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <USB_EPStartXfer+0x39a>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	68d9      	ldr	r1, [r3, #12]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	460a      	mov	r2, r1
 8005db4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	78db      	ldrb	r3, [r3, #3]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d128      	bne.n	8005e10 <USB_EPStartXfer+0x3f4>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d110      	bne.n	8005df0 <USB_EPStartXfer+0x3d4>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	e00f      	b.n	8005e10 <USB_EPStartXfer+0x3f4>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	fff80000 	.word	0xfff80000
 8005e40:	e007ffff 	.word	0xe007ffff
 8005e44:	1ff80000 	.word	0x1ff80000

08005e48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	4613      	mov	r3, r2
 8005e54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	785b      	ldrb	r3, [r3, #1]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	f040 80bd 	bne.w	8005fe4 <USB_EP0StartXfer+0x19c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d132      	bne.n	8005ed8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	0159      	lsls	r1, r3, #5
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	440b      	add	r3, r1
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4b90      	ldr	r3, [pc, #576]	; (80060d0 <USB_EP0StartXfer+0x288>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	015a      	lsls	r2, r3, #5
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	0151      	lsls	r1, r2, #5
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	440a      	add	r2, r1
 8005eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	0159      	lsls	r1, r3, #5
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	440b      	add	r3, r1
 8005eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4b80      	ldr	r3, [pc, #512]	; (80060d4 <USB_EP0StartXfer+0x28c>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	610b      	str	r3, [r1, #16]
 8005ed6:	e04e      	b.n	8005f76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	0159      	lsls	r1, r3, #5
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	440b      	add	r3, r1
 8005eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4b77      	ldr	r3, [pc, #476]	; (80060d4 <USB_EP0StartXfer+0x28c>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f06:	691a      	ldr	r2, [r3, #16]
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	0159      	lsls	r1, r3, #5
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	440b      	add	r3, r1
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	4619      	mov	r1, r3
 8005f16:	4b6e      	ldr	r3, [pc, #440]	; (80060d0 <USB_EP0StartXfer+0x288>)
 8005f18:	4013      	ands	r3, r2
 8005f1a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	695a      	ldr	r2, [r3, #20]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d903      	bls.n	8005f30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f66:	6939      	ldr	r1, [r7, #16]
 8005f68:	0148      	lsls	r0, r1, #5
 8005f6a:	6979      	ldr	r1, [r7, #20]
 8005f6c:	4401      	add	r1, r0
 8005f6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f72:	4313      	orrs	r3, r2
 8005f74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f76:	79fb      	ldrb	r3, [r7, #7]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d10e      	bne.n	8005f9a <USB_EP0StartXfer+0x152>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01e      	beq.n	8005fc2 <USB_EP0StartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f90:	461a      	mov	r2, r3
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	6153      	str	r3, [r2, #20]
 8005f98:	e013      	b.n	8005fc2 <USB_EP0StartXfer+0x17a>
      }
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00f      	beq.n	8005fc2 <USB_EP0StartXfer+0x17a>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	2101      	movs	r1, #1
 8005fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb8:	6979      	ldr	r1, [r7, #20]
 8005fba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	634b      	str	r3, [r1, #52]	; 0x34
      }
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e06d      	b.n	80060c0 <USB_EP0StartXfer+0x278>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	0159      	lsls	r1, r3, #5
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	440b      	add	r3, r1
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffe:	4619      	mov	r1, r3
 8006000:	4b34      	ldr	r3, [pc, #208]	; (80060d4 <USB_EP0StartXfer+0x28c>)
 8006002:	4013      	ands	r3, r2
 8006004:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	0159      	lsls	r1, r3, #5
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	440b      	add	r3, r1
 800601c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006020:	4619      	mov	r1, r3
 8006022:	4b2b      	ldr	r3, [pc, #172]	; (80060d0 <USB_EP0StartXfer+0x288>)
 8006024:	4013      	ands	r3, r2
 8006026:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d003      	beq.n	8006038 <USB_EP0StartXfer+0x1f0>
    {
      ep->xfer_len = ep->maxpacket;
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006056:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606e:	6939      	ldr	r1, [r7, #16]
 8006070:	0148      	lsls	r0, r1, #5
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	4401      	add	r1, r0
 8006076:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800607a:	4313      	orrs	r3, r2
 800607c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d10d      	bne.n	80060a0 <USB_EP0StartXfer+0x258>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <USB_EP0StartXfer+0x258>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	68d9      	ldr	r1, [r3, #12]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	460a      	mov	r2, r1
 800609e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	0151      	lsls	r1, r2, #5
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	440a      	add	r2, r1
 80060b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	e007ffff 	.word	0xe007ffff
 80060d4:	fff80000 	.word	0xfff80000

080060d8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060d8:	b480      	push	{r7}
 80060da:	b089      	sub	sp, #36	; 0x24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	4611      	mov	r1, r2
 80060e4:	461a      	mov	r2, r3
 80060e6:	460b      	mov	r3, r1
 80060e8:	71fb      	strb	r3, [r7, #7]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80060f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11a      	bne.n	8006134 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060fe:	88bb      	ldrh	r3, [r7, #4]
 8006100:	3303      	adds	r3, #3
 8006102:	089b      	lsrs	r3, r3, #2
 8006104:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006106:	2300      	movs	r3, #0
 8006108:	61bb      	str	r3, [r7, #24]
 800610a:	e00f      	b.n	800612c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800610c:	79fb      	ldrb	r3, [r7, #7]
 800610e:	031a      	lsls	r2, r3, #12
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4413      	add	r3, r2
 8006114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006118:	461a      	mov	r2, r3
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3304      	adds	r3, #4
 8006124:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	3301      	adds	r3, #1
 800612a:	61bb      	str	r3, [r7, #24]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	429a      	cmp	r2, r3
 8006132:	d3eb      	bcc.n	800610c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3724      	adds	r7, #36	; 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006142:	b480      	push	{r7}
 8006144:	b089      	sub	sp, #36	; 0x24
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	4613      	mov	r3, r2
 800614e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006158:	88fb      	ldrh	r3, [r7, #6]
 800615a:	3303      	adds	r3, #3
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006160:	2300      	movs	r3, #0
 8006162:	61bb      	str	r3, [r7, #24]
 8006164:	e00b      	b.n	800617e <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	601a      	str	r2, [r3, #0]
    pDest++;
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3304      	adds	r3, #4
 8006176:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	3301      	adds	r3, #1
 800617c:	61bb      	str	r3, [r7, #24]
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d3ef      	bcc.n	8006166 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006186:	69fb      	ldr	r3, [r7, #28]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3724      	adds	r7, #36	; 0x24
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d12c      	bne.n	800620a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	db12      	blt.n	80061e8 <USB_EPSetStall+0x54>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00f      	beq.n	80061e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e02b      	b.n	8006262 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	db12      	blt.n	8006242 <USB_EPSetStall+0xae>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00f      	beq.n	8006242 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	440a      	add	r2, r1
 8006238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800623c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006240:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006260:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d128      	bne.n	80062de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	78db      	ldrb	r3, [r3, #3]
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d003      	beq.n	80062bc <USB_EPClearStall+0x4c>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	78db      	ldrb	r3, [r3, #3]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d138      	bne.n	800632e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	e027      	b.n	800632e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	78db      	ldrb	r3, [r3, #3]
 8006302:	2b03      	cmp	r3, #3
 8006304:	d003      	beq.n	800630e <USB_EPClearStall+0x9e>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	78db      	ldrb	r3, [r3, #3]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d10f      	bne.n	800632e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800632c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800635e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006370:	68f9      	ldr	r1, [r7, #12]
 8006372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006376:	4313      	orrs	r3, r2
 8006378:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a2:	f023 0302 	bic.w	r3, r3, #2
 80063a6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80063a8:	2003      	movs	r0, #3
 80063aa:	f7fa f947 	bl	800063c <HAL_Delay>

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d2:	f043 0302 	orr.w	r3, r3, #2
 80063d6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80063d8:	2003      	movs	r0, #3
 80063da:	f7fa f92f 	bl	800063c <HAL_Delay>

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4013      	ands	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006400:	68fb      	ldr	r3, [r7, #12]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800640e:	b480      	push	{r7}
 8006410:	b085      	sub	sp, #20
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	4013      	ands	r3, r2
 8006430:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	0c1b      	lsrs	r3, r3, #16
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	4013      	ands	r3, r2
 8006464:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	b29b      	uxth	r3, r3
}
 800646a:	4618      	mov	r0, r3
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr

08006476 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006476:	b480      	push	{r7}
 8006478:	b085      	sub	sp, #20
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	460b      	mov	r3, r1
 8006480:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	4013      	ands	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80064a4:	68bb      	ldr	r3, [r7, #8]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b087      	sub	sp, #28
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	fa22 f303 	lsr.w	r3, r2, r3
 80064e2:	01db      	lsls	r3, r3, #7
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4013      	ands	r3, r2
 80064fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006500:	68bb      	ldr	r3, [r7, #8]
}
 8006502:	4618      	mov	r0, r3
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	f003 0301 	and.w	r3, r3, #1
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
	...

0800652c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006546:	4619      	mov	r1, r3
 8006548:	4b12      	ldr	r3, [pc, #72]	; (8006594 <USB_ActivateSetup+0x68>)
 800654a:	4013      	ands	r3, r2
 800654c:	600b      	str	r3, [r1, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 0306 	and.w	r3, r3, #6
 800655a:	2b04      	cmp	r3, #4
 800655c:	d109      	bne.n	8006572 <USB_ActivateSetup+0x46>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656c:	f043 0303 	orr.w	r3, r3, #3
 8006570:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	fffff800 	.word	0xfffff800

08006598 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	460b      	mov	r3, r1
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	333c      	adds	r3, #60	; 0x3c
 80065ae:	3304      	adds	r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	4a26      	ldr	r2, [pc, #152]	; (8006650 <USB_EP0_OutStart+0xb8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d90a      	bls.n	80065d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065cc:	d101      	bne.n	80065d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e037      	b.n	8006642 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	461a      	mov	r2, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006600:	f043 0318 	orr.w	r3, r3, #24
 8006604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006614:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006618:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10f      	bne.n	8006640 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006626:	461a      	mov	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800663e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	4f54300a 	.word	0x4f54300a

08006654 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <USB_CoreReset+0x64>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d901      	bls.n	8006672 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e01b      	b.n	80066aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	daf2      	bge.n	8006660 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f043 0201 	orr.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3301      	adds	r3, #1
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a09      	ldr	r2, [pc, #36]	; (80066b8 <USB_CoreReset+0x64>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d901      	bls.n	800669c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e006      	b.n	80066aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d0f0      	beq.n	800668a <USB_CoreReset+0x36>

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	00030d40 	.word	0x00030d40

080066bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	7c1b      	ldrb	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d115      	bne.n	8006700 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80066d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d8:	2202      	movs	r2, #2
 80066da:	2181      	movs	r1, #129	; 0x81
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f004 fdcc 	bl	800b27a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80066e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066ec:	2202      	movs	r2, #2
 80066ee:	2101      	movs	r1, #1
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f004 fdc2 	bl	800b27a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 80066fe:	e012      	b.n	8006726 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006700:	2340      	movs	r3, #64	; 0x40
 8006702:	2202      	movs	r2, #2
 8006704:	2181      	movs	r1, #129	; 0x81
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f004 fdb7 	bl	800b27a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006712:	2340      	movs	r3, #64	; 0x40
 8006714:	2202      	movs	r2, #2
 8006716:	2101      	movs	r1, #1
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f004 fdae 	bl	800b27a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006726:	2308      	movs	r3, #8
 8006728:	2203      	movs	r2, #3
 800672a:	2182      	movs	r1, #130	; 0x82
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f004 fda4 	bl	800b27a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006738:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800673c:	f005 f8b8 	bl	800b8b0 <malloc>
 8006740:	4603      	mov	r3, r0
 8006742:	461a      	mov	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006750:	2b00      	cmp	r3, #0
 8006752:	d102      	bne.n	800675a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006754:	2301      	movs	r3, #1
 8006756:	73fb      	strb	r3, [r7, #15]
 8006758:	e026      	b.n	80067a8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006760:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	7c1b      	ldrb	r3, [r3, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d109      	bne.n	8006798 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800678a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800678e:	2101      	movs	r1, #1
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f004 fe63 	bl	800b45c <USBD_LL_PrepareReceive>
 8006796:	e007      	b.n	80067a8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800679e:	2340      	movs	r3, #64	; 0x40
 80067a0:	2101      	movs	r1, #1
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f004 fe5a 	bl	800b45c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80067c2:	2181      	movs	r1, #129	; 0x81
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f004 fd7e 	bl	800b2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80067d0:	2101      	movs	r1, #1
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f004 fd77 	bl	800b2c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80067e0:	2182      	movs	r1, #130	; 0x82
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f004 fd6f 	bl	800b2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00e      	beq.n	8006816 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006808:	4618      	mov	r0, r3
 800680a:	f005 f859 	bl	800b8c0 <free>
    pdev->pClassData = NULL;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006830:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006846:	2b00      	cmp	r3, #0
 8006848:	d039      	beq.n	80068be <USBD_CDC_Setup+0x9e>
 800684a:	2b20      	cmp	r3, #32
 800684c:	d17c      	bne.n	8006948 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	88db      	ldrh	r3, [r3, #6]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d029      	beq.n	80068aa <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	b25b      	sxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	da11      	bge.n	8006884 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800686c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	88d2      	ldrh	r2, [r2, #6]
 8006872:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006874:	6939      	ldr	r1, [r7, #16]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	88db      	ldrh	r3, [r3, #6]
 800687a:	461a      	mov	r2, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 f9e5 	bl	8007c4c <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006882:	e068      	b.n	8006956 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	785a      	ldrb	r2, [r3, #1]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	88db      	ldrh	r3, [r3, #6]
 8006892:	b2da      	uxtb	r2, r3
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800689a:	6939      	ldr	r1, [r7, #16]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	88db      	ldrh	r3, [r3, #6]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 fa00 	bl	8007ca8 <USBD_CtlPrepareRx>
    break;
 80068a8:	e055      	b.n	8006956 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	7850      	ldrb	r0, [r2, #1]
 80068b6:	2200      	movs	r2, #0
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	4798      	blx	r3
    break;
 80068bc:	e04b      	b.n	8006956 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	2b0a      	cmp	r3, #10
 80068c4:	d017      	beq.n	80068f6 <USBD_CDC_Setup+0xd6>
 80068c6:	2b0b      	cmp	r3, #11
 80068c8:	d029      	beq.n	800691e <USBD_CDC_Setup+0xfe>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d133      	bne.n	8006936 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d107      	bne.n	80068e8 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 80068d8:	f107 030c 	add.w	r3, r7, #12
 80068dc:	2202      	movs	r2, #2
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f9b3 	bl	8007c4c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80068e6:	e02e      	b.n	8006946 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 f943 	bl	8007b76 <USBD_CtlError>
			  ret = USBD_FAIL;
 80068f0:	2302      	movs	r3, #2
 80068f2:	75fb      	strb	r3, [r7, #23]
      break;
 80068f4:	e027      	b.n	8006946 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d107      	bne.n	8006910 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8006900:	f107 030f 	add.w	r3, r7, #15
 8006904:	2201      	movs	r2, #1
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 f99f 	bl	8007c4c <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800690e:	e01a      	b.n	8006946 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 f92f 	bl	8007b76 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006918:	2302      	movs	r3, #2
 800691a:	75fb      	strb	r3, [r7, #23]
      break;
 800691c:	e013      	b.n	8006946 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006924:	2b03      	cmp	r3, #3
 8006926:	d00d      	beq.n	8006944 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 f923 	bl	8007b76 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006930:	2302      	movs	r3, #2
 8006932:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006934:	e006      	b.n	8006944 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 f91c 	bl	8007b76 <USBD_CtlError>
      ret = USBD_FAIL;
 800693e:	2302      	movs	r3, #2
 8006940:	75fb      	strb	r3, [r7, #23]
      break;
 8006942:	e000      	b.n	8006946 <USBD_CDC_Setup+0x126>
      break;
 8006944:	bf00      	nop
    }
    break;
 8006946:	e006      	b.n	8006956 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f001 f913 	bl	8007b76 <USBD_CtlError>
    ret = USBD_FAIL;
 8006950:	2302      	movs	r3, #2
 8006952:	75fb      	strb	r3, [r7, #23]
    break;
 8006954:	bf00      	nop
  }

  return ret;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006972:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800697a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006982:	2b00      	cmp	r3, #0
 8006984:	d03a      	beq.n	80069fc <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	331c      	adds	r3, #28
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d029      	beq.n	80069f0 <USBD_CDC_DataIn+0x90>
 800699c:	78fa      	ldrb	r2, [r7, #3]
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	331c      	adds	r3, #28
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	78f9      	ldrb	r1, [r7, #3]
 80069b0:	68b8      	ldr	r0, [r7, #8]
 80069b2:	460b      	mov	r3, r1
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	1a5b      	subs	r3, r3, r1
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4403      	add	r3, r0
 80069bc:	3344      	adds	r3, #68	; 0x44
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80069c4:	fb03 f301 	mul.w	r3, r3, r1
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d110      	bne.n	80069f0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	440b      	add	r3, r1
 80069dc:	331c      	adds	r3, #28
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80069e2:	78f9      	ldrb	r1, [r7, #3]
 80069e4:	2300      	movs	r3, #0
 80069e6:	2200      	movs	r2, #0
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f004 fd14 	bl	800b416 <USBD_LL_Transmit>
 80069ee:	e003      	b.n	80069f8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f004 fd3f 	bl	800b4a2 <USBD_LL_GetRxDataSize>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00d      	beq.n	8006a52 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4798      	blx	r3

    return USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	e000      	b.n	8006a54 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006a52:	2302      	movs	r3, #2
  }
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a6a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d015      	beq.n	8006aa2 <USBD_CDC_EP0_RxReady+0x46>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006a7c:	2bff      	cmp	r3, #255	; 0xff
 8006a7e:	d010      	beq.n	8006aa2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006a8e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006a96:	b292      	uxth	r2, r2
 8006a98:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	22ff      	movs	r2, #255	; 0xff
 8006a9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2243      	movs	r2, #67	; 0x43
 8006ab8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006aba:	4b03      	ldr	r3, [pc, #12]	; (8006ac8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	2000008c 	.word	0x2000008c

08006acc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2243      	movs	r2, #67	; 0x43
 8006ad8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006ada:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	20000048 	.word	0x20000048

08006aec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2243      	movs	r2, #67	; 0x43
 8006af8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006afa:	4b03      	ldr	r3, [pc, #12]	; (8006b08 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	200000d0 	.word	0x200000d0

08006b0c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	220a      	movs	r2, #10
 8006b18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b1a:	4b03      	ldr	r3, [pc, #12]	; (8006b28 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	20000004 	.word	0x20000004

08006b2c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006b36:	2302      	movs	r3, #2
 8006b38:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b087      	sub	sp, #28
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	4613      	mov	r3, r2
 8006b66:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b6e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b78:	88fa      	ldrh	r2, [r7, #6]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006b9e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006bc4:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01c      	beq.n	8006c0a <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d115      	bne.n	8006c06 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2181      	movs	r1, #129	; 0x81
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f004 fc0a 	bl	800b416 <USBD_LL_Transmit>

      return USBD_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	e002      	b.n	8006c0c <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006c0a:	2302      	movs	r3, #2
  }
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d017      	beq.n	8006c5e <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	7c1b      	ldrb	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d109      	bne.n	8006c4a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c40:	2101      	movs	r1, #1
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f004 fc0a 	bl	800b45c <USBD_LL_PrepareReceive>
 8006c48:	e007      	b.n	8006c5a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	2101      	movs	r1, #1
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f004 fc01 	bl	800b45c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e000      	b.n	8006c60 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006c5e:	2302      	movs	r3, #2
  }
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	e01a      	b.n	8006cb6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	79fa      	ldrb	r2, [r7, #7]
 8006cac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f004 fa7c 	bl	800b1ac <USBD_LL_Init>

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
 8006cc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d006      	beq.n	8006ce0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
 8006cde:	e001      	b.n	8006ce4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b082      	sub	sp, #8
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f004 faa2 	bl	800b244 <USBD_LL_Start>

  return USBD_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00c      	beq.n	8006d54 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	78fa      	ldrb	r2, [r7, #3]
 8006d44:	4611      	mov	r1, r2
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b082      	sub	sp, #8
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	4611      	mov	r1, r2
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
  return USBD_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 feb0 	bl	8007afc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006db8:	f003 031f 	and.w	r3, r3, #31
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d00c      	beq.n	8006dda <USBD_LL_SetupStage+0x56>
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d302      	bcc.n	8006dca <USBD_LL_SetupStage+0x46>
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d010      	beq.n	8006dea <USBD_LL_SetupStage+0x66>
 8006dc8:	e017      	b.n	8006dfa <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa04 	bl	80071e0 <USBD_StdDevReq>
    break;
 8006dd8:	e01a      	b.n	8006e10 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fa66 	bl	80072b4 <USBD_StdItfReq>
    break;
 8006de8:	e012      	b.n	8006e10 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 faa4 	bl	8007340 <USBD_StdEPReq>
    break;
 8006df8:	e00a      	b.n	8006e10 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006e00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f004 fa7b 	bl	800b304 <USBD_LL_StallEP>
    break;
 8006e0e:	bf00      	nop
  }

  return USBD_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b086      	sub	sp, #24
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	460b      	mov	r3, r1
 8006e24:	607a      	str	r2, [r7, #4]
 8006e26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d14b      	bne.n	8006ec6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006e34:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d134      	bne.n	8006eaa <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d919      	bls.n	8006e80 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	1ad2      	subs	r2, r2, r3
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d203      	bcs.n	8006e6e <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	e002      	b.n	8006e74 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 ff33 	bl	8007ce4 <USBD_CtlContinueRx>
 8006e7e:	e038      	b.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d105      	bne.n	8006ea2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 ff30 	bl	8007d08 <USBD_CtlSendStatus>
 8006ea8:	e023      	b.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006eb0:	2b05      	cmp	r3, #5
 8006eb2:	d11e      	bne.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f004 fa20 	bl	800b304 <USBD_LL_StallEP>
 8006ec4:	e015      	b.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d108      	bne.n	8006eee <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	7afa      	ldrb	r2, [r7, #11]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	4798      	blx	r3
 8006eec:	e001      	b.n	8006ef2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e000      	b.n	8006ef4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	460b      	mov	r3, r1
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006f0a:	7afb      	ldrb	r3, [r7, #11]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d17f      	bne.n	8007010 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3314      	adds	r3, #20
 8006f14:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d15c      	bne.n	8006fda <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d915      	bls.n	8006f58 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	1ad2      	subs	r2, r2, r3
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fe9d 	bl	8007c84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2100      	movs	r1, #0
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f004 fa83 	bl	800b45c <USBD_LL_PrepareReceive>
 8006f56:	e04e      	b.n	8006ff6 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	6912      	ldr	r2, [r2, #16]
 8006f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f64:	fb02 f201 	mul.w	r2, r2, r1
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d11c      	bne.n	8006fa8 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d316      	bcc.n	8006fa8 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d20f      	bcs.n	8006fa8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fe79 	bl	8007c84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f004 fa5b 	bl	800b45c <USBD_LL_PrepareReceive>
 8006fa6:	e026      	b.n	8006ff6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006fba:	2b03      	cmp	r3, #3
 8006fbc:	d105      	bne.n	8006fca <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006fca:	2180      	movs	r1, #128	; 0x80
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f004 f999 	bl	800b304 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 feab 	bl	8007d2e <USBD_CtlReceiveStatus>
 8006fd8:	e00d      	b.n	8006ff6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d004      	beq.n	8006fee <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d103      	bne.n	8006ff6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006fee:	2180      	movs	r1, #128	; 0x80
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f004 f987 	bl	800b304 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d11d      	bne.n	800703c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f7ff fe82 	bl	8006d0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800700e:	e015      	b.n	800703c <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00d      	beq.n	8007038 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007022:	2b03      	cmp	r3, #3
 8007024:	d108      	bne.n	8007038 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	7afa      	ldrb	r2, [r7, #11]
 8007030:	4611      	mov	r1, r2
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	4798      	blx	r3
 8007036:	e001      	b.n	800703c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007038:	2302      	movs	r3, #2
 800703a:	e000      	b.n	800703e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3718      	adds	r7, #24
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800704e:	2340      	movs	r3, #64	; 0x40
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f004 f910 	bl	800b27a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2240      	movs	r2, #64	; 0x40
 8007066:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800706a:	2340      	movs	r3, #64	; 0x40
 800706c:	2200      	movs	r2, #0
 800706e:	2180      	movs	r1, #128	; 0x80
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f004 f902 	bl	800b27a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2240      	movs	r2, #64	; 0x40
 8007080:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6852      	ldr	r2, [r2, #4]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	4611      	mov	r1, r2
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
  }

  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	460b      	mov	r3, r1
 80070d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	78fa      	ldrb	r2, [r7, #3]
 80070d8:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2204      	movs	r2, #4
 8007100:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007142:	2b03      	cmp	r3, #3
 8007144:	d10b      	bne.n	800715e <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	460b      	mov	r3, r1
 800718c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b082      	sub	sp, #8
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6852      	ldr	r2, [r2, #4]
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	4611      	mov	r1, r2
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	4798      	blx	r3

  return USBD_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d004      	beq.n	8007204 <USBD_StdDevReq+0x24>
 80071fa:	2b40      	cmp	r3, #64	; 0x40
 80071fc:	d002      	beq.n	8007204 <USBD_StdDevReq+0x24>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d008      	beq.n	8007214 <USBD_StdDevReq+0x34>
 8007202:	e04c      	b.n	800729e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
    break;
 8007212:	e049      	b.n	80072a8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b09      	cmp	r3, #9
 800721a:	d83a      	bhi.n	8007292 <USBD_StdDevReq+0xb2>
 800721c:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <USBD_StdDevReq+0x44>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	08007275 	.word	0x08007275
 8007228:	08007289 	.word	0x08007289
 800722c:	08007293 	.word	0x08007293
 8007230:	0800727f 	.word	0x0800727f
 8007234:	08007293 	.word	0x08007293
 8007238:	08007257 	.word	0x08007257
 800723c:	0800724d 	.word	0x0800724d
 8007240:	08007293 	.word	0x08007293
 8007244:	0800726b 	.word	0x0800726b
 8007248:	08007261 	.word	0x08007261
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f9d2 	bl	80075f8 <USBD_GetDescriptor>
      break;
 8007254:	e022      	b.n	800729c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fae3 	bl	8007824 <USBD_SetAddress>
      break;
 800725e:	e01d      	b.n	800729c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fb20 	bl	80078a8 <USBD_SetConfig>
      break;
 8007268:	e018      	b.n	800729c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fba9 	bl	80079c4 <USBD_GetConfig>
      break;
 8007272:	e013      	b.n	800729c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fbd8 	bl	8007a2c <USBD_GetStatus>
      break;
 800727c:	e00e      	b.n	800729c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fc06 	bl	8007a92 <USBD_SetFeature>
      break;
 8007286:	e009      	b.n	800729c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fc15 	bl	8007aba <USBD_ClrFeature>
      break;
 8007290:	e004      	b.n	800729c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fc6e 	bl	8007b76 <USBD_CtlError>
      break;
 800729a:	bf00      	nop
    }
    break;
 800729c:	e004      	b.n	80072a8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fc68 	bl	8007b76 <USBD_CtlError>
    break;
 80072a6:	bf00      	nop
  }

  return ret;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop

080072b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d003      	beq.n	80072d6 <USBD_StdItfReq+0x22>
 80072ce:	2b40      	cmp	r3, #64	; 0x40
 80072d0:	d001      	beq.n	80072d6 <USBD_StdItfReq+0x22>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d12a      	bne.n	800732c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072dc:	3b01      	subs	r3, #1
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d81d      	bhi.n	800731e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	889b      	ldrh	r3, [r3, #4]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d813      	bhi.n	8007314 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	4798      	blx	r3
 80072fa:	4603      	mov	r3, r0
 80072fc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	88db      	ldrh	r3, [r3, #6]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d110      	bne.n	8007328 <USBD_StdItfReq+0x74>
 8007306:	7bfb      	ldrb	r3, [r7, #15]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10d      	bne.n	8007328 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fcfb 	bl	8007d08 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007312:	e009      	b.n	8007328 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007314:	6839      	ldr	r1, [r7, #0]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fc2d 	bl	8007b76 <USBD_CtlError>
      break;
 800731c:	e004      	b.n	8007328 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fc28 	bl	8007b76 <USBD_CtlError>
      break;
 8007326:	e000      	b.n	800732a <USBD_StdItfReq+0x76>
      break;
 8007328:	bf00      	nop
    }
    break;
 800732a:	e004      	b.n	8007336 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fc21 	bl	8007b76 <USBD_CtlError>
    break;
 8007334:	bf00      	nop
  }

  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	889b      	ldrh	r3, [r3, #4]
 8007352:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800735c:	2b20      	cmp	r3, #32
 800735e:	d004      	beq.n	800736a <USBD_StdEPReq+0x2a>
 8007360:	2b40      	cmp	r3, #64	; 0x40
 8007362:	d002      	beq.n	800736a <USBD_StdEPReq+0x2a>
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <USBD_StdEPReq+0x3a>
 8007368:	e13b      	b.n	80075e2 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
    break;
 8007378:	e138      	b.n	80075ec <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007382:	2b20      	cmp	r3, #32
 8007384:	d10a      	bne.n	800739c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	e128      	b.n	80075ee <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d03e      	beq.n	8007422 <USBD_StdEPReq+0xe2>
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d002      	beq.n	80073ae <USBD_StdEPReq+0x6e>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d070      	beq.n	800748e <USBD_StdEPReq+0x14e>
 80073ac:	e113      	b.n	80075d6 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d002      	beq.n	80073be <USBD_StdEPReq+0x7e>
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d015      	beq.n	80073e8 <USBD_StdEPReq+0xa8>
 80073bc:	e02b      	b.n	8007416 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00c      	beq.n	80073de <USBD_StdEPReq+0x9e>
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	2b80      	cmp	r3, #128	; 0x80
 80073c8:	d009      	beq.n	80073de <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80073ca:	7bbb      	ldrb	r3, [r7, #14]
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f003 ff98 	bl	800b304 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80073d4:	2180      	movs	r1, #128	; 0x80
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f003 ff94 	bl	800b304 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80073dc:	e020      	b.n	8007420 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fbc8 	bl	8007b76 <USBD_CtlError>
        break;
 80073e6:	e01b      	b.n	8007420 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	885b      	ldrh	r3, [r3, #2]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10e      	bne.n	800740e <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00b      	beq.n	800740e <USBD_StdEPReq+0xce>
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	2b80      	cmp	r3, #128	; 0x80
 80073fa:	d008      	beq.n	800740e <USBD_StdEPReq+0xce>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	88db      	ldrh	r3, [r3, #6]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f003 ff7b 	bl	800b304 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fc7a 	bl	8007d08 <USBD_CtlSendStatus>

        break;
 8007414:	e004      	b.n	8007420 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fbac 	bl	8007b76 <USBD_CtlError>
        break;
 800741e:	bf00      	nop
      }
      break;
 8007420:	e0de      	b.n	80075e0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007428:	2b02      	cmp	r3, #2
 800742a:	d002      	beq.n	8007432 <USBD_StdEPReq+0xf2>
 800742c:	2b03      	cmp	r3, #3
 800742e:	d015      	beq.n	800745c <USBD_StdEPReq+0x11c>
 8007430:	e026      	b.n	8007480 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00c      	beq.n	8007452 <USBD_StdEPReq+0x112>
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b80      	cmp	r3, #128	; 0x80
 800743c:	d009      	beq.n	8007452 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f003 ff5e 	bl	800b304 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007448:	2180      	movs	r1, #128	; 0x80
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f003 ff5a 	bl	800b304 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007450:	e01c      	b.n	800748c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fb8e 	bl	8007b76 <USBD_CtlError>
        break;
 800745a:	e017      	b.n	800748c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	885b      	ldrh	r3, [r3, #2]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d112      	bne.n	800748a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800746a:	2b00      	cmp	r3, #0
 800746c:	d004      	beq.n	8007478 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f003 ff65 	bl	800b342 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fc45 	bl	8007d08 <USBD_CtlSendStatus>
        }
        break;
 800747e:	e004      	b.n	800748a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fb77 	bl	8007b76 <USBD_CtlError>
        break;
 8007488:	e000      	b.n	800748c <USBD_StdEPReq+0x14c>
        break;
 800748a:	bf00      	nop
      }
      break;
 800748c:	e0a8      	b.n	80075e0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007494:	2b02      	cmp	r3, #2
 8007496:	d002      	beq.n	800749e <USBD_StdEPReq+0x15e>
 8007498:	2b03      	cmp	r3, #3
 800749a:	d031      	beq.n	8007500 <USBD_StdEPReq+0x1c0>
 800749c:	e095      	b.n	80075ca <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d007      	beq.n	80074b4 <USBD_StdEPReq+0x174>
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b80      	cmp	r3, #128	; 0x80
 80074a8:	d004      	beq.n	80074b4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fb62 	bl	8007b76 <USBD_CtlError>
          break;
 80074b2:	e08f      	b.n	80075d4 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80074b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da0b      	bge.n	80074d4 <USBD_StdEPReq+0x194>
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	3310      	adds	r3, #16
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	4413      	add	r3, r2
 80074d0:	3304      	adds	r3, #4
 80074d2:	e00a      	b.n	80074ea <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	4413      	add	r3, r2
 80074ea:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2202      	movs	r2, #2
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fba7 	bl	8007c4c <USBD_CtlSendData>
          break;
 80074fe:	e069      	b.n	80075d4 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007504:	2b00      	cmp	r3, #0
 8007506:	da11      	bge.n	800752c <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	f003 020f 	and.w	r2, r3, #15
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4613      	mov	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	440b      	add	r3, r1
 800751a:	3318      	adds	r3, #24
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d117      	bne.n	8007552 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007522:	6839      	ldr	r1, [r7, #0]
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fb26 	bl	8007b76 <USBD_CtlError>
            break;
 800752a:	e053      	b.n	80075d4 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	f003 020f 	and.w	r2, r3, #15
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d104      	bne.n	8007552 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fb13 	bl	8007b76 <USBD_CtlError>
            break;
 8007550:	e040      	b.n	80075d4 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007556:	2b00      	cmp	r3, #0
 8007558:	da0b      	bge.n	8007572 <USBD_StdEPReq+0x232>
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	3310      	adds	r3, #16
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	4413      	add	r3, r2
 800756e:	3304      	adds	r3, #4
 8007570:	e00a      	b.n	8007588 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800758a:	7bbb      	ldrb	r3, [r7, #14]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <USBD_StdEPReq+0x256>
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2b80      	cmp	r3, #128	; 0x80
 8007594:	d103      	bne.n	800759e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e00e      	b.n	80075bc <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f003 feec 	bl	800b380 <USBD_LL_IsStallEP>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	2201      	movs	r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e002      	b.n	80075bc <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2202      	movs	r2, #2
 80075c0:	4619      	mov	r1, r3
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fb42 	bl	8007c4c <USBD_CtlSendData>
          break;
 80075c8:	e004      	b.n	80075d4 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fad2 	bl	8007b76 <USBD_CtlError>
        break;
 80075d2:	bf00      	nop
      }
      break;
 80075d4:	e004      	b.n	80075e0 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 facc 	bl	8007b76 <USBD_CtlError>
      break;
 80075de:	bf00      	nop
    }
    break;
 80075e0:	e004      	b.n	80075ec <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fac6 	bl	8007b76 <USBD_CtlError>
    break;
 80075ea:	bf00      	nop
  }

  return ret;
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	885b      	ldrh	r3, [r3, #2]
 8007606:	0a1b      	lsrs	r3, r3, #8
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	2b0e      	cmp	r3, #14
 800760e:	f200 80e5 	bhi.w	80077dc <USBD_GetDescriptor+0x1e4>
 8007612:	a201      	add	r2, pc, #4	; (adr r2, 8007618 <USBD_GetDescriptor+0x20>)
 8007614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007618:	0800766d 	.word	0x0800766d
 800761c:	08007685 	.word	0x08007685
 8007620:	080076c5 	.word	0x080076c5
 8007624:	080077dd 	.word	0x080077dd
 8007628:	080077dd 	.word	0x080077dd
 800762c:	08007789 	.word	0x08007789
 8007630:	080077af 	.word	0x080077af
 8007634:	080077dd 	.word	0x080077dd
 8007638:	080077dd 	.word	0x080077dd
 800763c:	080077dd 	.word	0x080077dd
 8007640:	080077dd 	.word	0x080077dd
 8007644:	080077dd 	.word	0x080077dd
 8007648:	080077dd 	.word	0x080077dd
 800764c:	080077dd 	.word	0x080077dd
 8007650:	08007655 	.word	0x08007655
  {
#if (USBD_LPM_ENABLED == 1U)
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7c12      	ldrb	r2, [r2, #16]
 8007660:	f107 010a 	add.w	r1, r7, #10
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	60f8      	str	r0, [r7, #12]
    break;
 800766a:	e0bc      	b.n	80077e6 <USBD_GetDescriptor+0x1ee>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	7c12      	ldrb	r2, [r2, #16]
 8007678:	f107 010a 	add.w	r1, r7, #10
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
 8007680:	60f8      	str	r0, [r7, #12]
    break;
 8007682:	e0b0      	b.n	80077e6 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	7c1b      	ldrb	r3, [r3, #16]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10d      	bne.n	80076a8 <USBD_GetDescriptor+0xb0>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	f107 020a 	add.w	r2, r7, #10
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	3301      	adds	r3, #1
 80076a2:	2202      	movs	r2, #2
 80076a4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80076a6:	e09e      	b.n	80077e6 <USBD_GetDescriptor+0x1ee>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	f107 020a 	add.w	r2, r7, #10
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
 80076b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3301      	adds	r3, #1
 80076be:	2202      	movs	r2, #2
 80076c0:	701a      	strb	r2, [r3, #0]
    break;
 80076c2:	e090      	b.n	80077e6 <USBD_GetDescriptor+0x1ee>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	885b      	ldrh	r3, [r3, #2]
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b05      	cmp	r3, #5
 80076cc:	d856      	bhi.n	800777c <USBD_GetDescriptor+0x184>
 80076ce:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <USBD_GetDescriptor+0xdc>)
 80076d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d4:	080076ed 	.word	0x080076ed
 80076d8:	08007705 	.word	0x08007705
 80076dc:	0800771d 	.word	0x0800771d
 80076e0:	08007735 	.word	0x08007735
 80076e4:	0800774d 	.word	0x0800774d
 80076e8:	08007765 	.word	0x08007765
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	7c12      	ldrb	r2, [r2, #16]
 80076f8:	f107 010a 	add.w	r1, r7, #10
 80076fc:	4610      	mov	r0, r2
 80076fe:	4798      	blx	r3
 8007700:	60f8      	str	r0, [r7, #12]
      break;
 8007702:	e040      	b.n	8007786 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	7c12      	ldrb	r2, [r2, #16]
 8007710:	f107 010a 	add.w	r1, r7, #10
 8007714:	4610      	mov	r0, r2
 8007716:	4798      	blx	r3
 8007718:	60f8      	str	r0, [r7, #12]
      break;
 800771a:	e034      	b.n	8007786 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	7c12      	ldrb	r2, [r2, #16]
 8007728:	f107 010a 	add.w	r1, r7, #10
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
 8007730:	60f8      	str	r0, [r7, #12]
      break;
 8007732:	e028      	b.n	8007786 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	7c12      	ldrb	r2, [r2, #16]
 8007740:	f107 010a 	add.w	r1, r7, #10
 8007744:	4610      	mov	r0, r2
 8007746:	4798      	blx	r3
 8007748:	60f8      	str	r0, [r7, #12]
      break;
 800774a:	e01c      	b.n	8007786 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	7c12      	ldrb	r2, [r2, #16]
 8007758:	f107 010a 	add.w	r1, r7, #10
 800775c:	4610      	mov	r0, r2
 800775e:	4798      	blx	r3
 8007760:	60f8      	str	r0, [r7, #12]
      break;
 8007762:	e010      	b.n	8007786 <USBD_GetDescriptor+0x18e>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	7c12      	ldrb	r2, [r2, #16]
 8007770:	f107 010a 	add.w	r1, r7, #10
 8007774:	4610      	mov	r0, r2
 8007776:	4798      	blx	r3
 8007778:	60f8      	str	r0, [r7, #12]
      break;
 800777a:	e004      	b.n	8007786 <USBD_GetDescriptor+0x18e>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9f9 	bl	8007b76 <USBD_CtlError>
      return;
 8007784:	e04b      	b.n	800781e <USBD_GetDescriptor+0x226>
#endif
    }
    break;
 8007786:	e02e      	b.n	80077e6 <USBD_GetDescriptor+0x1ee>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7c1b      	ldrb	r3, [r3, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d109      	bne.n	80077a4 <USBD_GetDescriptor+0x1ac>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007798:	f107 020a 	add.w	r2, r7, #10
 800779c:	4610      	mov	r0, r2
 800779e:	4798      	blx	r3
 80077a0:	60f8      	str	r0, [r7, #12]
      break;
 80077a2:	e020      	b.n	80077e6 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f9e5 	bl	8007b76 <USBD_CtlError>
      return;
 80077ac:	e037      	b.n	800781e <USBD_GetDescriptor+0x226>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7c1b      	ldrb	r3, [r3, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10d      	bne.n	80077d2 <USBD_GetDescriptor+0x1da>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077be:	f107 020a 	add.w	r2, r7, #10
 80077c2:	4610      	mov	r0, r2
 80077c4:	4798      	blx	r3
 80077c6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	2207      	movs	r2, #7
 80077ce:	701a      	strb	r2, [r3, #0]
      break;
 80077d0:	e009      	b.n	80077e6 <USBD_GetDescriptor+0x1ee>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f9ce 	bl	8007b76 <USBD_CtlError>
      return;
 80077da:	e020      	b.n	800781e <USBD_GetDescriptor+0x226>
    }

  default:
     USBD_CtlError(pdev , req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9c9 	bl	8007b76 <USBD_CtlError>
    return;
 80077e4:	e01b      	b.n	800781e <USBD_GetDescriptor+0x226>
  }

  if((len != 0U) && (req->wLength != 0U))
 80077e6:	897b      	ldrh	r3, [r7, #10]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d011      	beq.n	8007810 <USBD_GetDescriptor+0x218>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	88db      	ldrh	r3, [r3, #6]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00d      	beq.n	8007810 <USBD_GetDescriptor+0x218>
  {

    len = MIN(len, req->wLength);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	88da      	ldrh	r2, [r3, #6]
 80077f8:	897b      	ldrh	r3, [r7, #10]
 80077fa:	4293      	cmp	r3, r2
 80077fc:	bf28      	it	cs
 80077fe:	4613      	movcs	r3, r2
 8007800:	b29b      	uxth	r3, r3
 8007802:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007804:	897b      	ldrh	r3, [r7, #10]
 8007806:	461a      	mov	r2, r3
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fa1e 	bl	8007c4c <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	88db      	ldrh	r3, [r3, #6]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <USBD_GetDescriptor+0x226>
  {
   USBD_CtlSendStatus(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fa75 	bl	8007d08 <USBD_CtlSendStatus>
  }
}
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	889b      	ldrh	r3, [r3, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d130      	bne.n	8007898 <USBD_SetAddress+0x74>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	88db      	ldrh	r3, [r3, #6]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d12c      	bne.n	8007898 <USBD_SetAddress+0x74>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	885b      	ldrh	r3, [r3, #2]
 8007842:	2b7f      	cmp	r3, #127	; 0x7f
 8007844:	d828      	bhi.n	8007898 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	885b      	ldrh	r3, [r3, #2]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007850:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007858:	2b03      	cmp	r3, #3
 800785a:	d104      	bne.n	8007866 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f989 	bl	8007b76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007864:	e01c      	b.n	80078a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7bfa      	ldrb	r2, [r7, #15]
 800786a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	4619      	mov	r1, r3
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f003 fdb0 	bl	800b3d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fa45 	bl	8007d08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d004      	beq.n	800788e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788c:	e008      	b.n	80078a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007896:	e003      	b.n	80078a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f96b 	bl	8007b76 <USBD_CtlError>
  }
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	4b41      	ldr	r3, [pc, #260]	; (80079c0 <USBD_SetConfig+0x118>)
 80078ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078bc:	4b40      	ldr	r3, [pc, #256]	; (80079c0 <USBD_SetConfig+0x118>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d904      	bls.n	80078ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f955 	bl	8007b76 <USBD_CtlError>
 80078cc:	e075      	b.n	80079ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d002      	beq.n	80078de <USBD_SetConfig+0x36>
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d023      	beq.n	8007924 <USBD_SetConfig+0x7c>
 80078dc:	e062      	b.n	80079a4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80078de:	4b38      	ldr	r3, [pc, #224]	; (80079c0 <USBD_SetConfig+0x118>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01a      	beq.n	800791c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80078e6:	4b36      	ldr	r3, [pc, #216]	; (80079c0 <USBD_SetConfig+0x118>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2203      	movs	r2, #3
 80078f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078f8:	4b31      	ldr	r3, [pc, #196]	; (80079c0 <USBD_SetConfig+0x118>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7ff fa0e 	bl	8006d20 <USBD_SetClassConfig>
 8007904:	4603      	mov	r3, r0
 8007906:	2b02      	cmp	r3, #2
 8007908:	d104      	bne.n	8007914 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800790a:	6839      	ldr	r1, [r7, #0]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f932 	bl	8007b76 <USBD_CtlError>
          return;
 8007912:	e052      	b.n	80079ba <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f9f7 	bl	8007d08 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800791a:	e04e      	b.n	80079ba <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f9f3 	bl	8007d08 <USBD_CtlSendStatus>
      break;
 8007922:	e04a      	b.n	80079ba <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007924:	4b26      	ldr	r3, [pc, #152]	; (80079c0 <USBD_SetConfig+0x118>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d112      	bne.n	8007952 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007934:	4b22      	ldr	r3, [pc, #136]	; (80079c0 <USBD_SetConfig+0x118>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800793e:	4b20      	ldr	r3, [pc, #128]	; (80079c0 <USBD_SetConfig+0x118>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fa0a 	bl	8006d5e <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f9dc 	bl	8007d08 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007950:	e033      	b.n	80079ba <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8007952:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <USBD_SetConfig+0x118>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	429a      	cmp	r2, r3
 800795e:	d01d      	beq.n	800799c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	b2db      	uxtb	r3, r3
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff f9f8 	bl	8006d5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <USBD_SetConfig+0x118>)
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007978:	4b11      	ldr	r3, [pc, #68]	; (80079c0 <USBD_SetConfig+0x118>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff f9ce 	bl	8006d20 <USBD_SetClassConfig>
 8007984:	4603      	mov	r3, r0
 8007986:	2b02      	cmp	r3, #2
 8007988:	d104      	bne.n	8007994 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f8f2 	bl	8007b76 <USBD_CtlError>
          return;
 8007992:	e012      	b.n	80079ba <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f9b7 	bl	8007d08 <USBD_CtlSendStatus>
      break;
 800799a:	e00e      	b.n	80079ba <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f9b3 	bl	8007d08 <USBD_CtlSendStatus>
      break;
 80079a2:	e00a      	b.n	80079ba <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f8e5 	bl	8007b76 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <USBD_SetConfig+0x118>)
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	4619      	mov	r1, r3
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7ff f9d3 	bl	8006d5e <USBD_ClrClassConfig>
      break;
 80079b8:	bf00      	nop
    }
  }
}
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	2000020c 	.word	0x2000020c

080079c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d004      	beq.n	80079e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8cc 	bl	8007b76 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80079de:	e021      	b.n	8007a24 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	db17      	blt.n	8007a1a <USBD_GetConfig+0x56>
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	dd02      	ble.n	80079f4 <USBD_GetConfig+0x30>
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	d00b      	beq.n	8007a0a <USBD_GetConfig+0x46>
 80079f2:	e012      	b.n	8007a1a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3308      	adds	r3, #8
 80079fe:	2201      	movs	r2, #1
 8007a00:	4619      	mov	r1, r3
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f922 	bl	8007c4c <USBD_CtlSendData>
      break;
 8007a08:	e00c      	b.n	8007a24 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	2201      	movs	r2, #1
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f91a 	bl	8007c4c <USBD_CtlSendData>
      break;
 8007a18:	e004      	b.n	8007a24 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f8aa 	bl	8007b76 <USBD_CtlError>
      break;
 8007a22:	bf00      	nop
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d81e      	bhi.n	8007a80 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	88db      	ldrh	r3, [r3, #6]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d004      	beq.n	8007a54 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f892 	bl	8007b76 <USBD_CtlError>
      break;
 8007a52:	e01a      	b.n	8007a8a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f043 0202 	orr.w	r2, r3, #2
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	330c      	adds	r3, #12
 8007a74:	2202      	movs	r2, #2
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 f8e7 	bl	8007c4c <USBD_CtlSendData>
    break;
 8007a7e:	e004      	b.n	8007a8a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f877 	bl	8007b76 <USBD_CtlError>
    break;
 8007a88:	bf00      	nop
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	3708      	adds	r7, #8
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	885b      	ldrh	r3, [r3, #2]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d106      	bne.n	8007ab2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f92b 	bl	8007d08 <USBD_CtlSendStatus>
  }

}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007aca:	3b01      	subs	r3, #1
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d80b      	bhi.n	8007ae8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	885b      	ldrh	r3, [r3, #2]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d10c      	bne.n	8007af2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f911 	bl	8007d08 <USBD_CtlSendStatus>
    }
    break;
 8007ae6:	e004      	b.n	8007af2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8007ae8:	6839      	ldr	r1, [r7, #0]
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f843 	bl	8007b76 <USBD_CtlError>
    break;
 8007af0:	e000      	b.n	8007af4 <USBD_ClrFeature+0x3a>
    break;
 8007af2:	bf00      	nop
  }
}
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	785a      	ldrb	r2, [r3, #1]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	3302      	adds	r3, #2
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	3303      	adds	r3, #3
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	4413      	add	r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	3304      	adds	r3, #4
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	3305      	adds	r3, #5
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	021b      	lsls	r3, r3, #8
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	4413      	add	r3, r2
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	3306      	adds	r3, #6
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	3307      	adds	r3, #7
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4413      	add	r3, r2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	80da      	strh	r2, [r3, #6]

}
 8007b6a:	bf00      	nop
 8007b6c:	370c      	adds	r7, #12
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b082      	sub	sp, #8
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007b80:	2180      	movs	r1, #128	; 0x80
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f003 fbbe 	bl	800b304 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007b88:	2100      	movs	r1, #0
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f003 fbba 	bl	800b304 <USBD_LL_StallEP>
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d032      	beq.n	8007c14 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f834 	bl	8007c1c <USBD_GetLen>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	005b      	lsls	r3, r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007bc2:	7dfb      	ldrb	r3, [r7, #23]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	75fa      	strb	r2, [r7, #23]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	4413      	add	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	7812      	ldrb	r2, [r2, #0]
 8007bd2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	75fa      	strb	r2, [r7, #23]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4413      	add	r3, r2
 8007be0:	2203      	movs	r2, #3
 8007be2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007be4:	e012      	b.n	8007c0c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	60fa      	str	r2, [r7, #12]
 8007bec:	7dfa      	ldrb	r2, [r7, #23]
 8007bee:	1c51      	adds	r1, r2, #1
 8007bf0:	75f9      	strb	r1, [r7, #23]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	75fa      	strb	r2, [r7, #23]
 8007c02:	461a      	mov	r2, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4413      	add	r3, r2
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e8      	bne.n	8007be6 <USBD_GetString+0x4e>
    }
  }
}
 8007c14:	bf00      	nop
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007c28:	e005      	b.n	8007c36 <USBD_GetLen+0x1a>
    {
        len++;
 8007c2a:	7bfb      	ldrb	r3, [r7, #15]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3301      	adds	r3, #1
 8007c34:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1f5      	bne.n	8007c2a <USBD_GetLen+0xe>
    }

    return len;
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007c62:	88fa      	ldrh	r2, [r7, #6]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007c68:	88fa      	ldrh	r2, [r7, #6]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007c6e:	88fb      	ldrh	r3, [r7, #6]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	2100      	movs	r1, #0
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f003 fbce 	bl	800b416 <USBD_LL_Transmit>

  return USBD_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007c92:	88fb      	ldrh	r3, [r7, #6]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	2100      	movs	r1, #0
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f003 fbbc 	bl	800b416 <USBD_LL_Transmit>

  return USBD_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2203      	movs	r2, #3
 8007cba:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007cbe:	88fa      	ldrh	r2, [r7, #6]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007cc6:	88fa      	ldrh	r2, [r7, #6]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f003 fbc1 	bl	800b45c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007cf2:	88fb      	ldrh	r3, [r7, #6]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f003 fbaf 	bl	800b45c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2204      	movs	r2, #4
 8007d14:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f003 fb79 	bl	800b416 <USBD_LL_Transmit>

  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2205      	movs	r2, #5
 8007d3a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2200      	movs	r2, #0
 8007d42:	2100      	movs	r1, #0
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f003 fb89 	bl	800b45c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f103 0208 	add.w	r2, r3, #8
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f103 0208 	add.w	r2, r3, #8
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f103 0208 	add.w	r2, r3, #8
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	1c5a      	adds	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
}
 8007dea:	bf00      	nop
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007df6:	b480      	push	{r7}
 8007df8:	b085      	sub	sp, #20
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e0c:	d103      	bne.n	8007e16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	60fb      	str	r3, [r7, #12]
 8007e14:	e00c      	b.n	8007e30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	e002      	b.n	8007e24 <vListInsert+0x2e>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d2f6      	bcs.n	8007e1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	601a      	str	r2, [r3, #0]
}
 8007e5c:	bf00      	nop
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6892      	ldr	r2, [r2, #8]
 8007e7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6852      	ldr	r2, [r2, #4]
 8007e88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d103      	bne.n	8007e9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	1e5a      	subs	r2, r3, #1
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3714      	adds	r7, #20
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10b      	bne.n	8007ee8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	b672      	cpsid	i
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	b662      	cpsie	i
 8007ee4:	60bb      	str	r3, [r7, #8]
 8007ee6:	e7fe      	b.n	8007ee6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8007ee8:	f001 fcbe 	bl	8009868 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef4:	68f9      	ldr	r1, [r7, #12]
 8007ef6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ef8:	fb01 f303 	mul.w	r3, r1, r3
 8007efc:	441a      	add	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f1e:	fb01 f303 	mul.w	r3, r1, r3
 8007f22:	441a      	add	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	22ff      	movs	r2, #255	; 0xff
 8007f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	22ff      	movs	r2, #255	; 0xff
 8007f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d114      	bne.n	8007f68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d01a      	beq.n	8007f7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3310      	adds	r3, #16
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 ff94 	bl	8008e78 <xTaskRemoveFromEventList>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d012      	beq.n	8007f7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f56:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <xQueueGenericReset+0xd0>)
 8007f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5c:	601a      	str	r2, [r3, #0]
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	e009      	b.n	8007f7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	3310      	adds	r3, #16
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7ff fef1 	bl	8007d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3324      	adds	r3, #36	; 0x24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff feec 	bl	8007d54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f7c:	f001 fca6 	bl	80098cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f80:	2301      	movs	r3, #1
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	e000ed04 	.word	0xe000ed04

08007f90 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08a      	sub	sp, #40	; 0x28
 8007f94:	af02      	add	r7, sp, #8
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10b      	bne.n	8007fbc <xQueueGenericCreate+0x2c>
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	b672      	cpsid	i
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	b662      	cpsie	i
 8007fb8:	613b      	str	r3, [r7, #16]
 8007fba:	e7fe      	b.n	8007fba <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
 8007fc6:	e004      	b.n	8007fd2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	fb02 f303 	mul.w	r3, r2, r3
 8007fd0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	3348      	adds	r3, #72	; 0x48
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 fd68 	bl	8009aac <pvPortMalloc>
 8007fdc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	3348      	adds	r3, #72	; 0x48
 8007fe8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fea:	79fa      	ldrb	r2, [r7, #7]
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	68b9      	ldr	r1, [r7, #8]
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f000 f805 	bl	8008006 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ffc:	69bb      	ldr	r3, [r7, #24]
	}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3720      	adds	r7, #32
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d103      	bne.n	8008022 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	e002      	b.n	8008028 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008034:	2101      	movs	r1, #1
 8008036:	69b8      	ldr	r0, [r7, #24]
 8008038:	f7ff ff40 	bl	8007ebc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08e      	sub	sp, #56	; 0x38
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008052:	2300      	movs	r3, #0
 8008054:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10b      	bne.n	8008078 <xQueueGenericSend+0x34>
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	b672      	cpsid	i
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	b662      	cpsie	i
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
 8008076:	e7fe      	b.n	8008076 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d103      	bne.n	8008086 <xQueueGenericSend+0x42>
 800807e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <xQueueGenericSend+0x46>
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <xQueueGenericSend+0x48>
 800808a:	2300      	movs	r3, #0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10b      	bne.n	80080a8 <xQueueGenericSend+0x64>
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	b672      	cpsid	i
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	b662      	cpsie	i
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
 80080a6:	e7fe      	b.n	80080a6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d103      	bne.n	80080b6 <xQueueGenericSend+0x72>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d101      	bne.n	80080ba <xQueueGenericSend+0x76>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e000      	b.n	80080bc <xQueueGenericSend+0x78>
 80080ba:	2300      	movs	r3, #0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10b      	bne.n	80080d8 <xQueueGenericSend+0x94>
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	b672      	cpsid	i
 80080c6:	f383 8811 	msr	BASEPRI, r3
 80080ca:	f3bf 8f6f 	isb	sy
 80080ce:	f3bf 8f4f 	dsb	sy
 80080d2:	b662      	cpsie	i
 80080d4:	623b      	str	r3, [r7, #32]
 80080d6:	e7fe      	b.n	80080d6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080d8:	f001 f872 	bl	80091c0 <xTaskGetSchedulerState>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d102      	bne.n	80080e8 <xQueueGenericSend+0xa4>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <xQueueGenericSend+0xa8>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <xQueueGenericSend+0xaa>
 80080ec:	2300      	movs	r3, #0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d10b      	bne.n	800810a <xQueueGenericSend+0xc6>
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	b672      	cpsid	i
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	b662      	cpsie	i
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	e7fe      	b.n	8008108 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800810a:	f001 fbad 	bl	8009868 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008116:	429a      	cmp	r2, r3
 8008118:	d302      	bcc.n	8008120 <xQueueGenericSend+0xdc>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2b02      	cmp	r3, #2
 800811e:	d129      	bne.n	8008174 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	68b9      	ldr	r1, [r7, #8]
 8008124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008126:	f000 fa49 	bl	80085bc <prvCopyDataToQueue>
 800812a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800812c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b00      	cmp	r3, #0
 8008132:	d010      	beq.n	8008156 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	3324      	adds	r3, #36	; 0x24
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fe9d 	bl	8008e78 <xTaskRemoveFromEventList>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d013      	beq.n	800816c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008144:	4b3f      	ldr	r3, [pc, #252]	; (8008244 <xQueueGenericSend+0x200>)
 8008146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	e00a      	b.n	800816c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800815c:	4b39      	ldr	r3, [pc, #228]	; (8008244 <xQueueGenericSend+0x200>)
 800815e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800816c:	f001 fbae 	bl	80098cc <vPortExitCritical>
				return pdPASS;
 8008170:	2301      	movs	r3, #1
 8008172:	e063      	b.n	800823c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d103      	bne.n	8008182 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800817a:	f001 fba7 	bl	80098cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800817e:	2300      	movs	r3, #0
 8008180:	e05c      	b.n	800823c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008188:	f107 0314 	add.w	r3, r7, #20
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fed7 	bl	8008f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008192:	2301      	movs	r3, #1
 8008194:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008196:	f001 fb99 	bl	80098cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800819a:	f000 fc6f 	bl	8008a7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800819e:	f001 fb63 	bl	8009868 <vPortEnterCritical>
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081a8:	b25b      	sxtb	r3, r3
 80081aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ae:	d103      	bne.n	80081b8 <xQueueGenericSend+0x174>
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081be:	b25b      	sxtb	r3, r3
 80081c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081c4:	d103      	bne.n	80081ce <xQueueGenericSend+0x18a>
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081ce:	f001 fb7d 	bl	80098cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081d2:	1d3a      	adds	r2, r7, #4
 80081d4:	f107 0314 	add.w	r3, r7, #20
 80081d8:	4611      	mov	r1, r2
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fec6 	bl	8008f6c <xTaskCheckForTimeOut>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d124      	bne.n	8008230 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081e8:	f000 faba 	bl	8008760 <prvIsQueueFull>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d018      	beq.n	8008224 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	3310      	adds	r3, #16
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	4611      	mov	r1, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fe16 	bl	8008e2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008202:	f000 fa45 	bl	8008690 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008206:	f000 fc47 	bl	8008a98 <xTaskResumeAll>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	f47f af7c 	bne.w	800810a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008212:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <xQueueGenericSend+0x200>)
 8008214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	e772      	b.n	800810a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008226:	f000 fa33 	bl	8008690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800822a:	f000 fc35 	bl	8008a98 <xTaskResumeAll>
 800822e:	e76c      	b.n	800810a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008232:	f000 fa2d 	bl	8008690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008236:	f000 fc2f 	bl	8008a98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800823a:	2300      	movs	r3, #0
		}
	}
}
 800823c:	4618      	mov	r0, r3
 800823e:	3738      	adds	r7, #56	; 0x38
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	e000ed04 	.word	0xe000ed04

08008248 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08e      	sub	sp, #56	; 0x38
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10b      	bne.n	8008274 <xQueueGiveFromISR+0x2c>
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	b672      	cpsid	i
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	b662      	cpsie	i
 8008270:	623b      	str	r3, [r7, #32]
 8008272:	e7fe      	b.n	8008272 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <xQueueGiveFromISR+0x4c>
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	b672      	cpsid	i
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	b662      	cpsie	i
 8008290:	61fb      	str	r3, [r7, #28]
 8008292:	e7fe      	b.n	8008292 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <xQueueGiveFromISR+0x5c>
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <xQueueGiveFromISR+0x60>
 80082a4:	2301      	movs	r3, #1
 80082a6:	e000      	b.n	80082aa <xQueueGiveFromISR+0x62>
 80082a8:	2300      	movs	r3, #0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10b      	bne.n	80082c6 <xQueueGiveFromISR+0x7e>
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	b672      	cpsid	i
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	b662      	cpsie	i
 80082c2:	61bb      	str	r3, [r7, #24]
 80082c4:	e7fe      	b.n	80082c4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082c6:	f001 fbaf 	bl	8009a28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082ca:	f3ef 8211 	mrs	r2, BASEPRI
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	b672      	cpsid	i
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	b662      	cpsie	i
 80082e2:	617a      	str	r2, [r7, #20]
 80082e4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d22b      	bcs.n	8008352 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800830c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008314:	d112      	bne.n	800833c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	d016      	beq.n	800834c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	3324      	adds	r3, #36	; 0x24
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fda8 	bl	8008e78 <xTaskRemoveFromEventList>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00e      	beq.n	800834c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00b      	beq.n	800834c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2201      	movs	r2, #1
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	e007      	b.n	800834c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800833c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008340:	3301      	adds	r3, #1
 8008342:	b2db      	uxtb	r3, r3
 8008344:	b25a      	sxtb	r2, r3
 8008346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800834c:	2301      	movs	r3, #1
 800834e:	637b      	str	r3, [r7, #52]	; 0x34
 8008350:	e001      	b.n	8008356 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008352:	2300      	movs	r3, #0
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008362:	4618      	mov	r0, r3
 8008364:	3738      	adds	r7, #56	; 0x38
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08e      	sub	sp, #56	; 0x38
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008376:	2300      	movs	r3, #0
 8008378:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800837e:	2300      	movs	r3, #0
 8008380:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10b      	bne.n	80083a0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	b672      	cpsid	i
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	b662      	cpsie	i
 800839c:	623b      	str	r3, [r7, #32]
 800839e:	e7fe      	b.n	800839e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d00b      	beq.n	80083c0 <xQueueSemaphoreTake+0x54>
 80083a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ac:	b672      	cpsid	i
 80083ae:	f383 8811 	msr	BASEPRI, r3
 80083b2:	f3bf 8f6f 	isb	sy
 80083b6:	f3bf 8f4f 	dsb	sy
 80083ba:	b662      	cpsie	i
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	e7fe      	b.n	80083be <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083c0:	f000 fefe 	bl	80091c0 <xTaskGetSchedulerState>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d102      	bne.n	80083d0 <xQueueSemaphoreTake+0x64>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <xQueueSemaphoreTake+0x68>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e000      	b.n	80083d6 <xQueueSemaphoreTake+0x6a>
 80083d4:	2300      	movs	r3, #0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <xQueueSemaphoreTake+0x86>
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	b672      	cpsid	i
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	b662      	cpsie	i
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e7fe      	b.n	80083f0 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80083f2:	f001 fa39 	bl	8009868 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d024      	beq.n	800844c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	1e5a      	subs	r2, r3, #1
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800840a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008412:	f001 f8a3 	bl	800955c <pvTaskIncrementMutexHeldCount>
 8008416:	4602      	mov	r2, r0
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00f      	beq.n	8008444 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	3310      	adds	r3, #16
 8008428:	4618      	mov	r0, r3
 800842a:	f000 fd25 	bl	8008e78 <xTaskRemoveFromEventList>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d007      	beq.n	8008444 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008434:	4b54      	ldr	r3, [pc, #336]	; (8008588 <xQueueSemaphoreTake+0x21c>)
 8008436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008444:	f001 fa42 	bl	80098cc <vPortExitCritical>
				return pdPASS;
 8008448:	2301      	movs	r3, #1
 800844a:	e098      	b.n	800857e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d112      	bne.n	8008478 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00b      	beq.n	8008470 <xQueueSemaphoreTake+0x104>
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	e7fe      	b.n	800846e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008470:	f001 fa2c 	bl	80098cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008474:	2300      	movs	r3, #0
 8008476:	e082      	b.n	800857e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847a:	2b00      	cmp	r3, #0
 800847c:	d106      	bne.n	800848c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800847e:	f107 030c 	add.w	r3, r7, #12
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fd5c 	bl	8008f40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800848c:	f001 fa1e 	bl	80098cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008490:	f000 faf4 	bl	8008a7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008494:	f001 f9e8 	bl	8009868 <vPortEnterCritical>
 8008498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800849e:	b25b      	sxtb	r3, r3
 80084a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a4:	d103      	bne.n	80084ae <xQueueSemaphoreTake+0x142>
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084b4:	b25b      	sxtb	r3, r3
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084ba:	d103      	bne.n	80084c4 <xQueueSemaphoreTake+0x158>
 80084bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084c4:	f001 fa02 	bl	80098cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084c8:	463a      	mov	r2, r7
 80084ca:	f107 030c 	add.w	r3, r7, #12
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fd4b 	bl	8008f6c <xTaskCheckForTimeOut>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d132      	bne.n	8008542 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084de:	f000 f929 	bl	8008734 <prvIsQueueEmpty>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d026      	beq.n	8008536 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d109      	bne.n	8008504 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80084f0:	f001 f9ba 	bl	8009868 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 fe7f 	bl	80091fc <xTaskPriorityInherit>
 80084fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008500:	f001 f9e4 	bl	80098cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	3324      	adds	r3, #36	; 0x24
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	4611      	mov	r1, r2
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fc8d 	bl	8008e2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008514:	f000 f8bc 	bl	8008690 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008518:	f000 fabe 	bl	8008a98 <xTaskResumeAll>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	f47f af67 	bne.w	80083f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008524:	4b18      	ldr	r3, [pc, #96]	; (8008588 <xQueueSemaphoreTake+0x21c>)
 8008526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	e75d      	b.n	80083f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008538:	f000 f8aa 	bl	8008690 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800853c:	f000 faac 	bl	8008a98 <xTaskResumeAll>
 8008540:	e757      	b.n	80083f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008544:	f000 f8a4 	bl	8008690 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008548:	f000 faa6 	bl	8008a98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800854c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800854e:	f000 f8f1 	bl	8008734 <prvIsQueueEmpty>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	f43f af4c 	beq.w	80083f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00d      	beq.n	800857c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008560:	f001 f982 	bl	8009868 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008566:	f000 f811 	bl	800858c <prvGetDisinheritPriorityAfterTimeout>
 800856a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800856c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008572:	4618      	mov	r0, r3
 8008574:	f000 ff50 	bl	8009418 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008578:	f001 f9a8 	bl	80098cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800857c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800857e:	4618      	mov	r0, r3
 8008580:	3738      	adds	r7, #56	; 0x38
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d006      	beq.n	80085aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f1c3 0307 	rsb	r3, r3, #7
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	e001      	b.n	80085ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80085ae:	68fb      	ldr	r3, [r7, #12]
	}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10d      	bne.n	80085f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d14d      	bne.n	800867e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fe8e 	bl	8009308 <xTaskPriorityDisinherit>
 80085ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	605a      	str	r2, [r3, #4]
 80085f4:	e043      	b.n	800867e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d119      	bne.n	8008630 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6898      	ldr	r0, [r3, #8]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	461a      	mov	r2, r3
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	f003 f962 	bl	800b8d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	689a      	ldr	r2, [r3, #8]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	441a      	add	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d32b      	bcc.n	800867e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	609a      	str	r2, [r3, #8]
 800862e:	e026      	b.n	800867e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	68d8      	ldr	r0, [r3, #12]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008638:	461a      	mov	r2, r3
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	f003 f948 	bl	800b8d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008648:	425b      	negs	r3, r3
 800864a:	441a      	add	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d207      	bcs.n	800866c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	425b      	negs	r3, r3
 8008666:	441a      	add	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d105      	bne.n	800867e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	3b01      	subs	r3, #1
 800867c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008686:	697b      	ldr	r3, [r7, #20]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008698:	f001 f8e6 	bl	8009868 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086a4:	e011      	b.n	80086ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d012      	beq.n	80086d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3324      	adds	r3, #36	; 0x24
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fbe0 	bl	8008e78 <xTaskRemoveFromEventList>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80086be:	f000 fcb9 	bl	8009034 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80086ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dce9      	bgt.n	80086a6 <prvUnlockQueue+0x16>
 80086d2:	e000      	b.n	80086d6 <prvUnlockQueue+0x46>
					break;
 80086d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	22ff      	movs	r2, #255	; 0xff
 80086da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80086de:	f001 f8f5 	bl	80098cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086e2:	f001 f8c1 	bl	8009868 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086ee:	e011      	b.n	8008714 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d012      	beq.n	800871e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3310      	adds	r3, #16
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fbbb 	bl	8008e78 <xTaskRemoveFromEventList>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008708:	f000 fc94 	bl	8009034 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800870c:	7bbb      	ldrb	r3, [r7, #14]
 800870e:	3b01      	subs	r3, #1
 8008710:	b2db      	uxtb	r3, r3
 8008712:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008714:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008718:	2b00      	cmp	r3, #0
 800871a:	dce9      	bgt.n	80086f0 <prvUnlockQueue+0x60>
 800871c:	e000      	b.n	8008720 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800871e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	22ff      	movs	r2, #255	; 0xff
 8008724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008728:	f001 f8d0 	bl	80098cc <vPortExitCritical>
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800873c:	f001 f894 	bl	8009868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	2b00      	cmp	r3, #0
 8008746:	d102      	bne.n	800874e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008748:	2301      	movs	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	e001      	b.n	8008752 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800874e:	2300      	movs	r3, #0
 8008750:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008752:	f001 f8bb 	bl	80098cc <vPortExitCritical>

	return xReturn;
 8008756:	68fb      	ldr	r3, [r7, #12]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008768:	f001 f87e 	bl	8009868 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008774:	429a      	cmp	r2, r3
 8008776:	d102      	bne.n	800877e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008778:	2301      	movs	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	e001      	b.n	8008782 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800877e:	2300      	movs	r3, #0
 8008780:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008782:	f001 f8a3 	bl	80098cc <vPortExitCritical>

	return xReturn;
 8008786:	68fb      	ldr	r3, [r7, #12]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08c      	sub	sp, #48	; 0x30
 8008794:	af04      	add	r7, sp, #16
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087a0:	88fb      	ldrh	r3, [r7, #6]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 f981 	bl	8009aac <pvPortMalloc>
 80087aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00e      	beq.n	80087d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80087b2:	2054      	movs	r0, #84	; 0x54
 80087b4:	f001 f97a 	bl	8009aac <pvPortMalloc>
 80087b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d003      	beq.n	80087c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	631a      	str	r2, [r3, #48]	; 0x30
 80087c6:	e005      	b.n	80087d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087c8:	6978      	ldr	r0, [r7, #20]
 80087ca:	f001 fa37 	bl	8009c3c <vPortFree>
 80087ce:	e001      	b.n	80087d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d013      	beq.n	8008802 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	2300      	movs	r3, #0
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	9302      	str	r3, [sp, #8]
 80087e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	68b9      	ldr	r1, [r7, #8]
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 f80e 	bl	8008812 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087f6:	69f8      	ldr	r0, [r7, #28]
 80087f8:	f000 f88c 	bl	8008914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087fc:	2301      	movs	r3, #1
 80087fe:	61bb      	str	r3, [r7, #24]
 8008800:	e002      	b.n	8008808 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008806:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008808:	69bb      	ldr	r3, [r7, #24]
	}
 800880a:	4618      	mov	r0, r3
 800880c:	3720      	adds	r7, #32
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b088      	sub	sp, #32
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	607a      	str	r2, [r7, #4]
 800881e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008824:	6879      	ldr	r1, [r7, #4]
 8008826:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800882a:	440b      	add	r3, r1
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	f023 0307 	bic.w	r3, r3, #7
 8008838:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	f003 0307 	and.w	r3, r3, #7
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <prvInitialiseNewTask+0x4a>
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	b672      	cpsid	i
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	b662      	cpsie	i
 8008858:	617b      	str	r3, [r7, #20]
 800885a:	e7fe      	b.n	800885a <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800885c:	2300      	movs	r3, #0
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	e012      	b.n	8008888 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	7819      	ldrb	r1, [r3, #0]
 800886a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	4413      	add	r3, r2
 8008870:	3334      	adds	r3, #52	; 0x34
 8008872:	460a      	mov	r2, r1
 8008874:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008876:	68ba      	ldr	r2, [r7, #8]
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	4413      	add	r3, r2
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d006      	beq.n	8008890 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	3301      	adds	r3, #1
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	2b0f      	cmp	r3, #15
 800888c:	d9e9      	bls.n	8008862 <prvInitialiseNewTask+0x50>
 800888e:	e000      	b.n	8008892 <prvInitialiseNewTask+0x80>
		{
			break;
 8008890:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	2b06      	cmp	r3, #6
 800889e:	d901      	bls.n	80088a4 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088a0:	2306      	movs	r3, #6
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	2200      	movs	r2, #0
 80088b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	3304      	adds	r3, #4
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff fa6a 	bl	8007d94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	3318      	adds	r3, #24
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff fa65 	bl	8007d94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	f1c3 0207 	rsb	r2, r3, #7
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	2200      	movs	r2, #0
 80088e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	68f9      	ldr	r1, [r7, #12]
 80088f2:	69b8      	ldr	r0, [r7, #24]
 80088f4:	f000 feac 	bl	8009650 <pxPortInitialiseStack>
 80088f8:	4602      	mov	r2, r0
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d002      	beq.n	800890a <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800890a:	bf00      	nop
 800890c:	3720      	adds	r7, #32
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800891c:	f000 ffa4 	bl	8009868 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008920:	4b2a      	ldr	r3, [pc, #168]	; (80089cc <prvAddNewTaskToReadyList+0xb8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3301      	adds	r3, #1
 8008926:	4a29      	ldr	r2, [pc, #164]	; (80089cc <prvAddNewTaskToReadyList+0xb8>)
 8008928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800892a:	4b29      	ldr	r3, [pc, #164]	; (80089d0 <prvAddNewTaskToReadyList+0xbc>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d109      	bne.n	8008946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008932:	4a27      	ldr	r2, [pc, #156]	; (80089d0 <prvAddNewTaskToReadyList+0xbc>)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008938:	4b24      	ldr	r3, [pc, #144]	; (80089cc <prvAddNewTaskToReadyList+0xb8>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d110      	bne.n	8008962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008940:	f000 fb9c 	bl	800907c <prvInitialiseTaskLists>
 8008944:	e00d      	b.n	8008962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008946:	4b23      	ldr	r3, [pc, #140]	; (80089d4 <prvAddNewTaskToReadyList+0xc0>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800894e:	4b20      	ldr	r3, [pc, #128]	; (80089d0 <prvAddNewTaskToReadyList+0xbc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	429a      	cmp	r2, r3
 800895a:	d802      	bhi.n	8008962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800895c:	4a1c      	ldr	r2, [pc, #112]	; (80089d0 <prvAddNewTaskToReadyList+0xbc>)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008962:	4b1d      	ldr	r3, [pc, #116]	; (80089d8 <prvAddNewTaskToReadyList+0xc4>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3301      	adds	r3, #1
 8008968:	4a1b      	ldr	r2, [pc, #108]	; (80089d8 <prvAddNewTaskToReadyList+0xc4>)
 800896a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	2201      	movs	r2, #1
 8008972:	409a      	lsls	r2, r3
 8008974:	4b19      	ldr	r3, [pc, #100]	; (80089dc <prvAddNewTaskToReadyList+0xc8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4313      	orrs	r3, r2
 800897a:	4a18      	ldr	r2, [pc, #96]	; (80089dc <prvAddNewTaskToReadyList+0xc8>)
 800897c:	6013      	str	r3, [r2, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008982:	4613      	mov	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4a15      	ldr	r2, [pc, #84]	; (80089e0 <prvAddNewTaskToReadyList+0xcc>)
 800898c:	441a      	add	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3304      	adds	r3, #4
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f7ff fa0a 	bl	8007dae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800899a:	f000 ff97 	bl	80098cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800899e:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <prvAddNewTaskToReadyList+0xc0>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00e      	beq.n	80089c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089a6:	4b0a      	ldr	r3, [pc, #40]	; (80089d0 <prvAddNewTaskToReadyList+0xbc>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d207      	bcs.n	80089c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089b4:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <prvAddNewTaskToReadyList+0xd0>)
 80089b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	20000310 	.word	0x20000310
 80089d0:	20000210 	.word	0x20000210
 80089d4:	2000031c 	.word	0x2000031c
 80089d8:	2000032c 	.word	0x2000032c
 80089dc:	20000318 	.word	0x20000318
 80089e0:	20000214 	.word	0x20000214
 80089e4:	e000ed04 	.word	0xe000ed04

080089e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80089ee:	4b1d      	ldr	r3, [pc, #116]	; (8008a64 <vTaskStartScheduler+0x7c>)
 80089f0:	9301      	str	r3, [sp, #4]
 80089f2:	2300      	movs	r3, #0
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	2300      	movs	r3, #0
 80089f8:	2280      	movs	r2, #128	; 0x80
 80089fa:	491b      	ldr	r1, [pc, #108]	; (8008a68 <vTaskStartScheduler+0x80>)
 80089fc:	481b      	ldr	r0, [pc, #108]	; (8008a6c <vTaskStartScheduler+0x84>)
 80089fe:	f7ff fec7 	bl	8008790 <xTaskCreate>
 8008a02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d117      	bne.n	8008a3a <vTaskStartScheduler+0x52>
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	b672      	cpsid	i
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	b662      	cpsie	i
 8008a1e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a20:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <vTaskStartScheduler+0x88>)
 8008a22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a26:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a28:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <vTaskStartScheduler+0x8c>)
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008a2e:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <vTaskStartScheduler+0x90>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a34:	f000 fe9c 	bl	8009770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a38:	e00f      	b.n	8008a5a <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a40:	d10b      	bne.n	8008a5a <vTaskStartScheduler+0x72>
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	b672      	cpsid	i
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	b662      	cpsie	i
 8008a56:	607b      	str	r3, [r7, #4]
 8008a58:	e7fe      	b.n	8008a58 <vTaskStartScheduler+0x70>
}
 8008a5a:	bf00      	nop
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20000334 	.word	0x20000334
 8008a68:	0800c6d8 	.word	0x0800c6d8
 8008a6c:	0800904d 	.word	0x0800904d
 8008a70:	20000330 	.word	0x20000330
 8008a74:	2000031c 	.word	0x2000031c
 8008a78:	20000314 	.word	0x20000314

08008a7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a80:	4b04      	ldr	r3, [pc, #16]	; (8008a94 <vTaskSuspendAll+0x18>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3301      	adds	r3, #1
 8008a86:	4a03      	ldr	r2, [pc, #12]	; (8008a94 <vTaskSuspendAll+0x18>)
 8008a88:	6013      	str	r3, [r2, #0]
}
 8008a8a:	bf00      	nop
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	20000338 	.word	0x20000338

08008a98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008aa6:	4b42      	ldr	r3, [pc, #264]	; (8008bb0 <xTaskResumeAll+0x118>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10b      	bne.n	8008ac6 <xTaskResumeAll+0x2e>
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	b672      	cpsid	i
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	b662      	cpsie	i
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	e7fe      	b.n	8008ac4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ac6:	f000 fecf 	bl	8009868 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008aca:	4b39      	ldr	r3, [pc, #228]	; (8008bb0 <xTaskResumeAll+0x118>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	4a37      	ldr	r2, [pc, #220]	; (8008bb0 <xTaskResumeAll+0x118>)
 8008ad2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ad4:	4b36      	ldr	r3, [pc, #216]	; (8008bb0 <xTaskResumeAll+0x118>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d161      	bne.n	8008ba0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008adc:	4b35      	ldr	r3, [pc, #212]	; (8008bb4 <xTaskResumeAll+0x11c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d05d      	beq.n	8008ba0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ae4:	e02e      	b.n	8008b44 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008ae6:	4b34      	ldr	r3, [pc, #208]	; (8008bb8 <xTaskResumeAll+0x120>)
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3318      	adds	r3, #24
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7ff f9b8 	bl	8007e68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3304      	adds	r3, #4
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff f9b3 	bl	8007e68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	2201      	movs	r2, #1
 8008b08:	409a      	lsls	r2, r3
 8008b0a:	4b2c      	ldr	r3, [pc, #176]	; (8008bbc <xTaskResumeAll+0x124>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	4a2a      	ldr	r2, [pc, #168]	; (8008bbc <xTaskResumeAll+0x124>)
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b18:	4613      	mov	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4a27      	ldr	r2, [pc, #156]	; (8008bc0 <xTaskResumeAll+0x128>)
 8008b22:	441a      	add	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	f7ff f93f 	bl	8007dae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b34:	4b23      	ldr	r3, [pc, #140]	; (8008bc4 <xTaskResumeAll+0x12c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d302      	bcc.n	8008b44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008b3e:	4b22      	ldr	r3, [pc, #136]	; (8008bc8 <xTaskResumeAll+0x130>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b44:	4b1c      	ldr	r3, [pc, #112]	; (8008bb8 <xTaskResumeAll+0x120>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1cc      	bne.n	8008ae6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b52:	f000 fb0f 	bl	8009174 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b56:	4b1d      	ldr	r3, [pc, #116]	; (8008bcc <xTaskResumeAll+0x134>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d010      	beq.n	8008b84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b62:	f000 f849 	bl	8008bf8 <xTaskIncrementTick>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b6c:	4b16      	ldr	r3, [pc, #88]	; (8008bc8 <xTaskResumeAll+0x130>)
 8008b6e:	2201      	movs	r2, #1
 8008b70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3b01      	subs	r3, #1
 8008b76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f1      	bne.n	8008b62 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008b7e:	4b13      	ldr	r3, [pc, #76]	; (8008bcc <xTaskResumeAll+0x134>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b84:	4b10      	ldr	r3, [pc, #64]	; (8008bc8 <xTaskResumeAll+0x130>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d009      	beq.n	8008ba0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b90:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <xTaskResumeAll+0x138>)
 8008b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ba0:	f000 fe94 	bl	80098cc <vPortExitCritical>

	return xAlreadyYielded;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000338 	.word	0x20000338
 8008bb4:	20000310 	.word	0x20000310
 8008bb8:	200002d0 	.word	0x200002d0
 8008bbc:	20000318 	.word	0x20000318
 8008bc0:	20000214 	.word	0x20000214
 8008bc4:	20000210 	.word	0x20000210
 8008bc8:	20000324 	.word	0x20000324
 8008bcc:	20000320 	.word	0x20000320
 8008bd0:	e000ed04 	.word	0xe000ed04

08008bd4 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bda:	f000 ff25 	bl	8009a28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008bde:	2300      	movs	r3, #0
 8008be0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008be2:	4b04      	ldr	r3, [pc, #16]	; (8008bf4 <xTaskGetTickCountFromISR+0x20>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008be8:	683b      	ldr	r3, [r7, #0]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000314 	.word	0x20000314

08008bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c02:	4b51      	ldr	r3, [pc, #324]	; (8008d48 <xTaskIncrementTick+0x150>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f040 808e 	bne.w	8008d28 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c0c:	4b4f      	ldr	r3, [pc, #316]	; (8008d4c <xTaskIncrementTick+0x154>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3301      	adds	r3, #1
 8008c12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c14:	4a4d      	ldr	r2, [pc, #308]	; (8008d4c <xTaskIncrementTick+0x154>)
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d121      	bne.n	8008c64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c20:	4b4b      	ldr	r3, [pc, #300]	; (8008d50 <xTaskIncrementTick+0x158>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <xTaskIncrementTick+0x4a>
 8008c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2e:	b672      	cpsid	i
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	b662      	cpsie	i
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	e7fe      	b.n	8008c40 <xTaskIncrementTick+0x48>
 8008c42:	4b43      	ldr	r3, [pc, #268]	; (8008d50 <xTaskIncrementTick+0x158>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	4b42      	ldr	r3, [pc, #264]	; (8008d54 <xTaskIncrementTick+0x15c>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a40      	ldr	r2, [pc, #256]	; (8008d50 <xTaskIncrementTick+0x158>)
 8008c4e:	6013      	str	r3, [r2, #0]
 8008c50:	4a40      	ldr	r2, [pc, #256]	; (8008d54 <xTaskIncrementTick+0x15c>)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	4b40      	ldr	r3, [pc, #256]	; (8008d58 <xTaskIncrementTick+0x160>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	4a3e      	ldr	r2, [pc, #248]	; (8008d58 <xTaskIncrementTick+0x160>)
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	f000 fa88 	bl	8009174 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c64:	4b3d      	ldr	r3, [pc, #244]	; (8008d5c <xTaskIncrementTick+0x164>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d34d      	bcc.n	8008d0a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c6e:	4b38      	ldr	r3, [pc, #224]	; (8008d50 <xTaskIncrementTick+0x158>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <xTaskIncrementTick+0x84>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e000      	b.n	8008c7e <xTaskIncrementTick+0x86>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d004      	beq.n	8008c8c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c82:	4b36      	ldr	r3, [pc, #216]	; (8008d5c <xTaskIncrementTick+0x164>)
 8008c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c88:	601a      	str	r2, [r3, #0]
					break;
 8008c8a:	e03e      	b.n	8008d0a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c8c:	4b30      	ldr	r3, [pc, #192]	; (8008d50 <xTaskIncrementTick+0x158>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d203      	bcs.n	8008cac <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008ca4:	4a2d      	ldr	r2, [pc, #180]	; (8008d5c <xTaskIncrementTick+0x164>)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6013      	str	r3, [r2, #0]
						break;
 8008caa:	e02e      	b.n	8008d0a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff f8d9 	bl	8007e68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	3318      	adds	r3, #24
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff f8d0 	bl	8007e68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	2201      	movs	r2, #1
 8008cce:	409a      	lsls	r2, r3
 8008cd0:	4b23      	ldr	r3, [pc, #140]	; (8008d60 <xTaskIncrementTick+0x168>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	4a22      	ldr	r2, [pc, #136]	; (8008d60 <xTaskIncrementTick+0x168>)
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4a1f      	ldr	r2, [pc, #124]	; (8008d64 <xTaskIncrementTick+0x16c>)
 8008ce8:	441a      	add	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	3304      	adds	r3, #4
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	f7ff f85c 	bl	8007dae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfa:	4b1b      	ldr	r3, [pc, #108]	; (8008d68 <xTaskIncrementTick+0x170>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d3b4      	bcc.n	8008c6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008d04:	2301      	movs	r3, #1
 8008d06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d08:	e7b1      	b.n	8008c6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d0a:	4b17      	ldr	r3, [pc, #92]	; (8008d68 <xTaskIncrementTick+0x170>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d10:	4914      	ldr	r1, [pc, #80]	; (8008d64 <xTaskIncrementTick+0x16c>)
 8008d12:	4613      	mov	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	440b      	add	r3, r1
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d907      	bls.n	8008d32 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008d22:	2301      	movs	r3, #1
 8008d24:	617b      	str	r3, [r7, #20]
 8008d26:	e004      	b.n	8008d32 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d28:	4b10      	ldr	r3, [pc, #64]	; (8008d6c <xTaskIncrementTick+0x174>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	4a0f      	ldr	r2, [pc, #60]	; (8008d6c <xTaskIncrementTick+0x174>)
 8008d30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008d32:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <xTaskIncrementTick+0x178>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008d3e:	697b      	ldr	r3, [r7, #20]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20000338 	.word	0x20000338
 8008d4c:	20000314 	.word	0x20000314
 8008d50:	200002c8 	.word	0x200002c8
 8008d54:	200002cc 	.word	0x200002cc
 8008d58:	20000328 	.word	0x20000328
 8008d5c:	20000330 	.word	0x20000330
 8008d60:	20000318 	.word	0x20000318
 8008d64:	20000214 	.word	0x20000214
 8008d68:	20000210 	.word	0x20000210
 8008d6c:	20000320 	.word	0x20000320
 8008d70:	20000324 	.word	0x20000324

08008d74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d7a:	4b27      	ldr	r3, [pc, #156]	; (8008e18 <vTaskSwitchContext+0xa4>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d82:	4b26      	ldr	r3, [pc, #152]	; (8008e1c <vTaskSwitchContext+0xa8>)
 8008d84:	2201      	movs	r2, #1
 8008d86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d88:	e040      	b.n	8008e0c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008d8a:	4b24      	ldr	r3, [pc, #144]	; (8008e1c <vTaskSwitchContext+0xa8>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008d90:	4b23      	ldr	r3, [pc, #140]	; (8008e20 <vTaskSwitchContext+0xac>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	fab3 f383 	clz	r3, r3
 8008d9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	f1c3 031f 	rsb	r3, r3, #31
 8008da4:	617b      	str	r3, [r7, #20]
 8008da6:	491f      	ldr	r1, [pc, #124]	; (8008e24 <vTaskSwitchContext+0xb0>)
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10b      	bne.n	8008dd2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	b672      	cpsid	i
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	b662      	cpsie	i
 8008dce:	607b      	str	r3, [r7, #4]
 8008dd0:	e7fe      	b.n	8008dd0 <vTaskSwitchContext+0x5c>
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4a11      	ldr	r2, [pc, #68]	; (8008e24 <vTaskSwitchContext+0xb0>)
 8008dde:	4413      	add	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	605a      	str	r2, [r3, #4]
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	3308      	adds	r3, #8
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d104      	bne.n	8008e02 <vTaskSwitchContext+0x8e>
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	605a      	str	r2, [r3, #4]
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	4a07      	ldr	r2, [pc, #28]	; (8008e28 <vTaskSwitchContext+0xb4>)
 8008e0a:	6013      	str	r3, [r2, #0]
}
 8008e0c:	bf00      	nop
 8008e0e:	371c      	adds	r7, #28
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	20000338 	.word	0x20000338
 8008e1c:	20000324 	.word	0x20000324
 8008e20:	20000318 	.word	0x20000318
 8008e24:	20000214 	.word	0x20000214
 8008e28:	20000210 	.word	0x20000210

08008e2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10b      	bne.n	8008e54 <vTaskPlaceOnEventList+0x28>
 8008e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e40:	b672      	cpsid	i
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	b662      	cpsie	i
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e7fe      	b.n	8008e52 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e54:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <vTaskPlaceOnEventList+0x48>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3318      	adds	r3, #24
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7fe ffca 	bl	8007df6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e62:	2101      	movs	r1, #1
 8008e64:	6838      	ldr	r0, [r7, #0]
 8008e66:	f000 fb8d 	bl	8009584 <prvAddCurrentTaskToDelayedList>
}
 8008e6a:	bf00      	nop
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000210 	.word	0x20000210

08008e78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10b      	bne.n	8008ea6 <xTaskRemoveFromEventList+0x2e>
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	b672      	cpsid	i
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	b662      	cpsie	i
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e7fe      	b.n	8008ea4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	3318      	adds	r3, #24
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe ffdc 	bl	8007e68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eb0:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <xTaskRemoveFromEventList+0xb0>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d11c      	bne.n	8008ef2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fe ffd3 	bl	8007e68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	409a      	lsls	r2, r3
 8008eca:	4b18      	ldr	r3, [pc, #96]	; (8008f2c <xTaskRemoveFromEventList+0xb4>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	4a16      	ldr	r2, [pc, #88]	; (8008f2c <xTaskRemoveFromEventList+0xb4>)
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed8:	4613      	mov	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4a13      	ldr	r2, [pc, #76]	; (8008f30 <xTaskRemoveFromEventList+0xb8>)
 8008ee2:	441a      	add	r2, r3
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fe ff5f 	bl	8007dae <vListInsertEnd>
 8008ef0:	e005      	b.n	8008efe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3318      	adds	r3, #24
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	480e      	ldr	r0, [pc, #56]	; (8008f34 <xTaskRemoveFromEventList+0xbc>)
 8008efa:	f7fe ff58 	bl	8007dae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f02:	4b0d      	ldr	r3, [pc, #52]	; (8008f38 <xTaskRemoveFromEventList+0xc0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d905      	bls.n	8008f18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f10:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <xTaskRemoveFromEventList+0xc4>)
 8008f12:	2201      	movs	r2, #1
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	e001      	b.n	8008f1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008f1c:	697b      	ldr	r3, [r7, #20]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000338 	.word	0x20000338
 8008f2c:	20000318 	.word	0x20000318
 8008f30:	20000214 	.word	0x20000214
 8008f34:	200002d0 	.word	0x200002d0
 8008f38:	20000210 	.word	0x20000210
 8008f3c:	20000324 	.word	0x20000324

08008f40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <vTaskInternalSetTimeOutState+0x24>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <vTaskInternalSetTimeOutState+0x28>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	605a      	str	r2, [r3, #4]
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	20000328 	.word	0x20000328
 8008f68:	20000314 	.word	0x20000314

08008f6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10b      	bne.n	8008f94 <xTaskCheckForTimeOut+0x28>
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	b672      	cpsid	i
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	b662      	cpsie	i
 8008f90:	613b      	str	r3, [r7, #16]
 8008f92:	e7fe      	b.n	8008f92 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10b      	bne.n	8008fb2 <xTaskCheckForTimeOut+0x46>
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	b672      	cpsid	i
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	b662      	cpsie	i
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	e7fe      	b.n	8008fb0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008fb2:	f000 fc59 	bl	8009868 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fb6:	4b1d      	ldr	r3, [pc, #116]	; (800902c <xTaskCheckForTimeOut+0xc0>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fce:	d102      	bne.n	8008fd6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61fb      	str	r3, [r7, #28]
 8008fd4:	e023      	b.n	800901e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	4b15      	ldr	r3, [pc, #84]	; (8009030 <xTaskCheckForTimeOut+0xc4>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d007      	beq.n	8008ff2 <xTaskCheckForTimeOut+0x86>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	69ba      	ldr	r2, [r7, #24]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d302      	bcc.n	8008ff2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	61fb      	str	r3, [r7, #28]
 8008ff0:	e015      	b.n	800901e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d20b      	bcs.n	8009014 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	1ad2      	subs	r2, r2, r3
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7ff ff99 	bl	8008f40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	61fb      	str	r3, [r7, #28]
 8009012:	e004      	b.n	800901e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800901a:	2301      	movs	r3, #1
 800901c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800901e:	f000 fc55 	bl	80098cc <vPortExitCritical>

	return xReturn;
 8009022:	69fb      	ldr	r3, [r7, #28]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3720      	adds	r7, #32
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	20000314 	.word	0x20000314
 8009030:	20000328 	.word	0x20000328

08009034 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009034:	b480      	push	{r7}
 8009036:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009038:	4b03      	ldr	r3, [pc, #12]	; (8009048 <vTaskMissedYield+0x14>)
 800903a:	2201      	movs	r2, #1
 800903c:	601a      	str	r2, [r3, #0]
}
 800903e:	bf00      	nop
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	20000324 	.word	0x20000324

0800904c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009054:	f000 f852 	bl	80090fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009058:	4b06      	ldr	r3, [pc, #24]	; (8009074 <prvIdleTask+0x28>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d9f9      	bls.n	8009054 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009060:	4b05      	ldr	r3, [pc, #20]	; (8009078 <prvIdleTask+0x2c>)
 8009062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009070:	e7f0      	b.n	8009054 <prvIdleTask+0x8>
 8009072:	bf00      	nop
 8009074:	20000214 	.word	0x20000214
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009082:	2300      	movs	r3, #0
 8009084:	607b      	str	r3, [r7, #4]
 8009086:	e00c      	b.n	80090a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	4613      	mov	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	4413      	add	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4a12      	ldr	r2, [pc, #72]	; (80090dc <prvInitialiseTaskLists+0x60>)
 8009094:	4413      	add	r3, r2
 8009096:	4618      	mov	r0, r3
 8009098:	f7fe fe5c 	bl	8007d54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3301      	adds	r3, #1
 80090a0:	607b      	str	r3, [r7, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b06      	cmp	r3, #6
 80090a6:	d9ef      	bls.n	8009088 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090a8:	480d      	ldr	r0, [pc, #52]	; (80090e0 <prvInitialiseTaskLists+0x64>)
 80090aa:	f7fe fe53 	bl	8007d54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090ae:	480d      	ldr	r0, [pc, #52]	; (80090e4 <prvInitialiseTaskLists+0x68>)
 80090b0:	f7fe fe50 	bl	8007d54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090b4:	480c      	ldr	r0, [pc, #48]	; (80090e8 <prvInitialiseTaskLists+0x6c>)
 80090b6:	f7fe fe4d 	bl	8007d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090ba:	480c      	ldr	r0, [pc, #48]	; (80090ec <prvInitialiseTaskLists+0x70>)
 80090bc:	f7fe fe4a 	bl	8007d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090c0:	480b      	ldr	r0, [pc, #44]	; (80090f0 <prvInitialiseTaskLists+0x74>)
 80090c2:	f7fe fe47 	bl	8007d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090c6:	4b0b      	ldr	r3, [pc, #44]	; (80090f4 <prvInitialiseTaskLists+0x78>)
 80090c8:	4a05      	ldr	r2, [pc, #20]	; (80090e0 <prvInitialiseTaskLists+0x64>)
 80090ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090cc:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <prvInitialiseTaskLists+0x7c>)
 80090ce:	4a05      	ldr	r2, [pc, #20]	; (80090e4 <prvInitialiseTaskLists+0x68>)
 80090d0:	601a      	str	r2, [r3, #0]
}
 80090d2:	bf00      	nop
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000214 	.word	0x20000214
 80090e0:	200002a0 	.word	0x200002a0
 80090e4:	200002b4 	.word	0x200002b4
 80090e8:	200002d0 	.word	0x200002d0
 80090ec:	200002e4 	.word	0x200002e4
 80090f0:	200002fc 	.word	0x200002fc
 80090f4:	200002c8 	.word	0x200002c8
 80090f8:	200002cc 	.word	0x200002cc

080090fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009102:	e019      	b.n	8009138 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009104:	f000 fbb0 	bl	8009868 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009108:	4b0f      	ldr	r3, [pc, #60]	; (8009148 <prvCheckTasksWaitingTermination+0x4c>)
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	3304      	adds	r3, #4
 8009114:	4618      	mov	r0, r3
 8009116:	f7fe fea7 	bl	8007e68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800911a:	4b0c      	ldr	r3, [pc, #48]	; (800914c <prvCheckTasksWaitingTermination+0x50>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3b01      	subs	r3, #1
 8009120:	4a0a      	ldr	r2, [pc, #40]	; (800914c <prvCheckTasksWaitingTermination+0x50>)
 8009122:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009124:	4b0a      	ldr	r3, [pc, #40]	; (8009150 <prvCheckTasksWaitingTermination+0x54>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	3b01      	subs	r3, #1
 800912a:	4a09      	ldr	r2, [pc, #36]	; (8009150 <prvCheckTasksWaitingTermination+0x54>)
 800912c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800912e:	f000 fbcd 	bl	80098cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f80e 	bl	8009154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009138:	4b05      	ldr	r3, [pc, #20]	; (8009150 <prvCheckTasksWaitingTermination+0x54>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e1      	bne.n	8009104 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	200002e4 	.word	0x200002e4
 800914c:	20000310 	.word	0x20000310
 8009150:	200002f8 	.word	0x200002f8

08009154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	4618      	mov	r0, r3
 8009162:	f000 fd6b 	bl	8009c3c <vPortFree>
			vPortFree( pxTCB );
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fd68 	bl	8009c3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800917a:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <prvResetNextTaskUnblockTime+0x44>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <prvResetNextTaskUnblockTime+0x14>
 8009184:	2301      	movs	r3, #1
 8009186:	e000      	b.n	800918a <prvResetNextTaskUnblockTime+0x16>
 8009188:	2300      	movs	r3, #0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <prvResetNextTaskUnblockTime+0x48>)
 8009190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009194:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009196:	e008      	b.n	80091aa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009198:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <prvResetNextTaskUnblockTime+0x44>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	4a05      	ldr	r2, [pc, #20]	; (80091bc <prvResetNextTaskUnblockTime+0x48>)
 80091a8:	6013      	str	r3, [r2, #0]
}
 80091aa:	bf00      	nop
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	200002c8 	.word	0x200002c8
 80091bc:	20000330 	.word	0x20000330

080091c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80091c6:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <xTaskGetSchedulerState+0x34>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d102      	bne.n	80091d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80091ce:	2301      	movs	r3, #1
 80091d0:	607b      	str	r3, [r7, #4]
 80091d2:	e008      	b.n	80091e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091d4:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <xTaskGetSchedulerState+0x38>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d102      	bne.n	80091e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80091dc:	2302      	movs	r3, #2
 80091de:	607b      	str	r3, [r7, #4]
 80091e0:	e001      	b.n	80091e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80091e2:	2300      	movs	r3, #0
 80091e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80091e6:	687b      	ldr	r3, [r7, #4]
	}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	2000031c 	.word	0x2000031c
 80091f8:	20000338 	.word	0x20000338

080091fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d06e      	beq.n	80092f0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009216:	4b39      	ldr	r3, [pc, #228]	; (80092fc <xTaskPriorityInherit+0x100>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921c:	429a      	cmp	r2, r3
 800921e:	d25e      	bcs.n	80092de <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	2b00      	cmp	r3, #0
 8009226:	db06      	blt.n	8009236 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009228:	4b34      	ldr	r3, [pc, #208]	; (80092fc <xTaskPriorityInherit+0x100>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922e:	f1c3 0207 	rsb	r2, r3, #7
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	6959      	ldr	r1, [r3, #20]
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923e:	4613      	mov	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4a2e      	ldr	r2, [pc, #184]	; (8009300 <xTaskPriorityInherit+0x104>)
 8009248:	4413      	add	r3, r2
 800924a:	4299      	cmp	r1, r3
 800924c:	d101      	bne.n	8009252 <xTaskPriorityInherit+0x56>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <xTaskPriorityInherit+0x58>
 8009252:	2300      	movs	r3, #0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d03a      	beq.n	80092ce <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	3304      	adds	r3, #4
 800925c:	4618      	mov	r0, r3
 800925e:	f7fe fe03 	bl	8007e68 <uxListRemove>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d115      	bne.n	8009294 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800926c:	4924      	ldr	r1, [pc, #144]	; (8009300 <xTaskPriorityInherit+0x104>)
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	440b      	add	r3, r1
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10a      	bne.n	8009294 <xTaskPriorityInherit+0x98>
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009282:	2201      	movs	r2, #1
 8009284:	fa02 f303 	lsl.w	r3, r2, r3
 8009288:	43da      	mvns	r2, r3
 800928a:	4b1e      	ldr	r3, [pc, #120]	; (8009304 <xTaskPriorityInherit+0x108>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4013      	ands	r3, r2
 8009290:	4a1c      	ldr	r2, [pc, #112]	; (8009304 <xTaskPriorityInherit+0x108>)
 8009292:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009294:	4b19      	ldr	r3, [pc, #100]	; (80092fc <xTaskPriorityInherit+0x100>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	2201      	movs	r2, #1
 80092a4:	409a      	lsls	r2, r3
 80092a6:	4b17      	ldr	r3, [pc, #92]	; (8009304 <xTaskPriorityInherit+0x108>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	4a15      	ldr	r2, [pc, #84]	; (8009304 <xTaskPriorityInherit+0x108>)
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b4:	4613      	mov	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4a10      	ldr	r2, [pc, #64]	; (8009300 <xTaskPriorityInherit+0x104>)
 80092be:	441a      	add	r2, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	3304      	adds	r3, #4
 80092c4:	4619      	mov	r1, r3
 80092c6:	4610      	mov	r0, r2
 80092c8:	f7fe fd71 	bl	8007dae <vListInsertEnd>
 80092cc:	e004      	b.n	80092d8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092ce:	4b0b      	ldr	r3, [pc, #44]	; (80092fc <xTaskPriorityInherit+0x100>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	e008      	b.n	80092f0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092e2:	4b06      	ldr	r3, [pc, #24]	; (80092fc <xTaskPriorityInherit+0x100>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d201      	bcs.n	80092f0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092f0:	68fb      	ldr	r3, [r7, #12]
	}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000210 	.word	0x20000210
 8009300:	20000214 	.word	0x20000214
 8009304:	20000318 	.word	0x20000318

08009308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d070      	beq.n	8009400 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800931e:	4b3b      	ldr	r3, [pc, #236]	; (800940c <xTaskPriorityDisinherit+0x104>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	429a      	cmp	r2, r3
 8009326:	d00b      	beq.n	8009340 <xTaskPriorityDisinherit+0x38>
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	b672      	cpsid	i
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	b662      	cpsie	i
 800933c:	60fb      	str	r3, [r7, #12]
 800933e:	e7fe      	b.n	800933e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10b      	bne.n	8009360 <xTaskPriorityDisinherit+0x58>
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	b672      	cpsid	i
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	b662      	cpsie	i
 800935c:	60bb      	str	r3, [r7, #8]
 800935e:	e7fe      	b.n	800935e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009364:	1e5a      	subs	r2, r3, #1
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009372:	429a      	cmp	r2, r3
 8009374:	d044      	beq.n	8009400 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800937a:	2b00      	cmp	r3, #0
 800937c:	d140      	bne.n	8009400 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	3304      	adds	r3, #4
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fd70 	bl	8007e68 <uxListRemove>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d115      	bne.n	80093ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	491f      	ldr	r1, [pc, #124]	; (8009410 <xTaskPriorityDisinherit+0x108>)
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <xTaskPriorityDisinherit+0xb2>
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	2201      	movs	r2, #1
 80093aa:	fa02 f303 	lsl.w	r3, r2, r3
 80093ae:	43da      	mvns	r2, r3
 80093b0:	4b18      	ldr	r3, [pc, #96]	; (8009414 <xTaskPriorityDisinherit+0x10c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4013      	ands	r3, r2
 80093b6:	4a17      	ldr	r2, [pc, #92]	; (8009414 <xTaskPriorityDisinherit+0x10c>)
 80093b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	f1c3 0207 	rsb	r2, r3, #7
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d2:	2201      	movs	r2, #1
 80093d4:	409a      	lsls	r2, r3
 80093d6:	4b0f      	ldr	r3, [pc, #60]	; (8009414 <xTaskPriorityDisinherit+0x10c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4313      	orrs	r3, r2
 80093dc:	4a0d      	ldr	r2, [pc, #52]	; (8009414 <xTaskPriorityDisinherit+0x10c>)
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4a08      	ldr	r2, [pc, #32]	; (8009410 <xTaskPriorityDisinherit+0x108>)
 80093ee:	441a      	add	r2, r3
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	3304      	adds	r3, #4
 80093f4:	4619      	mov	r1, r3
 80093f6:	4610      	mov	r0, r2
 80093f8:	f7fe fcd9 	bl	8007dae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80093fc:	2301      	movs	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009400:	697b      	ldr	r3, [r7, #20]
	}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000210 	.word	0x20000210
 8009410:	20000214 	.word	0x20000214
 8009414:	20000318 	.word	0x20000318

08009418 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b088      	sub	sp, #32
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009426:	2301      	movs	r3, #1
 8009428:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 808a 	beq.w	8009546 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10b      	bne.n	8009452 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	b672      	cpsid	i
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	b662      	cpsie	i
 800944e:	60fb      	str	r3, [r7, #12]
 8009450:	e7fe      	b.n	8009450 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	429a      	cmp	r2, r3
 800945a:	d902      	bls.n	8009462 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e002      	b.n	8009468 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009466:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	69fa      	ldr	r2, [r7, #28]
 800946e:	429a      	cmp	r2, r3
 8009470:	d069      	beq.n	8009546 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	429a      	cmp	r2, r3
 800947a:	d164      	bne.n	8009546 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800947c:	4b34      	ldr	r3, [pc, #208]	; (8009550 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	429a      	cmp	r2, r3
 8009484:	d10b      	bne.n	800949e <vTaskPriorityDisinheritAfterTimeout+0x86>
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	b672      	cpsid	i
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	b662      	cpsie	i
 800949a:	60bb      	str	r3, [r7, #8]
 800949c:	e7fe      	b.n	800949c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	69fa      	ldr	r2, [r7, #28]
 80094a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	db04      	blt.n	80094bc <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	f1c3 0207 	rsb	r2, r3, #7
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	6959      	ldr	r1, [r3, #20]
 80094c0:	693a      	ldr	r2, [r7, #16]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4a22      	ldr	r2, [pc, #136]	; (8009554 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80094cc:	4413      	add	r3, r2
 80094ce:	4299      	cmp	r1, r3
 80094d0:	d101      	bne.n	80094d6 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 80094d6:	2300      	movs	r3, #0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d034      	beq.n	8009546 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	3304      	adds	r3, #4
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fe fcc1 	bl	8007e68 <uxListRemove>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d115      	bne.n	8009518 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f0:	4918      	ldr	r1, [pc, #96]	; (8009554 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80094f2:	4613      	mov	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	440b      	add	r3, r1
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009506:	2201      	movs	r2, #1
 8009508:	fa02 f303 	lsl.w	r3, r2, r3
 800950c:	43da      	mvns	r2, r3
 800950e:	4b12      	ldr	r3, [pc, #72]	; (8009558 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4013      	ands	r3, r2
 8009514:	4a10      	ldr	r2, [pc, #64]	; (8009558 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8009516:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951c:	2201      	movs	r2, #1
 800951e:	409a      	lsls	r2, r3
 8009520:	4b0d      	ldr	r3, [pc, #52]	; (8009558 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4313      	orrs	r3, r2
 8009526:	4a0c      	ldr	r2, [pc, #48]	; (8009558 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8009528:	6013      	str	r3, [r2, #0]
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4a07      	ldr	r2, [pc, #28]	; (8009554 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009538:	441a      	add	r2, r3
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	3304      	adds	r3, #4
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f7fe fc34 	bl	8007dae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009546:	bf00      	nop
 8009548:	3720      	adds	r7, #32
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000210 	.word	0x20000210
 8009554:	20000214 	.word	0x20000214
 8009558:	20000318 	.word	0x20000318

0800955c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <pvTaskIncrementMutexHeldCount+0x24>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d004      	beq.n	8009572 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <pvTaskIncrementMutexHeldCount+0x24>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800956e:	3201      	adds	r2, #1
 8009570:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009572:	4b03      	ldr	r3, [pc, #12]	; (8009580 <pvTaskIncrementMutexHeldCount+0x24>)
 8009574:	681b      	ldr	r3, [r3, #0]
	}
 8009576:	4618      	mov	r0, r3
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	20000210 	.word	0x20000210

08009584 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800958e:	4b29      	ldr	r3, [pc, #164]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009594:	4b28      	ldr	r3, [pc, #160]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3304      	adds	r3, #4
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe fc64 	bl	8007e68 <uxListRemove>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10b      	bne.n	80095be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80095a6:	4b24      	ldr	r3, [pc, #144]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ac:	2201      	movs	r2, #1
 80095ae:	fa02 f303 	lsl.w	r3, r2, r3
 80095b2:	43da      	mvns	r2, r3
 80095b4:	4b21      	ldr	r3, [pc, #132]	; (800963c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4013      	ands	r3, r2
 80095ba:	4a20      	ldr	r2, [pc, #128]	; (800963c <prvAddCurrentTaskToDelayedList+0xb8>)
 80095bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095c4:	d10a      	bne.n	80095dc <prvAddCurrentTaskToDelayedList+0x58>
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d007      	beq.n	80095dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095cc:	4b1a      	ldr	r3, [pc, #104]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	3304      	adds	r3, #4
 80095d2:	4619      	mov	r1, r3
 80095d4:	481a      	ldr	r0, [pc, #104]	; (8009640 <prvAddCurrentTaskToDelayedList+0xbc>)
 80095d6:	f7fe fbea 	bl	8007dae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095da:	e026      	b.n	800962a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4413      	add	r3, r2
 80095e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095e4:	4b14      	ldr	r3, [pc, #80]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d209      	bcs.n	8009608 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f4:	4b13      	ldr	r3, [pc, #76]	; (8009644 <prvAddCurrentTaskToDelayedList+0xc0>)
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	4b0f      	ldr	r3, [pc, #60]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	3304      	adds	r3, #4
 80095fe:	4619      	mov	r1, r3
 8009600:	4610      	mov	r0, r2
 8009602:	f7fe fbf8 	bl	8007df6 <vListInsert>
}
 8009606:	e010      	b.n	800962a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009608:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <prvAddCurrentTaskToDelayedList+0xc4>)
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	3304      	adds	r3, #4
 8009612:	4619      	mov	r1, r3
 8009614:	4610      	mov	r0, r2
 8009616:	f7fe fbee 	bl	8007df6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800961a:	4b0c      	ldr	r3, [pc, #48]	; (800964c <prvAddCurrentTaskToDelayedList+0xc8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	429a      	cmp	r2, r3
 8009622:	d202      	bcs.n	800962a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009624:	4a09      	ldr	r2, [pc, #36]	; (800964c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6013      	str	r3, [r2, #0]
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	20000314 	.word	0x20000314
 8009638:	20000210 	.word	0x20000210
 800963c:	20000318 	.word	0x20000318
 8009640:	200002fc 	.word	0x200002fc
 8009644:	200002cc 	.word	0x200002cc
 8009648:	200002c8 	.word	0x200002c8
 800964c:	20000330 	.word	0x20000330

08009650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3b04      	subs	r3, #4
 8009660:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3b04      	subs	r3, #4
 800966e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	f023 0201 	bic.w	r2, r3, #1
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3b04      	subs	r3, #4
 800967e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009680:	4a0c      	ldr	r2, [pc, #48]	; (80096b4 <pxPortInitialiseStack+0x64>)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3b14      	subs	r3, #20
 800968a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3b04      	subs	r3, #4
 8009696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f06f 0202 	mvn.w	r2, #2
 800969e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3b20      	subs	r3, #32
 80096a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096a6:	68fb      	ldr	r3, [r7, #12]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3714      	adds	r7, #20
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	080096b9 	.word	0x080096b9

080096b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096c2:	4b13      	ldr	r3, [pc, #76]	; (8009710 <prvTaskExitError+0x58>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096ca:	d00b      	beq.n	80096e4 <prvTaskExitError+0x2c>
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	b672      	cpsid	i
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	b662      	cpsie	i
 80096e0:	60fb      	str	r3, [r7, #12]
 80096e2:	e7fe      	b.n	80096e2 <prvTaskExitError+0x2a>
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	b672      	cpsid	i
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	b662      	cpsie	i
 80096f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096fa:	bf00      	nop
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0fc      	beq.n	80096fc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009702:	bf00      	nop
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	20000114 	.word	0x20000114
	...

08009720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009720:	4b07      	ldr	r3, [pc, #28]	; (8009740 <pxCurrentTCBConst2>)
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f380 8809 	msr	PSP, r0
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f380 8811 	msr	BASEPRI, r0
 800973a:	4770      	bx	lr
 800973c:	f3af 8000 	nop.w

08009740 <pxCurrentTCBConst2>:
 8009740:	20000210 	.word	0x20000210
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009748:	4808      	ldr	r0, [pc, #32]	; (800976c <prvPortStartFirstTask+0x24>)
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	f380 8808 	msr	MSP, r0
 8009752:	f04f 0000 	mov.w	r0, #0
 8009756:	f380 8814 	msr	CONTROL, r0
 800975a:	b662      	cpsie	i
 800975c:	b661      	cpsie	f
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	df00      	svc	0
 8009768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800976a:	bf00      	nop
 800976c:	e000ed08 	.word	0xe000ed08

08009770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009776:	4b36      	ldr	r3, [pc, #216]	; (8009850 <xPortStartScheduler+0xe0>)
 8009778:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	b2db      	uxtb	r3, r3
 8009780:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	22ff      	movs	r2, #255	; 0xff
 8009786:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009798:	b2da      	uxtb	r2, r3
 800979a:	4b2e      	ldr	r3, [pc, #184]	; (8009854 <xPortStartScheduler+0xe4>)
 800979c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800979e:	4b2e      	ldr	r3, [pc, #184]	; (8009858 <xPortStartScheduler+0xe8>)
 80097a0:	2207      	movs	r2, #7
 80097a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097a4:	e009      	b.n	80097ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80097a6:	4b2c      	ldr	r3, [pc, #176]	; (8009858 <xPortStartScheduler+0xe8>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3b01      	subs	r3, #1
 80097ac:	4a2a      	ldr	r2, [pc, #168]	; (8009858 <xPortStartScheduler+0xe8>)
 80097ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097ba:	78fb      	ldrb	r3, [r7, #3]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c2:	2b80      	cmp	r3, #128	; 0x80
 80097c4:	d0ef      	beq.n	80097a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097c6:	4b24      	ldr	r3, [pc, #144]	; (8009858 <xPortStartScheduler+0xe8>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f1c3 0307 	rsb	r3, r3, #7
 80097ce:	2b04      	cmp	r3, #4
 80097d0:	d00b      	beq.n	80097ea <xPortStartScheduler+0x7a>
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	b672      	cpsid	i
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	b662      	cpsie	i
 80097e6:	60bb      	str	r3, [r7, #8]
 80097e8:	e7fe      	b.n	80097e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097ea:	4b1b      	ldr	r3, [pc, #108]	; (8009858 <xPortStartScheduler+0xe8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	021b      	lsls	r3, r3, #8
 80097f0:	4a19      	ldr	r2, [pc, #100]	; (8009858 <xPortStartScheduler+0xe8>)
 80097f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097f4:	4b18      	ldr	r3, [pc, #96]	; (8009858 <xPortStartScheduler+0xe8>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097fc:	4a16      	ldr	r2, [pc, #88]	; (8009858 <xPortStartScheduler+0xe8>)
 80097fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	b2da      	uxtb	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009808:	4b14      	ldr	r3, [pc, #80]	; (800985c <xPortStartScheduler+0xec>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a13      	ldr	r2, [pc, #76]	; (800985c <xPortStartScheduler+0xec>)
 800980e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009812:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009814:	4b11      	ldr	r3, [pc, #68]	; (800985c <xPortStartScheduler+0xec>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a10      	ldr	r2, [pc, #64]	; (800985c <xPortStartScheduler+0xec>)
 800981a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800981e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009820:	f000 f8d4 	bl	80099cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009824:	4b0e      	ldr	r3, [pc, #56]	; (8009860 <xPortStartScheduler+0xf0>)
 8009826:	2200      	movs	r2, #0
 8009828:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800982a:	f000 f8f3 	bl	8009a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800982e:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <xPortStartScheduler+0xf4>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a0c      	ldr	r2, [pc, #48]	; (8009864 <xPortStartScheduler+0xf4>)
 8009834:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009838:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800983a:	f7ff ff85 	bl	8009748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800983e:	f7ff fa99 	bl	8008d74 <vTaskSwitchContext>
	prvTaskExitError();
 8009842:	f7ff ff39 	bl	80096b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	e000e400 	.word	0xe000e400
 8009854:	2000033c 	.word	0x2000033c
 8009858:	20000340 	.word	0x20000340
 800985c:	e000ed20 	.word	0xe000ed20
 8009860:	20000114 	.word	0x20000114
 8009864:	e000ef34 	.word	0xe000ef34

08009868 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	b672      	cpsid	i
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	b662      	cpsie	i
 8009882:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009884:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <vPortEnterCritical+0x5c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3301      	adds	r3, #1
 800988a:	4a0e      	ldr	r2, [pc, #56]	; (80098c4 <vPortEnterCritical+0x5c>)
 800988c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800988e:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <vPortEnterCritical+0x5c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d110      	bne.n	80098b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009896:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <vPortEnterCritical+0x60>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <vPortEnterCritical+0x50>
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	b672      	cpsid	i
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	b662      	cpsie	i
 80098b4:	603b      	str	r3, [r7, #0]
 80098b6:	e7fe      	b.n	80098b6 <vPortEnterCritical+0x4e>
	}
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	20000114 	.word	0x20000114
 80098c8:	e000ed04 	.word	0xe000ed04

080098cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098d2:	4b12      	ldr	r3, [pc, #72]	; (800991c <vPortExitCritical+0x50>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10b      	bne.n	80098f2 <vPortExitCritical+0x26>
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	b672      	cpsid	i
 80098e0:	f383 8811 	msr	BASEPRI, r3
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	b662      	cpsie	i
 80098ee:	607b      	str	r3, [r7, #4]
 80098f0:	e7fe      	b.n	80098f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80098f2:	4b0a      	ldr	r3, [pc, #40]	; (800991c <vPortExitCritical+0x50>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	4a08      	ldr	r2, [pc, #32]	; (800991c <vPortExitCritical+0x50>)
 80098fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098fc:	4b07      	ldr	r3, [pc, #28]	; (800991c <vPortExitCritical+0x50>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d104      	bne.n	800990e <vPortExitCritical+0x42>
 8009904:	2300      	movs	r3, #0
 8009906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	20000114 	.word	0x20000114

08009920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009920:	f3ef 8009 	mrs	r0, PSP
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	4b15      	ldr	r3, [pc, #84]	; (8009980 <pxCurrentTCBConst>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	f01e 0f10 	tst.w	lr, #16
 8009930:	bf08      	it	eq
 8009932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993a:	6010      	str	r0, [r2, #0]
 800993c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009944:	b672      	cpsid	i
 8009946:	f380 8811 	msr	BASEPRI, r0
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	b662      	cpsie	i
 8009954:	f7ff fa0e 	bl	8008d74 <vTaskSwitchContext>
 8009958:	f04f 0000 	mov.w	r0, #0
 800995c:	f380 8811 	msr	BASEPRI, r0
 8009960:	bc09      	pop	{r0, r3}
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	f01e 0f10 	tst.w	lr, #16
 800996e:	bf08      	it	eq
 8009970:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009974:	f380 8809 	msr	PSP, r0
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop

08009980 <pxCurrentTCBConst>:
 8009980:	20000210 	.word	0x20000210
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	b672      	cpsid	i
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	b662      	cpsie	i
 80099a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099a4:	f7ff f928 	bl	8008bf8 <xTaskIncrementTick>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d003      	beq.n	80099b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ae:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <SysTick_Handler+0x40>)
 80099b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	2300      	movs	r3, #0
 80099b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80099c0:	bf00      	nop
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	e000ed04 	.word	0xe000ed04

080099cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099cc:	b480      	push	{r7}
 80099ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099d0:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <vPortSetupTimerInterrupt+0x34>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099d6:	4b0b      	ldr	r3, [pc, #44]	; (8009a04 <vPortSetupTimerInterrupt+0x38>)
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099dc:	4b0a      	ldr	r3, [pc, #40]	; (8009a08 <vPortSetupTimerInterrupt+0x3c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a0a      	ldr	r2, [pc, #40]	; (8009a0c <vPortSetupTimerInterrupt+0x40>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	099b      	lsrs	r3, r3, #6
 80099e8:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <vPortSetupTimerInterrupt+0x44>)
 80099ea:	3b01      	subs	r3, #1
 80099ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ee:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <vPortSetupTimerInterrupt+0x34>)
 80099f0:	2207      	movs	r2, #7
 80099f2:	601a      	str	r2, [r3, #0]
}
 80099f4:	bf00      	nop
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	e000e010 	.word	0xe000e010
 8009a04:	e000e018 	.word	0xe000e018
 8009a08:	20000118 	.word	0x20000118
 8009a0c:	10624dd3 	.word	0x10624dd3
 8009a10:	e000e014 	.word	0xe000e014

08009a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a24 <vPortEnableVFP+0x10>
 8009a18:	6801      	ldr	r1, [r0, #0]
 8009a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a1e:	6001      	str	r1, [r0, #0]
 8009a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a22:	bf00      	nop
 8009a24:	e000ed88 	.word	0xe000ed88

08009a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a2e:	f3ef 8305 	mrs	r3, IPSR
 8009a32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b0f      	cmp	r3, #15
 8009a38:	d915      	bls.n	8009a66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a3a:	4a18      	ldr	r2, [pc, #96]	; (8009a9c <vPortValidateInterruptPriority+0x74>)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	4413      	add	r3, r2
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a44:	4b16      	ldr	r3, [pc, #88]	; (8009aa0 <vPortValidateInterruptPriority+0x78>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	7afa      	ldrb	r2, [r7, #11]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d20b      	bcs.n	8009a66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	b672      	cpsid	i
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	b662      	cpsie	i
 8009a62:	607b      	str	r3, [r7, #4]
 8009a64:	e7fe      	b.n	8009a64 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a66:	4b0f      	ldr	r3, [pc, #60]	; (8009aa4 <vPortValidateInterruptPriority+0x7c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009a6e:	4b0e      	ldr	r3, [pc, #56]	; (8009aa8 <vPortValidateInterruptPriority+0x80>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d90b      	bls.n	8009a8e <vPortValidateInterruptPriority+0x66>
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	b672      	cpsid	i
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	b662      	cpsie	i
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	e7fe      	b.n	8009a8c <vPortValidateInterruptPriority+0x64>
	}
 8009a8e:	bf00      	nop
 8009a90:	3714      	adds	r7, #20
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	e000e3f0 	.word	0xe000e3f0
 8009aa0:	2000033c 	.word	0x2000033c
 8009aa4:	e000ed0c 	.word	0xe000ed0c
 8009aa8:	20000340 	.word	0x20000340

08009aac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b08a      	sub	sp, #40	; 0x28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ab8:	f7fe ffe0 	bl	8008a7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009abc:	4b5a      	ldr	r3, [pc, #360]	; (8009c28 <pvPortMalloc+0x17c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ac4:	f000 f916 	bl	8009cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ac8:	4b58      	ldr	r3, [pc, #352]	; (8009c2c <pvPortMalloc+0x180>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4013      	ands	r3, r2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f040 8090 	bne.w	8009bf6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01e      	beq.n	8009b1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009adc:	2208      	movs	r2, #8
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d015      	beq.n	8009b1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f023 0307 	bic.w	r3, r3, #7
 8009af4:	3308      	adds	r3, #8
 8009af6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d00b      	beq.n	8009b1a <pvPortMalloc+0x6e>
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	b672      	cpsid	i
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	b662      	cpsie	i
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	e7fe      	b.n	8009b18 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d06a      	beq.n	8009bf6 <pvPortMalloc+0x14a>
 8009b20:	4b43      	ldr	r3, [pc, #268]	; (8009c30 <pvPortMalloc+0x184>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d865      	bhi.n	8009bf6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b2a:	4b42      	ldr	r3, [pc, #264]	; (8009c34 <pvPortMalloc+0x188>)
 8009b2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b2e:	4b41      	ldr	r3, [pc, #260]	; (8009c34 <pvPortMalloc+0x188>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b34:	e004      	b.n	8009b40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d903      	bls.n	8009b52 <pvPortMalloc+0xa6>
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d1f1      	bne.n	8009b36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b52:	4b35      	ldr	r3, [pc, #212]	; (8009c28 <pvPortMalloc+0x17c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d04c      	beq.n	8009bf6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2208      	movs	r2, #8
 8009b62:	4413      	add	r3, r2
 8009b64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	685a      	ldr	r2, [r3, #4]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	1ad2      	subs	r2, r2, r3
 8009b76:	2308      	movs	r3, #8
 8009b78:	005b      	lsls	r3, r3, #1
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d920      	bls.n	8009bc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4413      	add	r3, r2
 8009b84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <pvPortMalloc+0xfc>
 8009b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b94:	b672      	cpsid	i
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	b662      	cpsie	i
 8009ba4:	613b      	str	r3, [r7, #16]
 8009ba6:	e7fe      	b.n	8009ba6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	1ad2      	subs	r2, r2, r3
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bba:	69b8      	ldr	r0, [r7, #24]
 8009bbc:	f000 f8fc 	bl	8009db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bc0:	4b1b      	ldr	r3, [pc, #108]	; (8009c30 <pvPortMalloc+0x184>)
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	4a19      	ldr	r2, [pc, #100]	; (8009c30 <pvPortMalloc+0x184>)
 8009bcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bce:	4b18      	ldr	r3, [pc, #96]	; (8009c30 <pvPortMalloc+0x184>)
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	4b19      	ldr	r3, [pc, #100]	; (8009c38 <pvPortMalloc+0x18c>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d203      	bcs.n	8009be2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bda:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <pvPortMalloc+0x184>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a16      	ldr	r2, [pc, #88]	; (8009c38 <pvPortMalloc+0x18c>)
 8009be0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	4b11      	ldr	r3, [pc, #68]	; (8009c2c <pvPortMalloc+0x180>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	431a      	orrs	r2, r3
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bf6:	f7fe ff4f 	bl	8008a98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00b      	beq.n	8009c1c <pvPortMalloc+0x170>
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	b672      	cpsid	i
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	b662      	cpsie	i
 8009c18:	60fb      	str	r3, [r7, #12]
 8009c1a:	e7fe      	b.n	8009c1a <pvPortMalloc+0x16e>
	return pvReturn;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3728      	adds	r7, #40	; 0x28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20004338 	.word	0x20004338
 8009c2c:	20004344 	.word	0x20004344
 8009c30:	2000433c 	.word	0x2000433c
 8009c34:	20004330 	.word	0x20004330
 8009c38:	20004340 	.word	0x20004340

08009c3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d04a      	beq.n	8009ce4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c4e:	2308      	movs	r3, #8
 8009c50:	425b      	negs	r3, r3
 8009c52:	697a      	ldr	r2, [r7, #20]
 8009c54:	4413      	add	r3, r2
 8009c56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	4b22      	ldr	r3, [pc, #136]	; (8009cec <vPortFree+0xb0>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4013      	ands	r3, r2
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10b      	bne.n	8009c82 <vPortFree+0x46>
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	b672      	cpsid	i
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	b662      	cpsie	i
 8009c7e:	60fb      	str	r3, [r7, #12]
 8009c80:	e7fe      	b.n	8009c80 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00b      	beq.n	8009ca2 <vPortFree+0x66>
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	b672      	cpsid	i
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	b662      	cpsie	i
 8009c9e:	60bb      	str	r3, [r7, #8]
 8009ca0:	e7fe      	b.n	8009ca0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	685a      	ldr	r2, [r3, #4]
 8009ca6:	4b11      	ldr	r3, [pc, #68]	; (8009cec <vPortFree+0xb0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4013      	ands	r3, r2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d019      	beq.n	8009ce4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d115      	bne.n	8009ce4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685a      	ldr	r2, [r3, #4]
 8009cbc:	4b0b      	ldr	r3, [pc, #44]	; (8009cec <vPortFree+0xb0>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	401a      	ands	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cc8:	f7fe fed8 	bl	8008a7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <vPortFree+0xb4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	4a06      	ldr	r2, [pc, #24]	; (8009cf0 <vPortFree+0xb4>)
 8009cd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cda:	6938      	ldr	r0, [r7, #16]
 8009cdc:	f000 f86c 	bl	8009db8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ce0:	f7fe feda 	bl	8008a98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ce4:	bf00      	nop
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20004344 	.word	0x20004344
 8009cf0:	2000433c 	.word	0x2000433c

08009cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cfa:	f643 73ec 	movw	r3, #16364	; 0x3fec
 8009cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d00:	4b27      	ldr	r3, [pc, #156]	; (8009da0 <prvHeapInit+0xac>)
 8009d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d00c      	beq.n	8009d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3307      	adds	r3, #7
 8009d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0307 	bic.w	r3, r3, #7
 8009d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	4a1f      	ldr	r2, [pc, #124]	; (8009da0 <prvHeapInit+0xac>)
 8009d24:	4413      	add	r3, r2
 8009d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <prvHeapInit+0xb0>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d32:	4b1c      	ldr	r3, [pc, #112]	; (8009da4 <prvHeapInit+0xb0>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d40:	2208      	movs	r2, #8
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0307 	bic.w	r3, r3, #7
 8009d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <prvHeapInit+0xb4>)
 8009d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d56:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <prvHeapInit+0xb4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <prvHeapInit+0xb4>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <prvHeapInit+0xb4>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a0a      	ldr	r2, [pc, #40]	; (8009dac <prvHeapInit+0xb8>)
 8009d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4a09      	ldr	r2, [pc, #36]	; (8009db0 <prvHeapInit+0xbc>)
 8009d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d8c:	4b09      	ldr	r3, [pc, #36]	; (8009db4 <prvHeapInit+0xc0>)
 8009d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d92:	601a      	str	r2, [r3, #0]
}
 8009d94:	bf00      	nop
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20000344 	.word	0x20000344
 8009da4:	20004330 	.word	0x20004330
 8009da8:	20004338 	.word	0x20004338
 8009dac:	20004340 	.word	0x20004340
 8009db0:	2000433c 	.word	0x2000433c
 8009db4:	20004344 	.word	0x20004344

08009db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009db8:	b480      	push	{r7}
 8009dba:	b085      	sub	sp, #20
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dc0:	4b28      	ldr	r3, [pc, #160]	; (8009e64 <prvInsertBlockIntoFreeList+0xac>)
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	e002      	b.n	8009dcc <prvInsertBlockIntoFreeList+0x14>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d8f7      	bhi.n	8009dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d108      	bne.n	8009dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	441a      	add	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	441a      	add	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d118      	bne.n	8009e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d00d      	beq.n	8009e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685a      	ldr	r2, [r3, #4]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	441a      	add	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	e008      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <prvInsertBlockIntoFreeList+0xb0>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	e003      	b.n	8009e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d002      	beq.n	8009e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e56:	bf00      	nop
 8009e58:	3714      	adds	r7, #20
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop
 8009e64:	20004330 	.word	0x20004330
 8009e68:	20004338 	.word	0x20004338

08009e6c <TransmitTask>:
uint8_t* currentBuffer;
uint16_t currentPosition;


void TransmitTask(void *params)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	uint8_t curBuf = 1;
 8009e74:	2301      	movs	r3, #1
 8009e76:	75fb      	strb	r3, [r7, #23]
	currentPosition = 0;
 8009e78:	4b28      	ldr	r3, [pc, #160]	; (8009f1c <TransmitTask+0xb0>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	801a      	strh	r2, [r3, #0]
	currentBuffer = &transmitBuffer1[0];
 8009e7e:	4b28      	ldr	r3, [pc, #160]	; (8009f20 <TransmitTask+0xb4>)
 8009e80:	4a28      	ldr	r2, [pc, #160]	; (8009f24 <TransmitTask+0xb8>)
 8009e82:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(currentPosition >= TRANSMIT_BUFFER_LENGTH-2)
 8009e84:	4b25      	ldr	r3, [pc, #148]	; (8009f1c <TransmitTask+0xb0>)
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d9f9      	bls.n	8009e84 <TransmitTask+0x18>
		{
			uint8_t *prev_buffer = currentBuffer;
 8009e90:	4b23      	ldr	r3, [pc, #140]	; (8009f20 <TransmitTask+0xb4>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	613b      	str	r3, [r7, #16]
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	b672      	cpsid	i
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	b662      	cpsie	i
 8009eaa:	60fb      	str	r3, [r7, #12]
			//uint16_t prev_position = currentPosition;
			portDISABLE_INTERRUPTS();
			if(curBuf == 1)
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d108      	bne.n	8009ec4 <TransmitTask+0x58>
			{
				curBuf = 2;
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	75fb      	strb	r3, [r7, #23]
				currentBuffer = &transmitBuffer2[0];
 8009eb6:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <TransmitTask+0xb4>)
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	; (8009f28 <TransmitTask+0xbc>)
 8009eba:	601a      	str	r2, [r3, #0]
				currentPosition = 0;
 8009ebc:	4b17      	ldr	r3, [pc, #92]	; (8009f1c <TransmitTask+0xb0>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	e007      	b.n	8009ed4 <TransmitTask+0x68>
			}
			else
			{
				curBuf = 1;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
				currentBuffer = &transmitBuffer1[0];
 8009ec8:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <TransmitTask+0xb4>)
 8009eca:	4a16      	ldr	r2, [pc, #88]	; (8009f24 <TransmitTask+0xb8>)
 8009ecc:	601a      	str	r2, [r3, #0]
				currentPosition = 0;
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <TransmitTask+0xb0>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	801a      	strh	r2, [r3, #0]
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	f383 8811 	msr	BASEPRI, r3
			}
			portENABLE_INTERRUPTS();
			// Have to make sure transmission happens before the buffers are swapped
			*(prev_buffer + TRANSMIT_BUFFER_LENGTH - 2) = '\r';
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8009ee4:	4413      	add	r3, r2
 8009ee6:	220d      	movs	r2, #13
 8009ee8:	701a      	strb	r2, [r3, #0]
			*(prev_buffer + TRANSMIT_BUFFER_LENGTH - 1) = '\n';
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8009ef0:	4413      	add	r3, r2
 8009ef2:	220a      	movs	r2, #10
 8009ef4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(USBTransmit_GPIO_Port, USBTransmit_Pin, GPIO_PIN_SET);
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009efc:	480b      	ldr	r0, [pc, #44]	; (8009f2c <TransmitTask+0xc0>)
 8009efe:	f7f7 ff69 	bl	8001dd4 <HAL_GPIO_WritePin>
			CDC_Transmit_FS(prev_buffer, TRANSMIT_BUFFER_LENGTH);
 8009f02:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8009f06:	6938      	ldr	r0, [r7, #16]
 8009f08:	f000 ffd4 	bl	800aeb4 <CDC_Transmit_FS>
			HAL_GPIO_WritePin(USBTransmit_GPIO_Port, USBTransmit_Pin, GPIO_PIN_RESET);
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f12:	4806      	ldr	r0, [pc, #24]	; (8009f2c <TransmitTask+0xc0>)
 8009f14:	f7f7 ff5e 	bl	8001dd4 <HAL_GPIO_WritePin>
		if(currentPosition >= TRANSMIT_BUFFER_LENGTH-2)
 8009f18:	e7b4      	b.n	8009e84 <TransmitTask+0x18>
 8009f1a:	bf00      	nop
 8009f1c:	20014366 	.word	0x20014366
 8009f20:	20014368 	.word	0x20014368
 8009f24:	20004368 	.word	0x20004368
 8009f28:	2001436c 	.word	0x2001436c
 8009f2c:	40021000 	.word	0x40021000

08009f30 <buttonPressTask>:
	transmitting,
	stopped
};

void buttonPressTask(void *params)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]

	uint8_t startMsg[MSG_LENGTH] = "Start \r\n";
 8009f38:	4a2d      	ldr	r2, [pc, #180]	; (8009ff0 <buttonPressTask+0xc0>)
 8009f3a:	f107 0314 	add.w	r3, r7, #20
 8009f3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f42:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t stopMsg[MSG_LENGTH] = "Stop  \r\n";
 8009f46:	4a2b      	ldr	r2, [pc, #172]	; (8009ff4 <buttonPressTask+0xc4>)
 8009f48:	f107 030c 	add.w	r3, r7, #12
 8009f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f50:	e883 0003 	stmia.w	r3, {r0, r1}
	enum state currentState = stopped;
 8009f54:	2301      	movs	r3, #1
 8009f56:	77fb      	strb	r3, [r7, #31]
	while(1)
	{
		xSemaphoreTake(buttonBinarySemph, portMAX_DELAY);
 8009f58:	4b27      	ldr	r3, [pc, #156]	; (8009ff8 <buttonPressTask+0xc8>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fe fa03 	bl	800836c <xQueueSemaphoreTake>
		if(currentState == stopped)
 8009f66:	7ffb      	ldrb	r3, [r7, #31]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d11b      	bne.n	8009fa4 <buttonPressTask+0x74>
		{
			CDC_Transmit_FS(startMsg, MSG_LENGTH);
 8009f6c:	f107 0314 	add.w	r3, r7, #20
 8009f70:	2108      	movs	r1, #8
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 ff9e 	bl	800aeb4 <CDC_Transmit_FS>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8009f78:	2201      	movs	r2, #1
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	481f      	ldr	r0, [pc, #124]	; (8009ffc <buttonPressTask+0xcc>)
 8009f7e:	f7f7 ff29 	bl	8001dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8009f82:	2201      	movs	r2, #1
 8009f84:	2180      	movs	r1, #128	; 0x80
 8009f86:	481d      	ldr	r0, [pc, #116]	; (8009ffc <buttonPressTask+0xcc>)
 8009f88:	f7f7 ff24 	bl	8001dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009f92:	481a      	ldr	r0, [pc, #104]	; (8009ffc <buttonPressTask+0xcc>)
 8009f94:	f7f7 ff1e 	bl	8001dd4 <HAL_GPIO_WritePin>
			currentState = transmitting;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	77fb      	strb	r3, [r7, #31]
			HAL_TIM_Base_Start_IT(&htim7);
 8009f9c:	4818      	ldr	r0, [pc, #96]	; (800a000 <buttonPressTask+0xd0>)
 8009f9e:	f7fa fa27 	bl	80043f0 <HAL_TIM_Base_Start_IT>
 8009fa2:	e7d9      	b.n	8009f58 <buttonPressTask+0x28>
		}
		else if(currentState == transmitting)
 8009fa4:	7ffb      	ldrb	r3, [r7, #31]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1d6      	bne.n	8009f58 <buttonPressTask+0x28>
		{
			CDC_Transmit_FS(stopMsg, MSG_LENGTH);
 8009faa:	f107 030c 	add.w	r3, r7, #12
 8009fae:	2108      	movs	r1, #8
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 ff7f 	bl	800aeb4 <CDC_Transmit_FS>
			CDC_Transmit_FS(stopMsg, MSG_LENGTH);
 8009fb6:	f107 030c 	add.w	r3, r7, #12
 8009fba:	2108      	movs	r1, #8
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 ff79 	bl	800aeb4 <CDC_Transmit_FS>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	480d      	ldr	r0, [pc, #52]	; (8009ffc <buttonPressTask+0xcc>)
 8009fc8:	f7f7 ff04 	bl	8001dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2180      	movs	r1, #128	; 0x80
 8009fd0:	480a      	ldr	r0, [pc, #40]	; (8009ffc <buttonPressTask+0xcc>)
 8009fd2:	f7f7 feff 	bl	8001dd4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009fdc:	4807      	ldr	r0, [pc, #28]	; (8009ffc <buttonPressTask+0xcc>)
 8009fde:	f7f7 fef9 	bl	8001dd4 <HAL_GPIO_WritePin>
			currentState = stopped;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	77fb      	strb	r3, [r7, #31]
			HAL_TIM_Base_Stop_IT(&htim7);
 8009fe6:	4806      	ldr	r0, [pc, #24]	; (800a000 <buttonPressTask+0xd0>)
 8009fe8:	f7fa fa2c 	bl	8004444 <HAL_TIM_Base_Stop_IT>
		xSemaphoreTake(buttonBinarySemph, portMAX_DELAY);
 8009fec:	e7b4      	b.n	8009f58 <buttonPressTask+0x28>
 8009fee:	bf00      	nop
 8009ff0:	0800c6e0 	.word	0x0800c6e0
 8009ff4:	0800c6ec 	.word	0x0800c6ec
 8009ff8:	20004350 	.word	0x20004350
 8009ffc:	40020400 	.word	0x40020400
 800a000:	20024484 	.word	0x20024484

0800a004 <toggleAllLEDs>:

#include "helperFuctions.h"
#include "main.h"

void toggleAllLEDs(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800a008:	2101      	movs	r1, #1
 800a00a:	4807      	ldr	r0, [pc, #28]	; (800a028 <toggleAllLEDs+0x24>)
 800a00c:	f7f7 fefb 	bl	8001e06 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800a010:	2180      	movs	r1, #128	; 0x80
 800a012:	4805      	ldr	r0, [pc, #20]	; (800a028 <toggleAllLEDs+0x24>)
 800a014:	f7f7 fef7 	bl	8001e06 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800a018:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a01c:	4802      	ldr	r0, [pc, #8]	; (800a028 <toggleAllLEDs+0x24>)
 800a01e:	f7f7 fef2 	bl	8001e06 <HAL_GPIO_TogglePin>
}
 800a022:	bf00      	nop
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	40020400 	.word	0x40020400

0800a02c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	BaseType_t task2creation = pdPASS;
 800a032:	2301      	movs	r3, #1
 800a034:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a036:	f7f6 fad3 	bl	80005e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a03a:	f000 f853 	bl	800a0e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a03e:	f000 f9df 	bl	800a400 <MX_GPIO_Init>
  MX_ETH_Init();
 800a042:	f000 f941 	bl	800a2c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800a046:	f000 f9ab 	bl	800a3a0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800a04a:	f000 f8db 	bl	800a204 <MX_ADC1_Init>
  MX_TIM7_Init();
 800a04e:	f000 f971 	bl	800a334 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 800a052:	f000 fe49 	bl	800ace8 <MX_USB_DEVICE_Init>
  //initialise_monitor_handles();
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  vSemaphoreCreateBinary(buttonBinarySemph);
 800a056:	2203      	movs	r2, #3
 800a058:	2100      	movs	r1, #0
 800a05a:	2001      	movs	r0, #1
 800a05c:	f7fd ff98 	bl	8007f90 <xQueueGenericCreate>
 800a060:	4602      	mov	r2, r0
 800a062:	4b18      	ldr	r3, [pc, #96]	; (800a0c4 <main+0x98>)
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	4b17      	ldr	r3, [pc, #92]	; (800a0c4 <main+0x98>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d006      	beq.n	800a07c <main+0x50>
 800a06e:	4b15      	ldr	r3, [pc, #84]	; (800a0c4 <main+0x98>)
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	2300      	movs	r3, #0
 800a074:	2200      	movs	r2, #0
 800a076:	2100      	movs	r1, #0
 800a078:	f7fd ffe4 	bl	8008044 <xQueueGenericSend>
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  //xTaskCreate(vPeriodicPrintTask, "Periodic", configMINIMAL_STACK_SIZE, NULL, 2,PeriodicPrintHandler);
  xTaskCreate(buttonPressTask, "Button", 1000, NULL, 5, buttonTaskHandler);
 800a07c:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <main+0x9c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	2305      	movs	r3, #5
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	2300      	movs	r3, #0
 800a088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a08c:	490f      	ldr	r1, [pc, #60]	; (800a0cc <main+0xa0>)
 800a08e:	4810      	ldr	r0, [pc, #64]	; (800a0d0 <main+0xa4>)
 800a090:	f7fe fb7e 	bl	8008790 <xTaskCreate>
  task2creation = xTaskCreate(TransmitTask, "ADC2USB", 1000, NULL, 4, HADCtoUSBTask);
 800a094:	4b0f      	ldr	r3, [pc, #60]	; (800a0d4 <main+0xa8>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	9301      	str	r3, [sp, #4]
 800a09a:	2304      	movs	r3, #4
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	2300      	movs	r3, #0
 800a0a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a0a4:	490c      	ldr	r1, [pc, #48]	; (800a0d8 <main+0xac>)
 800a0a6:	480d      	ldr	r0, [pc, #52]	; (800a0dc <main+0xb0>)
 800a0a8:	f7fe fb72 	bl	8008790 <xTaskCreate>
 800a0ac:	6078      	str	r0, [r7, #4]

  if(task2creation == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY) printf("Could not create task 2");
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0b4:	d102      	bne.n	800a0bc <main+0x90>
 800a0b6:	480a      	ldr	r0, [pc, #40]	; (800a0e0 <main+0xb4>)
 800a0b8:	f001 fcc6 	bl	800ba48 <iprintf>

  vTaskStartScheduler();
 800a0bc:	f7fe fc94 	bl	80089e8 <vTaskStartScheduler>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a0c0:	e7fe      	b.n	800a0c0 <main+0x94>
 800a0c2:	bf00      	nop
 800a0c4:	20004350 	.word	0x20004350
 800a0c8:	20004348 	.word	0x20004348
 800a0cc:	0800c6f8 	.word	0x0800c6f8
 800a0d0:	08009f31 	.word	0x08009f31
 800a0d4:	2000434c 	.word	0x2000434c
 800a0d8:	0800c700 	.word	0x0800c700
 800a0dc:	08009e6d 	.word	0x08009e6d
 800a0e0:	0800c708 	.word	0x0800c708

0800a0e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b0b8      	sub	sp, #224	; 0xe0
 800a0e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a0ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a0ee:	2234      	movs	r2, #52	; 0x34
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 fbf7 	bl	800b8e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a0f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	605a      	str	r2, [r3, #4]
 800a102:	609a      	str	r2, [r3, #8]
 800a104:	60da      	str	r2, [r3, #12]
 800a106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a108:	f107 0308 	add.w	r3, r7, #8
 800a10c:	2290      	movs	r2, #144	; 0x90
 800a10e:	2100      	movs	r1, #0
 800a110:	4618      	mov	r0, r3
 800a112:	f001 fbe8 	bl	800b8e6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800a116:	f7f9 f871 	bl	80031fc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a11a:	4b37      	ldr	r3, [pc, #220]	; (800a1f8 <SystemClock_Config+0x114>)
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	4a36      	ldr	r2, [pc, #216]	; (800a1f8 <SystemClock_Config+0x114>)
 800a120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a124:	6413      	str	r3, [r2, #64]	; 0x40
 800a126:	4b34      	ldr	r3, [pc, #208]	; (800a1f8 <SystemClock_Config+0x114>)
 800a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a12e:	607b      	str	r3, [r7, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800a132:	4b32      	ldr	r3, [pc, #200]	; (800a1fc <SystemClock_Config+0x118>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a13a:	4a30      	ldr	r2, [pc, #192]	; (800a1fc <SystemClock_Config+0x118>)
 800a13c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	4b2e      	ldr	r3, [pc, #184]	; (800a1fc <SystemClock_Config+0x118>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a14a:	603b      	str	r3, [r7, #0]
 800a14c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a14e:	2301      	movs	r3, #1
 800a150:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a154:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a15c:	2302      	movs	r3, #2
 800a15e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a16a:	2304      	movs	r3, #4
 800a16c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a170:	23a8      	movs	r3, #168	; 0xa8
 800a172:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a176:	2302      	movs	r3, #2
 800a178:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a17c:	2307      	movs	r3, #7
 800a17e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a182:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a186:	4618      	mov	r0, r3
 800a188:	f7f9 f848 	bl	800321c <HAL_RCC_OscConfig>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800a192:	f000 fa37 	bl	800a604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a196:	230f      	movs	r3, #15
 800a198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a19c:	2302      	movs	r3, #2
 800a19e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a1a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a1ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a1b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a1b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800a1bc:	2105      	movs	r1, #5
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7f9 fa9e 	bl	8003700 <HAL_RCC_ClockConfig>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d001      	beq.n	800a1ce <SystemClock_Config+0xea>
  {
    Error_Handler();
 800a1ca:	f000 fa1b 	bl	800a604 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800a1ce:	4b0c      	ldr	r3, [pc, #48]	; (800a200 <SystemClock_Config+0x11c>)
 800a1d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a1dc:	f107 0308 	add.w	r3, r7, #8
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7f9 fcb3 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800a1ec:	f000 fa0a 	bl	800a604 <Error_Handler>
  }
}
 800a1f0:	bf00      	nop
 800a1f2:	37e0      	adds	r7, #224	; 0xe0
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	40023800 	.word	0x40023800
 800a1fc:	40007000 	.word	0x40007000
 800a200:	00200100 	.word	0x00200100

0800a204 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
__HAL_RCC_ADC1_CLK_ENABLE();
 800a20a:	4b2b      	ldr	r3, [pc, #172]	; (800a2b8 <MX_ADC1_Init+0xb4>)
 800a20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20e:	4a2a      	ldr	r2, [pc, #168]	; (800a2b8 <MX_ADC1_Init+0xb4>)
 800a210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a214:	6453      	str	r3, [r2, #68]	; 0x44
 800a216:	4b28      	ldr	r3, [pc, #160]	; (800a2b8 <MX_ADC1_Init+0xb4>)
 800a218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21e:	607b      	str	r3, [r7, #4]
 800a220:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a222:	f107 0308 	add.w	r3, r7, #8
 800a226:	2200      	movs	r2, #0
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	605a      	str	r2, [r3, #4]
 800a22c:	609a      	str	r2, [r3, #8]
 800a22e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800a230:	4b22      	ldr	r3, [pc, #136]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a232:	4a23      	ldr	r2, [pc, #140]	; (800a2c0 <MX_ADC1_Init+0xbc>)
 800a234:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a236:	4b21      	ldr	r3, [pc, #132]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a238:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a23c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a23e:	4b1f      	ldr	r3, [pc, #124]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a240:	2200      	movs	r2, #0
 800a242:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a244:	4b1d      	ldr	r3, [pc, #116]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a246:	2200      	movs	r2, #0
 800a248:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a24a:	4b1c      	ldr	r3, [pc, #112]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a250:	4b1a      	ldr	r3, [pc, #104]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a258:	4b18      	ldr	r3, [pc, #96]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a25e:	4b17      	ldr	r3, [pc, #92]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a260:	4a18      	ldr	r2, [pc, #96]	; (800a2c4 <MX_ADC1_Init+0xc0>)
 800a262:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a264:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a266:	2200      	movs	r2, #0
 800a268:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800a26a:	4b14      	ldr	r3, [pc, #80]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a26c:	2201      	movs	r2, #1
 800a26e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a270:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a278:	4b10      	ldr	r3, [pc, #64]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a27a:	2201      	movs	r2, #1
 800a27c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a27e:	480f      	ldr	r0, [pc, #60]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a280:	f7f6 f9fe 	bl	8000680 <HAL_ADC_Init>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800a28a:	f000 f9bb 	bl	800a604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a28e:	2303      	movs	r3, #3
 800a290:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a292:	2301      	movs	r3, #1
 800a294:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a296:	2300      	movs	r3, #0
 800a298:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a29a:	f107 0308 	add.w	r3, r7, #8
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4806      	ldr	r0, [pc, #24]	; (800a2bc <MX_ADC1_Init+0xb8>)
 800a2a2:	f7f6 fc67 	bl	8000b74 <HAL_ADC_ConfigChannel>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800a2ac:	f000 f9aa 	bl	800a604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a2b0:	bf00      	nop
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	40023800 	.word	0x40023800
 800a2bc:	200243f4 	.word	0x200243f4
 800a2c0:	40012000 	.word	0x40012000
 800a2c4:	0f000001 	.word	0x0f000001

0800a2c8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800a2ce:	4b17      	ldr	r3, [pc, #92]	; (800a32c <MX_ETH_Init+0x64>)
 800a2d0:	4a17      	ldr	r2, [pc, #92]	; (800a330 <MX_ETH_Init+0x68>)
 800a2d2:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a2d4:	4b15      	ldr	r3, [pc, #84]	; (800a32c <MX_ETH_Init+0x64>)
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a2da:	4b14      	ldr	r3, [pc, #80]	; (800a32c <MX_ETH_Init+0x64>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 800a2e4:	2380      	movs	r3, #128	; 0x80
 800a2e6:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 800a2e8:	23e1      	movs	r3, #225	; 0xe1
 800a2ea:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800a2f8:	4a0c      	ldr	r2, [pc, #48]	; (800a32c <MX_ETH_Init+0x64>)
 800a2fa:	463b      	mov	r3, r7
 800a2fc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a2fe:	4b0b      	ldr	r3, [pc, #44]	; (800a32c <MX_ETH_Init+0x64>)
 800a300:	2200      	movs	r2, #0
 800a302:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a304:	4b09      	ldr	r3, [pc, #36]	; (800a32c <MX_ETH_Init+0x64>)
 800a306:	2200      	movs	r2, #0
 800a308:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a30a:	4b08      	ldr	r3, [pc, #32]	; (800a32c <MX_ETH_Init+0x64>)
 800a30c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a310:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800a312:	4806      	ldr	r0, [pc, #24]	; (800a32c <MX_ETH_Init+0x64>)
 800a314:	f7f6 ff48 	bl	80011a8 <HAL_ETH_Init>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <MX_ETH_Init+0x5a>
  {
    Error_Handler();
 800a31e:	f000 f971 	bl	800a604 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	2002443c 	.word	0x2002443c
 800a330:	40028000 	.word	0x40028000

0800a334 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a33a:	1d3b      	adds	r3, r7, #4
 800a33c:	2200      	movs	r2, #0
 800a33e:	601a      	str	r2, [r3, #0]
 800a340:	605a      	str	r2, [r3, #4]
 800a342:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800a344:	4b14      	ldr	r3, [pc, #80]	; (800a398 <MX_TIM7_Init+0x64>)
 800a346:	4a15      	ldr	r2, [pc, #84]	; (800a39c <MX_TIM7_Init+0x68>)
 800a348:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800a34a:	4b13      	ldr	r3, [pc, #76]	; (800a398 <MX_TIM7_Init+0x64>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a350:	4b11      	ldr	r3, [pc, #68]	; (800a398 <MX_TIM7_Init+0x64>)
 800a352:	2200      	movs	r2, #0
 800a354:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 453;
 800a356:	4b10      	ldr	r3, [pc, #64]	; (800a398 <MX_TIM7_Init+0x64>)
 800a358:	f240 12c5 	movw	r2, #453	; 0x1c5
 800a35c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a35e:	4b0e      	ldr	r3, [pc, #56]	; (800a398 <MX_TIM7_Init+0x64>)
 800a360:	2280      	movs	r2, #128	; 0x80
 800a362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800a364:	480c      	ldr	r0, [pc, #48]	; (800a398 <MX_TIM7_Init+0x64>)
 800a366:	f7fa f817 	bl	8004398 <HAL_TIM_Base_Init>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800a370:	f000 f948 	bl	800a604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a374:	2300      	movs	r3, #0
 800a376:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a378:	2300      	movs	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800a37c:	1d3b      	adds	r3, r7, #4
 800a37e:	4619      	mov	r1, r3
 800a380:	4805      	ldr	r0, [pc, #20]	; (800a398 <MX_TIM7_Init+0x64>)
 800a382:	f7fa fa71 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d001      	beq.n	800a390 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800a38c:	f000 f93a 	bl	800a604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800a390:	bf00      	nop
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	20024484 	.word	0x20024484
 800a39c:	40001400 	.word	0x40001400

0800a3a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a3a4:	4b14      	ldr	r3, [pc, #80]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3a6:	4a15      	ldr	r2, [pc, #84]	; (800a3fc <MX_USART3_UART_Init+0x5c>)
 800a3a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a3aa:	4b13      	ldr	r3, [pc, #76]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a3b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a3b2:	4b11      	ldr	r3, [pc, #68]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a3b8:	4b0f      	ldr	r3, [pc, #60]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a3be:	4b0e      	ldr	r3, [pc, #56]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a3c4:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3c6:	220c      	movs	r2, #12
 800a3c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a3ca:	4b0b      	ldr	r3, [pc, #44]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a3d0:	4b09      	ldr	r3, [pc, #36]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a3d6:	4b08      	ldr	r3, [pc, #32]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a3dc:	4b06      	ldr	r3, [pc, #24]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3de:	2200      	movs	r2, #0
 800a3e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a3e2:	4805      	ldr	r0, [pc, #20]	; (800a3f8 <MX_USART3_UART_Init+0x58>)
 800a3e4:	f7fa faba 	bl	800495c <HAL_UART_Init>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d001      	beq.n	800a3f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a3ee:	f000 f909 	bl	800a604 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a3f2:	bf00      	nop
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20024370 	.word	0x20024370
 800a3fc:	40004800 	.word	0x40004800

0800a400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b08e      	sub	sp, #56	; 0x38
 800a404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	605a      	str	r2, [r3, #4]
 800a410:	609a      	str	r2, [r3, #8]
 800a412:	60da      	str	r2, [r3, #12]
 800a414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a416:	4b6b      	ldr	r3, [pc, #428]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	4a6a      	ldr	r2, [pc, #424]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a41c:	f043 0304 	orr.w	r3, r3, #4
 800a420:	6313      	str	r3, [r2, #48]	; 0x30
 800a422:	4b68      	ldr	r3, [pc, #416]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	623b      	str	r3, [r7, #32]
 800a42c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a42e:	4b65      	ldr	r3, [pc, #404]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a432:	4a64      	ldr	r2, [pc, #400]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a438:	6313      	str	r3, [r2, #48]	; 0x30
 800a43a:	4b62      	ldr	r3, [pc, #392]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a442:	61fb      	str	r3, [r7, #28]
 800a444:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a446:	4b5f      	ldr	r3, [pc, #380]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	4a5e      	ldr	r2, [pc, #376]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a44c:	f043 0301 	orr.w	r3, r3, #1
 800a450:	6313      	str	r3, [r2, #48]	; 0x30
 800a452:	4b5c      	ldr	r3, [pc, #368]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	61bb      	str	r3, [r7, #24]
 800a45c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a45e:	4b59      	ldr	r3, [pc, #356]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a462:	4a58      	ldr	r2, [pc, #352]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a464:	f043 0302 	orr.w	r3, r3, #2
 800a468:	6313      	str	r3, [r2, #48]	; 0x30
 800a46a:	4b56      	ldr	r3, [pc, #344]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a476:	4b53      	ldr	r3, [pc, #332]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47a:	4a52      	ldr	r2, [pc, #328]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a47c:	f043 0320 	orr.w	r3, r3, #32
 800a480:	6313      	str	r3, [r2, #48]	; 0x30
 800a482:	4b50      	ldr	r3, [pc, #320]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	f003 0320 	and.w	r3, r3, #32
 800a48a:	613b      	str	r3, [r7, #16]
 800a48c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a48e:	4b4d      	ldr	r3, [pc, #308]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a492:	4a4c      	ldr	r2, [pc, #304]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a494:	f043 0310 	orr.w	r3, r3, #16
 800a498:	6313      	str	r3, [r2, #48]	; 0x30
 800a49a:	4b4a      	ldr	r3, [pc, #296]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49e:	f003 0310 	and.w	r3, r3, #16
 800a4a2:	60fb      	str	r3, [r7, #12]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a4a6:	4b47      	ldr	r3, [pc, #284]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4aa:	4a46      	ldr	r2, [pc, #280]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a4ac:	f043 0308 	orr.w	r3, r3, #8
 800a4b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4b2:	4b44      	ldr	r3, [pc, #272]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b6:	f003 0308 	and.w	r3, r3, #8
 800a4ba:	60bb      	str	r3, [r7, #8]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a4be:	4b41      	ldr	r3, [pc, #260]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c2:	4a40      	ldr	r2, [pc, #256]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a4ca:	4b3e      	ldr	r3, [pc, #248]	; (800a5c4 <MX_GPIO_Init+0x1c4>)
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d2:	607b      	str	r3, [r7, #4]
 800a4d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f244 0181 	movw	r1, #16513	; 0x4081
 800a4dc:	483a      	ldr	r0, [pc, #232]	; (800a5c8 <MX_GPIO_Init+0x1c8>)
 800a4de:	f7f7 fc79 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADCSample_GPIO_Port, ADCSample_Pin, GPIO_PIN_RESET);
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a4e8:	4838      	ldr	r0, [pc, #224]	; (800a5cc <MX_GPIO_Init+0x1cc>)
 800a4ea:	f7f7 fc73 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USBTransmit_Pin|QueueFull_Pin, GPIO_PIN_RESET);
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 800a4f4:	4836      	ldr	r0, [pc, #216]	; (800a5d0 <MX_GPIO_Init+0x1d0>)
 800a4f6:	f7f7 fc6d 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	2140      	movs	r1, #64	; 0x40
 800a4fe:	4835      	ldr	r0, [pc, #212]	; (800a5d4 <MX_GPIO_Init+0x1d4>)
 800a500:	f7f7 fc68 	bl	8001dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a50a:	4b33      	ldr	r3, [pc, #204]	; (800a5d8 <MX_GPIO_Init+0x1d8>)
 800a50c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a50e:	2300      	movs	r3, #0
 800a510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a516:	4619      	mov	r1, r3
 800a518:	4830      	ldr	r0, [pc, #192]	; (800a5dc <MX_GPIO_Init+0x1dc>)
 800a51a:	f7f7 fab1 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800a51e:	f244 0381 	movw	r3, #16513	; 0x4081
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a524:	2301      	movs	r3, #1
 800a526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a528:	2300      	movs	r3, #0
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a52c:	2300      	movs	r3, #0
 800a52e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a534:	4619      	mov	r1, r3
 800a536:	4824      	ldr	r0, [pc, #144]	; (800a5c8 <MX_GPIO_Init+0x1c8>)
 800a538:	f7f7 faa2 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADCSample_Pin */
  GPIO_InitStruct.Pin = ADCSample_Pin;
 800a53c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a542:	2301      	movs	r3, #1
 800a544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a546:	2300      	movs	r3, #0
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a54a:	2300      	movs	r3, #0
 800a54c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ADCSample_GPIO_Port, &GPIO_InitStruct);
 800a54e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a552:	4619      	mov	r1, r3
 800a554:	481d      	ldr	r0, [pc, #116]	; (800a5cc <MX_GPIO_Init+0x1cc>)
 800a556:	f7f7 fa93 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USBTransmit_Pin QueueFull_Pin */
  GPIO_InitStruct.Pin = USBTransmit_Pin|QueueFull_Pin;
 800a55a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a560:	2301      	movs	r3, #1
 800a562:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a564:	2300      	movs	r3, #0
 800a566:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a568:	2300      	movs	r3, #0
 800a56a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a56c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a570:	4619      	mov	r1, r3
 800a572:	4817      	ldr	r0, [pc, #92]	; (800a5d0 <MX_GPIO_Init+0x1d0>)
 800a574:	f7f7 fa84 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800a578:	2340      	movs	r3, #64	; 0x40
 800a57a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a57c:	2301      	movs	r3, #1
 800a57e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a580:	2300      	movs	r3, #0
 800a582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a584:	2300      	movs	r3, #0
 800a586:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a58c:	4619      	mov	r1, r3
 800a58e:	4811      	ldr	r0, [pc, #68]	; (800a5d4 <MX_GPIO_Init+0x1d4>)
 800a590:	f7f7 fa76 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800a594:	2380      	movs	r3, #128	; 0x80
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a598:	2300      	movs	r3, #0
 800a59a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a59c:	2300      	movs	r3, #0
 800a59e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a5a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5a4:	4619      	mov	r1, r3
 800a5a6:	480b      	ldr	r0, [pc, #44]	; (800a5d4 <MX_GPIO_Init+0x1d4>)
 800a5a8:	f7f7 fa6a 	bl	8001a80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2105      	movs	r1, #5
 800a5b0:	2028      	movs	r0, #40	; 0x28
 800a5b2:	f7f6 fdcf 	bl	8001154 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a5b6:	2028      	movs	r0, #40	; 0x28
 800a5b8:	f7f6 fde8 	bl	800118c <HAL_NVIC_EnableIRQ>

}
 800a5bc:	bf00      	nop
 800a5be:	3738      	adds	r7, #56	; 0x38
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	40023800 	.word	0x40023800
 800a5c8:	40020400 	.word	0x40020400
 800a5cc:	40021400 	.word	0x40021400
 800a5d0:	40021000 	.word	0x40021000
 800a5d4:	40021800 	.word	0x40021800
 800a5d8:	10110000 	.word	0x10110000
 800a5dc:	40020800 	.word	0x40020800

0800a5e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a04      	ldr	r2, [pc, #16]	; (800a600 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d101      	bne.n	800a5f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a5f2:	f7f6 f803 	bl	80005fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	40010000 	.word	0x40010000

0800a604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a604:	b480      	push	{r7}
 800a606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a608:	bf00      	nop
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a61a:	4b11      	ldr	r3, [pc, #68]	; (800a660 <HAL_MspInit+0x4c>)
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	4a10      	ldr	r2, [pc, #64]	; (800a660 <HAL_MspInit+0x4c>)
 800a620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a624:	6413      	str	r3, [r2, #64]	; 0x40
 800a626:	4b0e      	ldr	r3, [pc, #56]	; (800a660 <HAL_MspInit+0x4c>)
 800a628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a62e:	607b      	str	r3, [r7, #4]
 800a630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a632:	4b0b      	ldr	r3, [pc, #44]	; (800a660 <HAL_MspInit+0x4c>)
 800a634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a636:	4a0a      	ldr	r2, [pc, #40]	; (800a660 <HAL_MspInit+0x4c>)
 800a638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a63c:	6453      	str	r3, [r2, #68]	; 0x44
 800a63e:	4b08      	ldr	r3, [pc, #32]	; (800a660 <HAL_MspInit+0x4c>)
 800a640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a64a:	2200      	movs	r2, #0
 800a64c:	210f      	movs	r1, #15
 800a64e:	f06f 0001 	mvn.w	r0, #1
 800a652:	f7f6 fd7f 	bl	8001154 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	40023800 	.word	0x40023800

0800a664 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	; 0x28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a66c:	f107 0314 	add.w	r3, r7, #20
 800a670:	2200      	movs	r2, #0
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	605a      	str	r2, [r3, #4]
 800a676:	609a      	str	r2, [r3, #8]
 800a678:	60da      	str	r2, [r3, #12]
 800a67a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a19      	ldr	r2, [pc, #100]	; (800a6e8 <HAL_ADC_MspInit+0x84>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d12b      	bne.n	800a6de <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800a686:	4b19      	ldr	r3, [pc, #100]	; (800a6ec <HAL_ADC_MspInit+0x88>)
 800a688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a68a:	4a18      	ldr	r2, [pc, #96]	; (800a6ec <HAL_ADC_MspInit+0x88>)
 800a68c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a690:	6453      	str	r3, [r2, #68]	; 0x44
 800a692:	4b16      	ldr	r3, [pc, #88]	; (800a6ec <HAL_ADC_MspInit+0x88>)
 800a694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a69a:	613b      	str	r3, [r7, #16]
 800a69c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a69e:	4b13      	ldr	r3, [pc, #76]	; (800a6ec <HAL_ADC_MspInit+0x88>)
 800a6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a2:	4a12      	ldr	r2, [pc, #72]	; (800a6ec <HAL_ADC_MspInit+0x88>)
 800a6a4:	f043 0301 	orr.w	r3, r3, #1
 800a6a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a6aa:	4b10      	ldr	r3, [pc, #64]	; (800a6ec <HAL_ADC_MspInit+0x88>)
 800a6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a6b6:	2308      	movs	r3, #8
 800a6b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6c2:	f107 0314 	add.w	r3, r7, #20
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4809      	ldr	r0, [pc, #36]	; (800a6f0 <HAL_ADC_MspInit+0x8c>)
 800a6ca:	f7f7 f9d9 	bl	8001a80 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2105      	movs	r1, #5
 800a6d2:	2012      	movs	r0, #18
 800a6d4:	f7f6 fd3e 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800a6d8:	2012      	movs	r0, #18
 800a6da:	f7f6 fd57 	bl	800118c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a6de:	bf00      	nop
 800a6e0:	3728      	adds	r7, #40	; 0x28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	40012000 	.word	0x40012000
 800a6ec:	40023800 	.word	0x40023800
 800a6f0:	40020000 	.word	0x40020000

0800a6f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08e      	sub	sp, #56	; 0x38
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a700:	2200      	movs	r2, #0
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	605a      	str	r2, [r3, #4]
 800a706:	609a      	str	r2, [r3, #8]
 800a708:	60da      	str	r2, [r3, #12]
 800a70a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a4e      	ldr	r2, [pc, #312]	; (800a84c <HAL_ETH_MspInit+0x158>)
 800a712:	4293      	cmp	r3, r2
 800a714:	f040 8096 	bne.w	800a844 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a718:	4b4d      	ldr	r3, [pc, #308]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71c:	4a4c      	ldr	r2, [pc, #304]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a71e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a722:	6313      	str	r3, [r2, #48]	; 0x30
 800a724:	4b4a      	ldr	r3, [pc, #296]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a72c:	623b      	str	r3, [r7, #32]
 800a72e:	6a3b      	ldr	r3, [r7, #32]
 800a730:	4b47      	ldr	r3, [pc, #284]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a734:	4a46      	ldr	r2, [pc, #280]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a736:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a73a:	6313      	str	r3, [r2, #48]	; 0x30
 800a73c:	4b44      	ldr	r3, [pc, #272]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a744:	61fb      	str	r3, [r7, #28]
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	4b41      	ldr	r3, [pc, #260]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74c:	4a40      	ldr	r2, [pc, #256]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a74e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a752:	6313      	str	r3, [r2, #48]	; 0x30
 800a754:	4b3e      	ldr	r3, [pc, #248]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a760:	4b3b      	ldr	r3, [pc, #236]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a764:	4a3a      	ldr	r2, [pc, #232]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a766:	f043 0304 	orr.w	r3, r3, #4
 800a76a:	6313      	str	r3, [r2, #48]	; 0x30
 800a76c:	4b38      	ldr	r3, [pc, #224]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a770:	f003 0304 	and.w	r3, r3, #4
 800a774:	617b      	str	r3, [r7, #20]
 800a776:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a778:	4b35      	ldr	r3, [pc, #212]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	4a34      	ldr	r2, [pc, #208]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	6313      	str	r3, [r2, #48]	; 0x30
 800a784:	4b32      	ldr	r3, [pc, #200]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	613b      	str	r3, [r7, #16]
 800a78e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a790:	4b2f      	ldr	r3, [pc, #188]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a794:	4a2e      	ldr	r2, [pc, #184]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a796:	f043 0302 	orr.w	r3, r3, #2
 800a79a:	6313      	str	r3, [r2, #48]	; 0x30
 800a79c:	4b2c      	ldr	r3, [pc, #176]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a7a8:	4b29      	ldr	r3, [pc, #164]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a7aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ac:	4a28      	ldr	r2, [pc, #160]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a7ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b2:	6313      	str	r3, [r2, #48]	; 0x30
 800a7b4:	4b26      	ldr	r3, [pc, #152]	; (800a850 <HAL_ETH_MspInit+0x15c>)
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7bc:	60bb      	str	r3, [r7, #8]
 800a7be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a7c0:	2332      	movs	r3, #50	; 0x32
 800a7c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7d0:	230b      	movs	r3, #11
 800a7d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7d8:	4619      	mov	r1, r3
 800a7da:	481e      	ldr	r0, [pc, #120]	; (800a854 <HAL_ETH_MspInit+0x160>)
 800a7dc:	f7f7 f950 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a7e0:	2386      	movs	r3, #134	; 0x86
 800a7e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ec:	2303      	movs	r3, #3
 800a7ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7f0:	230b      	movs	r3, #11
 800a7f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	4817      	ldr	r0, [pc, #92]	; (800a858 <HAL_ETH_MspInit+0x164>)
 800a7fc:	f7f7 f940 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a804:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a806:	2302      	movs	r3, #2
 800a808:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a80a:	2300      	movs	r3, #0
 800a80c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a80e:	2303      	movs	r3, #3
 800a810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a812:	230b      	movs	r3, #11
 800a814:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a81a:	4619      	mov	r1, r3
 800a81c:	480f      	ldr	r0, [pc, #60]	; (800a85c <HAL_ETH_MspInit+0x168>)
 800a81e:	f7f7 f92f 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a822:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a828:	2302      	movs	r3, #2
 800a82a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a82c:	2300      	movs	r3, #0
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a830:	2303      	movs	r3, #3
 800a832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a834:	230b      	movs	r3, #11
 800a836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a83c:	4619      	mov	r1, r3
 800a83e:	4808      	ldr	r0, [pc, #32]	; (800a860 <HAL_ETH_MspInit+0x16c>)
 800a840:	f7f7 f91e 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800a844:	bf00      	nop
 800a846:	3738      	adds	r7, #56	; 0x38
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	40028000 	.word	0x40028000
 800a850:	40023800 	.word	0x40023800
 800a854:	40020800 	.word	0x40020800
 800a858:	40020000 	.word	0x40020000
 800a85c:	40020400 	.word	0x40020400
 800a860:	40021800 	.word	0x40021800

0800a864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a0d      	ldr	r2, [pc, #52]	; (800a8a8 <HAL_TIM_Base_MspInit+0x44>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d113      	bne.n	800a89e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a876:	4b0d      	ldr	r3, [pc, #52]	; (800a8ac <HAL_TIM_Base_MspInit+0x48>)
 800a878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87a:	4a0c      	ldr	r2, [pc, #48]	; (800a8ac <HAL_TIM_Base_MspInit+0x48>)
 800a87c:	f043 0320 	orr.w	r3, r3, #32
 800a880:	6413      	str	r3, [r2, #64]	; 0x40
 800a882:	4b0a      	ldr	r3, [pc, #40]	; (800a8ac <HAL_TIM_Base_MspInit+0x48>)
 800a884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a886:	f003 0320 	and.w	r3, r3, #32
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 800a88e:	2200      	movs	r2, #0
 800a890:	2105      	movs	r1, #5
 800a892:	2037      	movs	r0, #55	; 0x37
 800a894:	f7f6 fc5e 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a898:	2037      	movs	r0, #55	; 0x37
 800a89a:	f7f6 fc77 	bl	800118c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	40001400 	.word	0x40001400
 800a8ac:	40023800 	.word	0x40023800

0800a8b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b08a      	sub	sp, #40	; 0x28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8b8:	f107 0314 	add.w	r3, r7, #20
 800a8bc:	2200      	movs	r2, #0
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	605a      	str	r2, [r3, #4]
 800a8c2:	609a      	str	r2, [r3, #8]
 800a8c4:	60da      	str	r2, [r3, #12]
 800a8c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a17      	ldr	r2, [pc, #92]	; (800a92c <HAL_UART_MspInit+0x7c>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d128      	bne.n	800a924 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a8d2:	4b17      	ldr	r3, [pc, #92]	; (800a930 <HAL_UART_MspInit+0x80>)
 800a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d6:	4a16      	ldr	r2, [pc, #88]	; (800a930 <HAL_UART_MspInit+0x80>)
 800a8d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8dc:	6413      	str	r3, [r2, #64]	; 0x40
 800a8de:	4b14      	ldr	r3, [pc, #80]	; (800a930 <HAL_UART_MspInit+0x80>)
 800a8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a8ea:	4b11      	ldr	r3, [pc, #68]	; (800a930 <HAL_UART_MspInit+0x80>)
 800a8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ee:	4a10      	ldr	r2, [pc, #64]	; (800a930 <HAL_UART_MspInit+0x80>)
 800a8f0:	f043 0308 	orr.w	r3, r3, #8
 800a8f4:	6313      	str	r3, [r2, #48]	; 0x30
 800a8f6:	4b0e      	ldr	r3, [pc, #56]	; (800a930 <HAL_UART_MspInit+0x80>)
 800a8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8fa:	f003 0308 	and.w	r3, r3, #8
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800a902:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a908:	2302      	movs	r3, #2
 800a90a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a90c:	2300      	movs	r3, #0
 800a90e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a910:	2303      	movs	r3, #3
 800a912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a914:	2307      	movs	r3, #7
 800a916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a918:	f107 0314 	add.w	r3, r7, #20
 800a91c:	4619      	mov	r1, r3
 800a91e:	4805      	ldr	r0, [pc, #20]	; (800a934 <HAL_UART_MspInit+0x84>)
 800a920:	f7f7 f8ae 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a924:	bf00      	nop
 800a926:	3728      	adds	r7, #40	; 0x28
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	40004800 	.word	0x40004800
 800a930:	40023800 	.word	0x40023800
 800a934:	40020c00 	.word	0x40020c00

0800a938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08c      	sub	sp, #48	; 0x30
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800a948:	2200      	movs	r2, #0
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	2019      	movs	r0, #25
 800a94e:	f7f6 fc01 	bl	8001154 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800a952:	2019      	movs	r0, #25
 800a954:	f7f6 fc1a 	bl	800118c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a958:	4b1f      	ldr	r3, [pc, #124]	; (800a9d8 <HAL_InitTick+0xa0>)
 800a95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95c:	4a1e      	ldr	r2, [pc, #120]	; (800a9d8 <HAL_InitTick+0xa0>)
 800a95e:	f043 0301 	orr.w	r3, r3, #1
 800a962:	6453      	str	r3, [r2, #68]	; 0x44
 800a964:	4b1c      	ldr	r3, [pc, #112]	; (800a9d8 <HAL_InitTick+0xa0>)
 800a966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a970:	f107 0210 	add.w	r2, r7, #16
 800a974:	f107 0314 	add.w	r3, r7, #20
 800a978:	4611      	mov	r1, r2
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f9 f8b4 	bl	8003ae8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a980:	f7f9 f89e 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 800a984:	4603      	mov	r3, r0
 800a986:	005b      	lsls	r3, r3, #1
 800a988:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98c:	4a13      	ldr	r2, [pc, #76]	; (800a9dc <HAL_InitTick+0xa4>)
 800a98e:	fba2 2303 	umull	r2, r3, r2, r3
 800a992:	0c9b      	lsrs	r3, r3, #18
 800a994:	3b01      	subs	r3, #1
 800a996:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a998:	4b11      	ldr	r3, [pc, #68]	; (800a9e0 <HAL_InitTick+0xa8>)
 800a99a:	4a12      	ldr	r2, [pc, #72]	; (800a9e4 <HAL_InitTick+0xac>)
 800a99c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800a99e:	4b10      	ldr	r3, [pc, #64]	; (800a9e0 <HAL_InitTick+0xa8>)
 800a9a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a9a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a9a6:	4a0e      	ldr	r2, [pc, #56]	; (800a9e0 <HAL_InitTick+0xa8>)
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a9ac:	4b0c      	ldr	r3, [pc, #48]	; (800a9e0 <HAL_InitTick+0xa8>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9b2:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <HAL_InitTick+0xa8>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800a9b8:	4809      	ldr	r0, [pc, #36]	; (800a9e0 <HAL_InitTick+0xa8>)
 800a9ba:	f7f9 fced 	bl	8004398 <HAL_TIM_Base_Init>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d104      	bne.n	800a9ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800a9c4:	4806      	ldr	r0, [pc, #24]	; (800a9e0 <HAL_InitTick+0xa8>)
 800a9c6:	f7f9 fd13 	bl	80043f0 <HAL_TIM_Base_Start_IT>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	e000      	b.n	800a9d0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3730      	adds	r7, #48	; 0x30
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	40023800 	.word	0x40023800
 800a9dc:	431bde83 	.word	0x431bde83
 800a9e0:	200244c4 	.word	0x200244c4
 800a9e4:	40010000 	.word	0x40010000

0800a9e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a9ec:	bf00      	nop
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a9fa:	e7fe      	b.n	800a9fa <HardFault_Handler+0x4>

0800a9fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800aa00:	e7fe      	b.n	800aa00 <MemManage_Handler+0x4>

0800aa02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aa02:	b480      	push	{r7}
 800aa04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800aa06:	e7fe      	b.n	800aa06 <BusFault_Handler+0x4>

0800aa08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aa0c:	e7fe      	b.n	800aa0c <UsageFault_Handler+0x4>

0800aa0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aa12:	bf00      	nop
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
  HAL_GPIO_TogglePin(ADCSample_GPIO_Port, ADCSample_Pin);
 800aa22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aa26:	481a      	ldr	r0, [pc, #104]	; (800aa90 <ADC_IRQHandler+0x74>)
 800aa28:	f7f7 f9ed 	bl	8001e06 <HAL_GPIO_TogglePin>
  uint16_t value = (uint16_t) ( ((HAL_ADC_GetValue(&hadc1) &0x0FFF) << 2) & 0x3FFC ); // convert to 00 xx xx xx xx xx xx 00
 800aa2c:	4819      	ldr	r0, [pc, #100]	; (800aa94 <ADC_IRQHandler+0x78>)
 800aa2e:	f7f6 f876 	bl	8000b1e <HAL_ADC_GetValue>
 800aa32:	4603      	mov	r3, r0
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 800aa3e:	4013      	ands	r3, r2
 800aa40:	80fb      	strh	r3, [r7, #6]
  if(currentPosition <= TRANSMIT_BUFFER_LENGTH - 4)
 800aa42:	4b15      	ldr	r3, [pc, #84]	; (800aa98 <ADC_IRQHandler+0x7c>)
 800aa44:	881b      	ldrh	r3, [r3, #0]
 800aa46:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d818      	bhi.n	800aa80 <ADC_IRQHandler+0x64>
  {
	  *(currentBuffer + currentPosition) = (value>> 8) & 0xFF ; // high bits
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	0a1b      	lsrs	r3, r3, #8
 800aa52:	b299      	uxth	r1, r3
 800aa54:	4b11      	ldr	r3, [pc, #68]	; (800aa9c <ADC_IRQHandler+0x80>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a0f      	ldr	r2, [pc, #60]	; (800aa98 <ADC_IRQHandler+0x7c>)
 800aa5a:	8812      	ldrh	r2, [r2, #0]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	b2ca      	uxtb	r2, r1
 800aa60:	701a      	strb	r2, [r3, #0]
	  *(currentBuffer + currentPosition + 1) = value & 0xFF; // low bits
 800aa62:	4b0e      	ldr	r3, [pc, #56]	; (800aa9c <ADC_IRQHandler+0x80>)
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	4b0c      	ldr	r3, [pc, #48]	; (800aa98 <ADC_IRQHandler+0x7c>)
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	4413      	add	r3, r2
 800aa6e:	88fa      	ldrh	r2, [r7, #6]
 800aa70:	b2d2      	uxtb	r2, r2
 800aa72:	701a      	strb	r2, [r3, #0]
	  currentPosition += 2;
 800aa74:	4b08      	ldr	r3, [pc, #32]	; (800aa98 <ADC_IRQHandler+0x7c>)
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	3302      	adds	r3, #2
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <ADC_IRQHandler+0x7c>)
 800aa7e:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800aa80:	4804      	ldr	r0, [pc, #16]	; (800aa94 <ADC_IRQHandler+0x78>)
 800aa82:	f7f5 ff0b 	bl	800089c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	40021400 	.word	0x40021400
 800aa94:	200243f4 	.word	0x200243f4
 800aa98:	20014366 	.word	0x20014366
 800aa9c:	20014368 	.word	0x20014368

0800aaa0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800aaa4:	4802      	ldr	r0, [pc, #8]	; (800aab0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800aaa6:	f7f9 fcf8 	bl	800449a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800aaaa:	bf00      	nop
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	200244c4 	.word	0x200244c4

0800aab4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	static unsigned int last_interrupt_time = 0;
	unsigned int interrupt_time = xTaskGetTickCountFromISR();
 800aaba:	f7fe f88b 	bl	8008bd4 <xTaskGetTickCountFromISR>
 800aabe:	6078      	str	r0, [r7, #4]
  BaseType_t bt = pdPASS;
 800aac0:	2301      	movs	r3, #1
 800aac2:	603b      	str	r3, [r7, #0]
  if(interrupt_time - last_interrupt_time > 200)
 800aac4:	4b11      	ldr	r3, [pc, #68]	; (800ab0c <EXTI15_10_IRQHandler+0x58>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	2bc8      	cmp	r3, #200	; 0xc8
 800aace:	d906      	bls.n	800aade <EXTI15_10_IRQHandler+0x2a>
  {
	  xSemaphoreGiveFromISR(buttonBinarySemph, &bt);
 800aad0:	4b0f      	ldr	r3, [pc, #60]	; (800ab10 <EXTI15_10_IRQHandler+0x5c>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	463a      	mov	r2, r7
 800aad6:	4611      	mov	r1, r2
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fd fbb5 	bl	8008248 <xQueueGiveFromISR>
  }
  last_interrupt_time = interrupt_time;
 800aade:	4a0b      	ldr	r2, [pc, #44]	; (800ab0c <EXTI15_10_IRQHandler+0x58>)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800aae4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800aae8:	f7f7 f9a8 	bl	8001e3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(bt == pdTRUE)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	2b01      	cmp	r3, #1
 800aaf0:	d107      	bne.n	800ab02 <EXTI15_10_IRQHandler+0x4e>
  {
	  taskYIELD();
 800aaf2:	4b08      	ldr	r3, [pc, #32]	; (800ab14 <EXTI15_10_IRQHandler+0x60>)
 800aaf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20004354 	.word	0x20004354
 800ab10:	20004350 	.word	0x20004350
 800ab14:	e000ed04 	.word	0xe000ed04

0800ab18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ab1c:	4803      	ldr	r0, [pc, #12]	; (800ab2c <TIM7_IRQHandler+0x14>)
 800ab1e:	f7f9 fcbc 	bl	800449a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  HAL_ADC_Start_IT(&hadc1);
 800ab22:	4803      	ldr	r0, [pc, #12]	; (800ab30 <TIM7_IRQHandler+0x18>)
 800ab24:	f7f5 fdf0 	bl	8000708 <HAL_ADC_Start_IT>
  /* USER CODE END TIM7_IRQn 1 */
}
 800ab28:	bf00      	nop
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20024484 	.word	0x20024484
 800ab30:	200243f4 	.word	0x200243f4

0800ab34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800ab38:	4802      	ldr	r0, [pc, #8]	; (800ab44 <OTG_FS_IRQHandler+0x10>)
 800ab3a:	f7f7 fadc 	bl	80020f6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800ab3e:	bf00      	nop
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	200257a8 	.word	0x200257a8

0800ab48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ab54:	2300      	movs	r3, #0
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	e00a      	b.n	800ab70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ab5a:	f3af 8000 	nop.w
 800ab5e:	4601      	mov	r1, r0
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	60ba      	str	r2, [r7, #8]
 800ab66:	b2ca      	uxtb	r2, r1
 800ab68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	dbf0      	blt.n	800ab5a <_read+0x12>
	}

return len;
 800ab78:	687b      	ldr	r3, [r7, #4]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3718      	adds	r7, #24
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b086      	sub	sp, #24
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ab8e:	2300      	movs	r3, #0
 800ab90:	617b      	str	r3, [r7, #20]
 800ab92:	e009      	b.n	800aba8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	1c5a      	adds	r2, r3, #1
 800ab98:	60ba      	str	r2, [r7, #8]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	3301      	adds	r3, #1
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	429a      	cmp	r2, r3
 800abae:	dbf1      	blt.n	800ab94 <_write+0x12>
	}
	return len;
 800abb0:	687b      	ldr	r3, [r7, #4]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3718      	adds	r7, #24
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <_close>:

int _close(int file)
{
 800abba:	b480      	push	{r7}
 800abbc:	b083      	sub	sp, #12
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
	return -1;
 800abc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800abe2:	605a      	str	r2, [r3, #4]
	return 0;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	370c      	adds	r7, #12
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr

0800abf2 <_isatty>:

int _isatty(int file)
{
 800abf2:	b480      	push	{r7}
 800abf4:	b083      	sub	sp, #12
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
	return 1;
 800abfa:	2301      	movs	r3, #1
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
	return 0;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
	...

0800ac24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ac2c:	4b11      	ldr	r3, [pc, #68]	; (800ac74 <_sbrk+0x50>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <_sbrk+0x16>
		heap_end = &end;
 800ac34:	4b0f      	ldr	r3, [pc, #60]	; (800ac74 <_sbrk+0x50>)
 800ac36:	4a10      	ldr	r2, [pc, #64]	; (800ac78 <_sbrk+0x54>)
 800ac38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ac3a:	4b0e      	ldr	r3, [pc, #56]	; (800ac74 <_sbrk+0x50>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ac40:	4b0c      	ldr	r3, [pc, #48]	; (800ac74 <_sbrk+0x50>)
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4413      	add	r3, r2
 800ac48:	466a      	mov	r2, sp
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d907      	bls.n	800ac5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ac4e:	f000 fe05 	bl	800b85c <__errno>
 800ac52:	4602      	mov	r2, r0
 800ac54:	230c      	movs	r3, #12
 800ac56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ac58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac5c:	e006      	b.n	800ac6c <_sbrk+0x48>
	}

	heap_end += incr;
 800ac5e:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <_sbrk+0x50>)
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4413      	add	r3, r2
 800ac66:	4a03      	ldr	r2, [pc, #12]	; (800ac74 <_sbrk+0x50>)
 800ac68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	20004358 	.word	0x20004358
 800ac78:	20025db0 	.word	0x20025db0

0800ac7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ac80:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <SystemInit+0x5c>)
 800ac82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac86:	4a14      	ldr	r2, [pc, #80]	; (800acd8 <SystemInit+0x5c>)
 800ac88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ac90:	4b12      	ldr	r3, [pc, #72]	; (800acdc <SystemInit+0x60>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a11      	ldr	r2, [pc, #68]	; (800acdc <SystemInit+0x60>)
 800ac96:	f043 0301 	orr.w	r3, r3, #1
 800ac9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ac9c:	4b0f      	ldr	r3, [pc, #60]	; (800acdc <SystemInit+0x60>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800aca2:	4b0e      	ldr	r3, [pc, #56]	; (800acdc <SystemInit+0x60>)
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	490d      	ldr	r1, [pc, #52]	; (800acdc <SystemInit+0x60>)
 800aca8:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <SystemInit+0x64>)
 800acaa:	4013      	ands	r3, r2
 800acac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800acae:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <SystemInit+0x60>)
 800acb0:	4a0c      	ldr	r2, [pc, #48]	; (800ace4 <SystemInit+0x68>)
 800acb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800acb4:	4b09      	ldr	r3, [pc, #36]	; (800acdc <SystemInit+0x60>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a08      	ldr	r2, [pc, #32]	; (800acdc <SystemInit+0x60>)
 800acba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <SystemInit+0x60>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800acc6:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <SystemInit+0x5c>)
 800acc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800accc:	609a      	str	r2, [r3, #8]
#endif
}
 800acce:	bf00      	nop
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	e000ed00 	.word	0xe000ed00
 800acdc:	40023800 	.word	0x40023800
 800ace0:	fef6ffff 	.word	0xfef6ffff
 800ace4:	24003010 	.word	0x24003010

0800ace8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800acec:	2200      	movs	r2, #0
 800acee:	4912      	ldr	r1, [pc, #72]	; (800ad38 <MX_USB_DEVICE_Init+0x50>)
 800acf0:	4812      	ldr	r0, [pc, #72]	; (800ad3c <MX_USB_DEVICE_Init+0x54>)
 800acf2:	f7fb ffb9 	bl	8006c68 <USBD_Init>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800acfc:	f7ff fc82 	bl	800a604 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad00:	490f      	ldr	r1, [pc, #60]	; (800ad40 <MX_USB_DEVICE_Init+0x58>)
 800ad02:	480e      	ldr	r0, [pc, #56]	; (800ad3c <MX_USB_DEVICE_Init+0x54>)
 800ad04:	f7fb ffdb 	bl	8006cbe <USBD_RegisterClass>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad0e:	f7ff fc79 	bl	800a604 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad12:	490c      	ldr	r1, [pc, #48]	; (800ad44 <MX_USB_DEVICE_Init+0x5c>)
 800ad14:	4809      	ldr	r0, [pc, #36]	; (800ad3c <MX_USB_DEVICE_Init+0x54>)
 800ad16:	f7fb ff09 	bl	8006b2c <USBD_CDC_RegisterInterface>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad20:	f7ff fc70 	bl	800a604 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad24:	4805      	ldr	r0, [pc, #20]	; (800ad3c <MX_USB_DEVICE_Init+0x54>)
 800ad26:	f7fb ffe4 	bl	8006cf2 <USBD_Start>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d001      	beq.n	800ad34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad30:	f7ff fc68 	bl	800a604 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad34:	bf00      	nop
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	2000012c 	.word	0x2000012c
 800ad3c:	20024504 	.word	0x20024504
 800ad40:	20000010 	.word	0x20000010
 800ad44:	2000011c 	.word	0x2000011c

0800ad48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4905      	ldr	r1, [pc, #20]	; (800ad64 <CDC_Init_FS+0x1c>)
 800ad50:	4805      	ldr	r0, [pc, #20]	; (800ad68 <CDC_Init_FS+0x20>)
 800ad52:	f7fb ff02 	bl	8006b5a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ad56:	4905      	ldr	r1, [pc, #20]	; (800ad6c <CDC_Init_FS+0x24>)
 800ad58:	4803      	ldr	r0, [pc, #12]	; (800ad68 <CDC_Init_FS+0x20>)
 800ad5a:	f7fb ff18 	bl	8006b8e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ad5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	20024fa0 	.word	0x20024fa0
 800ad68:	20024504 	.word	0x20024504
 800ad6c:	200247a0 	.word	0x200247a0

0800ad70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ad70:	b480      	push	{r7}
 800ad72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ad74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	6039      	str	r1, [r7, #0]
 800ad8a:	71fb      	strb	r3, [r7, #7]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ad90:	79fb      	ldrb	r3, [r7, #7]
 800ad92:	2b23      	cmp	r3, #35	; 0x23
 800ad94:	d867      	bhi.n	800ae66 <CDC_Control_FS+0xe6>
 800ad96:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <CDC_Control_FS+0x1c>)
 800ad98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9c:	0800ae67 	.word	0x0800ae67
 800ada0:	0800ae67 	.word	0x0800ae67
 800ada4:	0800ae67 	.word	0x0800ae67
 800ada8:	0800ae67 	.word	0x0800ae67
 800adac:	0800ae67 	.word	0x0800ae67
 800adb0:	0800ae67 	.word	0x0800ae67
 800adb4:	0800ae67 	.word	0x0800ae67
 800adb8:	0800ae67 	.word	0x0800ae67
 800adbc:	0800ae67 	.word	0x0800ae67
 800adc0:	0800ae67 	.word	0x0800ae67
 800adc4:	0800ae67 	.word	0x0800ae67
 800adc8:	0800ae67 	.word	0x0800ae67
 800adcc:	0800ae67 	.word	0x0800ae67
 800add0:	0800ae67 	.word	0x0800ae67
 800add4:	0800ae67 	.word	0x0800ae67
 800add8:	0800ae67 	.word	0x0800ae67
 800addc:	0800ae67 	.word	0x0800ae67
 800ade0:	0800ae67 	.word	0x0800ae67
 800ade4:	0800ae67 	.word	0x0800ae67
 800ade8:	0800ae67 	.word	0x0800ae67
 800adec:	0800ae67 	.word	0x0800ae67
 800adf0:	0800ae67 	.word	0x0800ae67
 800adf4:	0800ae67 	.word	0x0800ae67
 800adf8:	0800ae67 	.word	0x0800ae67
 800adfc:	0800ae67 	.word	0x0800ae67
 800ae00:	0800ae67 	.word	0x0800ae67
 800ae04:	0800ae67 	.word	0x0800ae67
 800ae08:	0800ae67 	.word	0x0800ae67
 800ae0c:	0800ae67 	.word	0x0800ae67
 800ae10:	0800ae67 	.word	0x0800ae67
 800ae14:	0800ae67 	.word	0x0800ae67
 800ae18:	0800ae67 	.word	0x0800ae67
 800ae1c:	0800ae2d 	.word	0x0800ae2d
 800ae20:	0800ae67 	.word	0x0800ae67
 800ae24:	0800ae67 	.word	0x0800ae67
 800ae28:	0800ae67 	.word	0x0800ae67
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	//for windows we need to resend this data
    	buffer[0]=pbuf[0];
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781a      	ldrb	r2, [r3, #0]
 800ae30:	4b11      	ldr	r3, [pc, #68]	; (800ae78 <CDC_Control_FS+0xf8>)
 800ae32:	701a      	strb	r2, [r3, #0]
    	buffer[1]=pbuf[1];
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	785a      	ldrb	r2, [r3, #1]
 800ae38:	4b0f      	ldr	r3, [pc, #60]	; (800ae78 <CDC_Control_FS+0xf8>)
 800ae3a:	705a      	strb	r2, [r3, #1]
    	buffer[2]=pbuf[2];
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	789a      	ldrb	r2, [r3, #2]
 800ae40:	4b0d      	ldr	r3, [pc, #52]	; (800ae78 <CDC_Control_FS+0xf8>)
 800ae42:	709a      	strb	r2, [r3, #2]
    	buffer[3]=pbuf[3];
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	78da      	ldrb	r2, [r3, #3]
 800ae48:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <CDC_Control_FS+0xf8>)
 800ae4a:	70da      	strb	r2, [r3, #3]
    	buffer[4]=pbuf[4];
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	791a      	ldrb	r2, [r3, #4]
 800ae50:	4b09      	ldr	r3, [pc, #36]	; (800ae78 <CDC_Control_FS+0xf8>)
 800ae52:	711a      	strb	r2, [r3, #4]
    	buffer[5]=pbuf[5];
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	795a      	ldrb	r2, [r3, #5]
 800ae58:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <CDC_Control_FS+0xf8>)
 800ae5a:	715a      	strb	r2, [r3, #5]
    	buffer[6]=pbuf[6];
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	799a      	ldrb	r2, [r3, #6]
 800ae60:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <CDC_Control_FS+0xf8>)
 800ae62:	719a      	strb	r2, [r3, #6]
    break;
 800ae64:	e000      	b.n	800ae68 <CDC_Control_FS+0xe8>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae66:	bf00      	nop
  }

  return (USBD_OK);
 800ae68:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	200257a0 	.word	0x200257a0

0800ae7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	4809      	ldr	r0, [pc, #36]	; (800aeb0 <CDC_Receive_FS+0x34>)
 800ae8a:	f7fb fe80 	bl	8006b8e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae8e:	4808      	ldr	r0, [pc, #32]	; (800aeb0 <CDC_Receive_FS+0x34>)
 800ae90:	f7fb fec0 	bl	8006c14 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf, *Len);
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f809 	bl	800aeb4 <CDC_Transmit_FS>
  toggleAllLEDs();
 800aea2:	f7ff f8af 	bl	800a004 <toggleAllLEDs>
  return (USBD_OK);
 800aea6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	20024504 	.word	0x20024504

0800aeb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	460b      	mov	r3, r1
 800aebe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aec4:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <CDC_Transmit_FS+0x48>)
 800aec6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800aeca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e00b      	b.n	800aef2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aeda:	887b      	ldrh	r3, [r7, #2]
 800aedc:	461a      	mov	r2, r3
 800aede:	6879      	ldr	r1, [r7, #4]
 800aee0:	4806      	ldr	r0, [pc, #24]	; (800aefc <CDC_Transmit_FS+0x48>)
 800aee2:	f7fb fe3a 	bl	8006b5a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aee6:	4805      	ldr	r0, [pc, #20]	; (800aefc <CDC_Transmit_FS+0x48>)
 800aee8:	f7fb fe65 	bl	8006bb6 <USBD_CDC_TransmitPacket>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20024504 	.word	0x20024504

0800af00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08a      	sub	sp, #40	; 0x28
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af08:	f107 0314 	add.w	r3, r7, #20
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
 800af10:	605a      	str	r2, [r3, #4]
 800af12:	609a      	str	r2, [r3, #8]
 800af14:	60da      	str	r2, [r3, #12]
 800af16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af20:	d149      	bne.n	800afb6 <HAL_PCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af22:	4b27      	ldr	r3, [pc, #156]	; (800afc0 <HAL_PCD_MspInit+0xc0>)
 800af24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af26:	4a26      	ldr	r2, [pc, #152]	; (800afc0 <HAL_PCD_MspInit+0xc0>)
 800af28:	f043 0301 	orr.w	r3, r3, #1
 800af2c:	6313      	str	r3, [r2, #48]	; 0x30
 800af2e:	4b24      	ldr	r3, [pc, #144]	; (800afc0 <HAL_PCD_MspInit+0xc0>)
 800af30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	613b      	str	r3, [r7, #16]
 800af38:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800af3a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800af3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af40:	2302      	movs	r3, #2
 800af42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af44:	2300      	movs	r3, #0
 800af46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af48:	2303      	movs	r3, #3
 800af4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af4c:	230a      	movs	r3, #10
 800af4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af50:	f107 0314 	add.w	r3, r7, #20
 800af54:	4619      	mov	r1, r3
 800af56:	481b      	ldr	r0, [pc, #108]	; (800afc4 <HAL_PCD_MspInit+0xc4>)
 800af58:	f7f6 fd92 	bl	8001a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800af5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af62:	2300      	movs	r3, #0
 800af64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af66:	2300      	movs	r3, #0
 800af68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800af6a:	f107 0314 	add.w	r3, r7, #20
 800af6e:	4619      	mov	r1, r3
 800af70:	4814      	ldr	r0, [pc, #80]	; (800afc4 <HAL_PCD_MspInit+0xc4>)
 800af72:	f7f6 fd85 	bl	8001a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af76:	4b12      	ldr	r3, [pc, #72]	; (800afc0 <HAL_PCD_MspInit+0xc0>)
 800af78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7a:	4a11      	ldr	r2, [pc, #68]	; (800afc0 <HAL_PCD_MspInit+0xc0>)
 800af7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af80:	6353      	str	r3, [r2, #52]	; 0x34
 800af82:	4b0f      	ldr	r3, [pc, #60]	; (800afc0 <HAL_PCD_MspInit+0xc0>)
 800af84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4b0c      	ldr	r3, [pc, #48]	; (800afc0 <HAL_PCD_MspInit+0xc0>)
 800af90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af92:	4a0b      	ldr	r2, [pc, #44]	; (800afc0 <HAL_PCD_MspInit+0xc0>)
 800af94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af98:	6453      	str	r3, [r2, #68]	; 0x44
 800af9a:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <HAL_PCD_MspInit+0xc0>)
 800af9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afa2:	60bb      	str	r3, [r7, #8]
 800afa4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800afa6:	2200      	movs	r2, #0
 800afa8:	2105      	movs	r1, #5
 800afaa:	2043      	movs	r0, #67	; 0x43
 800afac:	f7f6 f8d2 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800afb0:	2043      	movs	r0, #67	; 0x43
 800afb2:	f7f6 f8eb 	bl	800118c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800afb6:	bf00      	nop
 800afb8:	3728      	adds	r7, #40	; 0x28
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	40023800 	.word	0x40023800
 800afc4:	40020000 	.word	0x40020000

0800afc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800afdc:	4619      	mov	r1, r3
 800afde:	4610      	mov	r0, r2
 800afe0:	f7fb fed0 	bl	8006d84 <USBD_LL_SetupStage>
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800affe:	78fa      	ldrb	r2, [r7, #3]
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	4613      	mov	r3, r2
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	1a9b      	subs	r3, r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	440b      	add	r3, r1
 800b00c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	78fb      	ldrb	r3, [r7, #3]
 800b014:	4619      	mov	r1, r3
 800b016:	f7fb ff00 	bl	8006e1a <USBD_LL_DataOutStage>
}
 800b01a:	bf00      	nop
 800b01c:	3708      	adds	r7, #8
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b082      	sub	sp, #8
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 800b034:	78fa      	ldrb	r2, [r7, #3]
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	4613      	mov	r3, r2
 800b03a:	00db      	lsls	r3, r3, #3
 800b03c:	1a9b      	subs	r3, r3, r2
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	440b      	add	r3, r1
 800b042:	3348      	adds	r3, #72	; 0x48
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	78fb      	ldrb	r3, [r7, #3]
 800b048:	4619      	mov	r1, r3
 800b04a:	f7fb ff57 	bl	8006efc <USBD_LL_DataInStage>
}
 800b04e:	bf00      	nop
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b082      	sub	sp, #8
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b064:	4618      	mov	r0, r3
 800b066:	f7fc f865 	bl	8007134 <USBD_LL_SOF>
}
 800b06a:	bf00      	nop
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b07a:	2301      	movs	r3, #1
 800b07c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d102      	bne.n	800b08c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]
 800b08a:	e008      	b.n	800b09e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	2b02      	cmp	r3, #2
 800b092:	d102      	bne.n	800b09a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b094:	2301      	movs	r3, #1
 800b096:	73fb      	strb	r3, [r7, #15]
 800b098:	e001      	b.n	800b09e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b09a:	f7ff fab3 	bl	800a604 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b0a4:	7bfa      	ldrb	r2, [r7, #15]
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fc f80d 	bl	80070c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fb ffc6 	bl	8007046 <USBD_LL_Reset>
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fc f808 	bl	80070e8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	6812      	ldr	r2, [r2, #0]
 800b0e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0ea:	f043 0301 	orr.w	r3, r3, #1
 800b0ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6a1b      	ldr	r3, [r3, #32]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d005      	beq.n	800b104 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0f8:	4b04      	ldr	r3, [pc, #16]	; (800b10c <HAL_PCD_SuspendCallback+0x48>)
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	4a03      	ldr	r2, [pc, #12]	; (800b10c <HAL_PCD_SuspendCallback+0x48>)
 800b0fe:	f043 0306 	orr.w	r3, r3, #6
 800b102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b104:	bf00      	nop
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	e000ed00 	.word	0xe000ed00

0800b110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fb fff7 	bl	8007112 <USBD_LL_Resume>
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	460b      	mov	r3, r1
 800b136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b13e:	78fa      	ldrb	r2, [r7, #3]
 800b140:	4611      	mov	r1, r2
 800b142:	4618      	mov	r0, r3
 800b144:	f7fc f81d 	bl	8007182 <USBD_LL_IsoOUTIncomplete>
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b162:	78fa      	ldrb	r2, [r7, #3]
 800b164:	4611      	mov	r1, r2
 800b166:	4618      	mov	r0, r3
 800b168:	f7fb fffe 	bl	8007168 <USBD_LL_IsoINIncomplete>
}
 800b16c:	bf00      	nop
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b182:	4618      	mov	r0, r3
 800b184:	f7fc f80a 	bl	800719c <USBD_LL_DevConnected>
}
 800b188:	bf00      	nop
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fc f807 	bl	80071b2 <USBD_LL_DevDisconnected>
}
 800b1a4:	bf00      	nop
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d13c      	bne.n	800b236 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b1bc:	4a20      	ldr	r2, [pc, #128]	; (800b240 <USBD_LL_Init+0x94>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a1e      	ldr	r2, [pc, #120]	; (800b240 <USBD_LL_Init+0x94>)
 800b1c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b1cc:	4b1c      	ldr	r3, [pc, #112]	; (800b240 <USBD_LL_Init+0x94>)
 800b1ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b1d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b1d4:	4b1a      	ldr	r3, [pc, #104]	; (800b240 <USBD_LL_Init+0x94>)
 800b1d6:	2206      	movs	r2, #6
 800b1d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b1da:	4b19      	ldr	r3, [pc, #100]	; (800b240 <USBD_LL_Init+0x94>)
 800b1dc:	2202      	movs	r2, #2
 800b1de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b1e0:	4b17      	ldr	r3, [pc, #92]	; (800b240 <USBD_LL_Init+0x94>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b1e6:	4b16      	ldr	r3, [pc, #88]	; (800b240 <USBD_LL_Init+0x94>)
 800b1e8:	2202      	movs	r2, #2
 800b1ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b1ec:	4b14      	ldr	r3, [pc, #80]	; (800b240 <USBD_LL_Init+0x94>)
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b1f2:	4b13      	ldr	r3, [pc, #76]	; (800b240 <USBD_LL_Init+0x94>)
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b1f8:	4b11      	ldr	r3, [pc, #68]	; (800b240 <USBD_LL_Init+0x94>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b1fe:	4b10      	ldr	r3, [pc, #64]	; (800b240 <USBD_LL_Init+0x94>)
 800b200:	2201      	movs	r2, #1
 800b202:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b204:	4b0e      	ldr	r3, [pc, #56]	; (800b240 <USBD_LL_Init+0x94>)
 800b206:	2200      	movs	r2, #0
 800b208:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b20a:	480d      	ldr	r0, [pc, #52]	; (800b240 <USBD_LL_Init+0x94>)
 800b20c:	f7f6 fe39 	bl	8001e82 <HAL_PCD_Init>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d001      	beq.n	800b21a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b216:	f7ff f9f5 	bl	800a604 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b21a:	2180      	movs	r1, #128	; 0x80
 800b21c:	4808      	ldr	r0, [pc, #32]	; (800b240 <USBD_LL_Init+0x94>)
 800b21e:	f7f7 ffb8 	bl	8003192 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b222:	2240      	movs	r2, #64	; 0x40
 800b224:	2100      	movs	r1, #0
 800b226:	4806      	ldr	r0, [pc, #24]	; (800b240 <USBD_LL_Init+0x94>)
 800b228:	f7f7 ff6c 	bl	8003104 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b22c:	2280      	movs	r2, #128	; 0x80
 800b22e:	2101      	movs	r1, #1
 800b230:	4803      	ldr	r0, [pc, #12]	; (800b240 <USBD_LL_Init+0x94>)
 800b232:	f7f7 ff67 	bl	8003104 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	200257a8 	.word	0x200257a8

0800b244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7f6 ff29 	bl	80020b2 <HAL_PCD_Start>
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	4618      	mov	r0, r3
 800b268:	f000 f982 	bl	800b570 <USBD_Get_USB_Status>
 800b26c:	4603      	mov	r3, r0
 800b26e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b270:	7bbb      	ldrb	r3, [r7, #14]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	4608      	mov	r0, r1
 800b284:	4611      	mov	r1, r2
 800b286:	461a      	mov	r2, r3
 800b288:	4603      	mov	r3, r0
 800b28a:	70fb      	strb	r3, [r7, #3]
 800b28c:	460b      	mov	r3, r1
 800b28e:	70bb      	strb	r3, [r7, #2]
 800b290:	4613      	mov	r3, r2
 800b292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b294:	2300      	movs	r3, #0
 800b296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b2a2:	78bb      	ldrb	r3, [r7, #2]
 800b2a4:	883a      	ldrh	r2, [r7, #0]
 800b2a6:	78f9      	ldrb	r1, [r7, #3]
 800b2a8:	f7f7 fb1e 	bl	80028e8 <HAL_PCD_EP_Open>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2b0:	7bfb      	ldrb	r3, [r7, #15]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f000 f95c 	bl	800b570 <USBD_Get_USB_Status>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b2e0:	78fa      	ldrb	r2, [r7, #3]
 800b2e2:	4611      	mov	r1, r2
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7f7 fb67 	bl	80029b8 <HAL_PCD_EP_Close>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800b2ee:	7bfb      	ldrb	r3, [r7, #15]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f000 f93d 	bl	800b570 <USBD_Get_USB_Status>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800b2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	460b      	mov	r3, r1
 800b30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b310:	2300      	movs	r3, #0
 800b312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b314:	2300      	movs	r3, #0
 800b316:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b31e:	78fa      	ldrb	r2, [r7, #3]
 800b320:	4611      	mov	r1, r2
 800b322:	4618      	mov	r0, r3
 800b324:	f7f7 fc3f 	bl	8002ba6 <HAL_PCD_EP_SetStall>
 800b328:	4603      	mov	r3, r0
 800b32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 f91e 	bl	800b570 <USBD_Get_USB_Status>
 800b334:	4603      	mov	r3, r0
 800b336:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800b338:	7bbb      	ldrb	r3, [r7, #14]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b342:	b580      	push	{r7, lr}
 800b344:	b084      	sub	sp, #16
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
 800b34a:	460b      	mov	r3, r1
 800b34c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b35c:	78fa      	ldrb	r2, [r7, #3]
 800b35e:	4611      	mov	r1, r2
 800b360:	4618      	mov	r0, r3
 800b362:	f7f7 fc84 	bl	8002c6e <HAL_PCD_EP_ClrStall>
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800b36a:	7bfb      	ldrb	r3, [r7, #15]
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 f8ff 	bl	800b570 <USBD_Get_USB_Status>
 800b372:	4603      	mov	r3, r0
 800b374:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800b376:	7bbb      	ldrb	r3, [r7, #14]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3710      	adds	r7, #16
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b392:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800b394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	da0b      	bge.n	800b3b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800b39c:	78fb      	ldrb	r3, [r7, #3]
 800b39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3a2:	68f9      	ldr	r1, [r7, #12]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	1a9b      	subs	r3, r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	440b      	add	r3, r1
 800b3ae:	333e      	adds	r3, #62	; 0x3e
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	e00b      	b.n	800b3cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800b3b4:	78fb      	ldrb	r3, [r7, #3]
 800b3b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3ba:	68f9      	ldr	r1, [r7, #12]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	00db      	lsls	r3, r3, #3
 800b3c0:	1a9b      	subs	r3, r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	440b      	add	r3, r1
 800b3c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b3f2:	78fa      	ldrb	r2, [r7, #3]
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f7 fa51 	bl	800289e <HAL_PCD_SetAddress>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800b400:	7bfb      	ldrb	r3, [r7, #15]
 800b402:	4618      	mov	r0, r3
 800b404:	f000 f8b4 	bl	800b570 <USBD_Get_USB_Status>
 800b408:	4603      	mov	r3, r0
 800b40a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800b40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b086      	sub	sp, #24
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	60f8      	str	r0, [r7, #12]
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	461a      	mov	r2, r3
 800b422:	460b      	mov	r3, r1
 800b424:	72fb      	strb	r3, [r7, #11]
 800b426:	4613      	mov	r3, r2
 800b428:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b42a:	2300      	movs	r3, #0
 800b42c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b438:	893b      	ldrh	r3, [r7, #8]
 800b43a:	7af9      	ldrb	r1, [r7, #11]
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	f7f7 fb68 	bl	8002b12 <HAL_PCD_EP_Transmit>
 800b442:	4603      	mov	r3, r0
 800b444:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	4618      	mov	r0, r3
 800b44a:	f000 f891 	bl	800b570 <USBD_Get_USB_Status>
 800b44e:	4603      	mov	r3, r0
 800b450:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800b452:	7dbb      	ldrb	r3, [r7, #22]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3718      	adds	r7, #24
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	607a      	str	r2, [r7, #4]
 800b466:	461a      	mov	r2, r3
 800b468:	460b      	mov	r3, r1
 800b46a:	72fb      	strb	r3, [r7, #11]
 800b46c:	4613      	mov	r3, r2
 800b46e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b470:	2300      	movs	r3, #0
 800b472:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800b47e:	893b      	ldrh	r3, [r7, #8]
 800b480:	7af9      	ldrb	r1, [r7, #11]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	f7f7 fae2 	bl	8002a4c <HAL_PCD_EP_Receive>
 800b488:	4603      	mov	r3, r0
 800b48a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800b48c:	7dfb      	ldrb	r3, [r7, #23]
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 f86e 	bl	800b570 <USBD_Get_USB_Status>
 800b494:	4603      	mov	r3, r0
 800b496:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800b498:	7dbb      	ldrb	r3, [r7, #22]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3718      	adds	r7, #24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b082      	sub	sp, #8
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b4b4:	78fa      	ldrb	r2, [r7, #3]
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7f7 fb12 	bl	8002ae2 <HAL_PCD_EP_GetRxCount>
 800b4be:	4603      	mov	r3, r0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b4d4:	78fb      	ldrb	r3, [r7, #3]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d002      	beq.n	800b4e0 <HAL_PCDEx_LPM_Callback+0x18>
 800b4da:	2b01      	cmp	r3, #1
 800b4dc:	d01f      	beq.n	800b51e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 800b4de:	e03b      	b.n	800b558 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a1b      	ldr	r3, [r3, #32]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d007      	beq.n	800b4f8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b4e8:	f000 f83c 	bl	800b564 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4ec:	4b1c      	ldr	r3, [pc, #112]	; (800b560 <HAL_PCDEx_LPM_Callback+0x98>)
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	4a1b      	ldr	r2, [pc, #108]	; (800b560 <HAL_PCDEx_LPM_Callback+0x98>)
 800b4f2:	f023 0306 	bic.w	r3, r3, #6
 800b4f6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	6812      	ldr	r2, [r2, #0]
 800b506:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b50a:	f023 0301 	bic.w	r3, r3, #1
 800b50e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b516:	4618      	mov	r0, r3
 800b518:	f7fb fdfb 	bl	8007112 <USBD_LL_Resume>
    break;
 800b51c:	e01c      	b.n	800b558 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b530:	f043 0301 	orr.w	r3, r3, #1
 800b534:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fb fdd3 	bl	80070e8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d005      	beq.n	800b556 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b54a:	4b05      	ldr	r3, [pc, #20]	; (800b560 <HAL_PCDEx_LPM_Callback+0x98>)
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	4a04      	ldr	r2, [pc, #16]	; (800b560 <HAL_PCDEx_LPM_Callback+0x98>)
 800b550:	f043 0306 	orr.w	r3, r3, #6
 800b554:	6113      	str	r3, [r2, #16]
    break;   
 800b556:	bf00      	nop
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	e000ed00 	.word	0xe000ed00

0800b564 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b568:	f7fe fdbc 	bl	800a0e4 <SystemClock_Config>
}
 800b56c:	bf00      	nop
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	4603      	mov	r3, r0
 800b578:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	2b03      	cmp	r3, #3
 800b582:	d817      	bhi.n	800b5b4 <USBD_Get_USB_Status+0x44>
 800b584:	a201      	add	r2, pc, #4	; (adr r2, 800b58c <USBD_Get_USB_Status+0x1c>)
 800b586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58a:	bf00      	nop
 800b58c:	0800b59d 	.word	0x0800b59d
 800b590:	0800b5a3 	.word	0x0800b5a3
 800b594:	0800b5a9 	.word	0x0800b5a9
 800b598:	0800b5af 	.word	0x0800b5af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	73fb      	strb	r3, [r7, #15]
    break;
 800b5a0:	e00b      	b.n	800b5ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5a2:	2302      	movs	r3, #2
 800b5a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5a6:	e008      	b.n	800b5ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ac:	e005      	b.n	800b5ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b5b2:	e002      	b.n	800b5ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5b8:	bf00      	nop
  }
  return usb_status;
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	6039      	str	r1, [r7, #0]
 800b5d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	2212      	movs	r2, #18
 800b5d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b5da:	4b03      	ldr	r3, [pc, #12]	; (800b5e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	370c      	adds	r7, #12
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr
 800b5e8:	2000014c 	.word	0x2000014c

0800b5ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	6039      	str	r1, [r7, #0]
 800b5f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	2204      	movs	r2, #4
 800b5fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b5fe:	4b03      	ldr	r3, [pc, #12]	; (800b60c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	2000016c 	.word	0x2000016c

0800b610 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	6039      	str	r1, [r7, #0]
 800b61a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b61c:	79fb      	ldrb	r3, [r7, #7]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d105      	bne.n	800b62e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	4907      	ldr	r1, [pc, #28]	; (800b644 <USBD_FS_ProductStrDescriptor+0x34>)
 800b626:	4808      	ldr	r0, [pc, #32]	; (800b648 <USBD_FS_ProductStrDescriptor+0x38>)
 800b628:	f7fc fab6 	bl	8007b98 <USBD_GetString>
 800b62c:	e004      	b.n	800b638 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	4904      	ldr	r1, [pc, #16]	; (800b644 <USBD_FS_ProductStrDescriptor+0x34>)
 800b632:	4805      	ldr	r0, [pc, #20]	; (800b648 <USBD_FS_ProductStrDescriptor+0x38>)
 800b634:	f7fc fab0 	bl	8007b98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b638:	4b02      	ldr	r3, [pc, #8]	; (800b644 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop
 800b644:	20025bac 	.word	0x20025bac
 800b648:	0800c720 	.word	0x0800c720

0800b64c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	4603      	mov	r3, r0
 800b654:	6039      	str	r1, [r7, #0]
 800b656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	4904      	ldr	r1, [pc, #16]	; (800b66c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b65c:	4804      	ldr	r0, [pc, #16]	; (800b670 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b65e:	f7fc fa9b 	bl	8007b98 <USBD_GetString>
  return USBD_StrDesc;
 800b662:	4b02      	ldr	r3, [pc, #8]	; (800b66c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b664:	4618      	mov	r0, r3
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}
 800b66c:	20025bac 	.word	0x20025bac
 800b670:	0800c738 	.word	0x0800c738

0800b674 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	4603      	mov	r3, r0
 800b67c:	6039      	str	r1, [r7, #0]
 800b67e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	221a      	movs	r2, #26
 800b684:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b686:	f000 f855 	bl	800b734 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b68a:	4b02      	ldr	r3, [pc, #8]	; (800b694 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	20000170 	.word	0x20000170

0800b698 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	6039      	str	r1, [r7, #0]
 800b6a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d105      	bne.n	800b6b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	4907      	ldr	r1, [pc, #28]	; (800b6cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6ae:	4808      	ldr	r0, [pc, #32]	; (800b6d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6b0:	f7fc fa72 	bl	8007b98 <USBD_GetString>
 800b6b4:	e004      	b.n	800b6c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	4904      	ldr	r1, [pc, #16]	; (800b6cc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b6ba:	4805      	ldr	r0, [pc, #20]	; (800b6d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b6bc:	f7fc fa6c 	bl	8007b98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6c0:	4b02      	ldr	r3, [pc, #8]	; (800b6cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20025bac 	.word	0x20025bac
 800b6d0:	0800c74c 	.word	0x0800c74c

0800b6d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	6039      	str	r1, [r7, #0]
 800b6de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d105      	bne.n	800b6f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	4907      	ldr	r1, [pc, #28]	; (800b708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6ea:	4808      	ldr	r0, [pc, #32]	; (800b70c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6ec:	f7fc fa54 	bl	8007b98 <USBD_GetString>
 800b6f0:	e004      	b.n	800b6fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	4904      	ldr	r1, [pc, #16]	; (800b708 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b6f6:	4805      	ldr	r0, [pc, #20]	; (800b70c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b6f8:	f7fc fa4e 	bl	8007b98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6fc:	4b02      	ldr	r3, [pc, #8]	; (800b708 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20025bac 	.word	0x20025bac
 800b70c:	0800c758 	.word	0x0800c758

0800b710 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	4603      	mov	r3, r0
 800b718:	6039      	str	r1, [r7, #0]
 800b71a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	220c      	movs	r2, #12
 800b720:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b722:	4b03      	ldr	r3, [pc, #12]	; (800b730 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	20000160 	.word	0x20000160

0800b734 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b73a:	4b0f      	ldr	r3, [pc, #60]	; (800b778 <Get_SerialNum+0x44>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b740:	4b0e      	ldr	r3, [pc, #56]	; (800b77c <Get_SerialNum+0x48>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b746:	4b0e      	ldr	r3, [pc, #56]	; (800b780 <Get_SerialNum+0x4c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4413      	add	r3, r2
 800b752:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d009      	beq.n	800b76e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b75a:	2208      	movs	r2, #8
 800b75c:	4909      	ldr	r1, [pc, #36]	; (800b784 <Get_SerialNum+0x50>)
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 f814 	bl	800b78c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b764:	2204      	movs	r2, #4
 800b766:	4908      	ldr	r1, [pc, #32]	; (800b788 <Get_SerialNum+0x54>)
 800b768:	68b8      	ldr	r0, [r7, #8]
 800b76a:	f000 f80f 	bl	800b78c <IntToUnicode>
  }
}
 800b76e:	bf00      	nop
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	1ff0f420 	.word	0x1ff0f420
 800b77c:	1ff0f424 	.word	0x1ff0f424
 800b780:	1ff0f428 	.word	0x1ff0f428
 800b784:	20000172 	.word	0x20000172
 800b788:	20000182 	.word	0x20000182

0800b78c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b087      	sub	sp, #28
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	4613      	mov	r3, r2
 800b798:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b79a:	2300      	movs	r3, #0
 800b79c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b79e:	2300      	movs	r3, #0
 800b7a0:	75fb      	strb	r3, [r7, #23]
 800b7a2:	e027      	b.n	800b7f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	0f1b      	lsrs	r3, r3, #28
 800b7a8:	2b09      	cmp	r3, #9
 800b7aa:	d80b      	bhi.n	800b7c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	0f1b      	lsrs	r3, r3, #28
 800b7b0:	b2da      	uxtb	r2, r3
 800b7b2:	7dfb      	ldrb	r3, [r7, #23]
 800b7b4:	005b      	lsls	r3, r3, #1
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	440b      	add	r3, r1
 800b7bc:	3230      	adds	r2, #48	; 0x30
 800b7be:	b2d2      	uxtb	r2, r2
 800b7c0:	701a      	strb	r2, [r3, #0]
 800b7c2:	e00a      	b.n	800b7da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	0f1b      	lsrs	r3, r3, #28
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	7dfb      	ldrb	r3, [r7, #23]
 800b7cc:	005b      	lsls	r3, r3, #1
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	440b      	add	r3, r1
 800b7d4:	3237      	adds	r2, #55	; 0x37
 800b7d6:	b2d2      	uxtb	r2, r2
 800b7d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	011b      	lsls	r3, r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b7e0:	7dfb      	ldrb	r3, [r7, #23]
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b7ee:	7dfb      	ldrb	r3, [r7, #23]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	75fb      	strb	r3, [r7, #23]
 800b7f4:	7dfa      	ldrb	r2, [r7, #23]
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d3d3      	bcc.n	800b7a4 <IntToUnicode+0x18>
  }
}
 800b7fc:	bf00      	nop
 800b7fe:	371c      	adds	r7, #28
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b808:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b840 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b80c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b80e:	e003      	b.n	800b818 <LoopCopyDataInit>

0800b810 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b810:	4b0c      	ldr	r3, [pc, #48]	; (800b844 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b812:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b814:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b816:	3104      	adds	r1, #4

0800b818 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b818:	480b      	ldr	r0, [pc, #44]	; (800b848 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b81a:	4b0c      	ldr	r3, [pc, #48]	; (800b84c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b81c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b81e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b820:	d3f6      	bcc.n	800b810 <CopyDataInit>
  ldr  r2, =_sbss
 800b822:	4a0b      	ldr	r2, [pc, #44]	; (800b850 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b824:	e002      	b.n	800b82c <LoopFillZerobss>

0800b826 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b826:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b828:	f842 3b04 	str.w	r3, [r2], #4

0800b82c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b82c:	4b09      	ldr	r3, [pc, #36]	; (800b854 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b82e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b830:	d3f9      	bcc.n	800b826 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b832:	f7ff fa23 	bl	800ac7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b836:	f000 f817 	bl	800b868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b83a:	f7fe fbf7 	bl	800a02c <main>
  bx  lr    
 800b83e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b840:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800b844:	0800c828 	.word	0x0800c828
  ldr  r0, =_sdata
 800b848:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b84c:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 800b850:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800b854:	20025db0 	.word	0x20025db0

0800b858 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b858:	e7fe      	b.n	800b858 <CAN1_RX0_IRQHandler>
	...

0800b85c <__errno>:
 800b85c:	4b01      	ldr	r3, [pc, #4]	; (800b864 <__errno+0x8>)
 800b85e:	6818      	ldr	r0, [r3, #0]
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	2000018c 	.word	0x2000018c

0800b868 <__libc_init_array>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	4e0d      	ldr	r6, [pc, #52]	; (800b8a0 <__libc_init_array+0x38>)
 800b86c:	4c0d      	ldr	r4, [pc, #52]	; (800b8a4 <__libc_init_array+0x3c>)
 800b86e:	1ba4      	subs	r4, r4, r6
 800b870:	10a4      	asrs	r4, r4, #2
 800b872:	2500      	movs	r5, #0
 800b874:	42a5      	cmp	r5, r4
 800b876:	d109      	bne.n	800b88c <__libc_init_array+0x24>
 800b878:	4e0b      	ldr	r6, [pc, #44]	; (800b8a8 <__libc_init_array+0x40>)
 800b87a:	4c0c      	ldr	r4, [pc, #48]	; (800b8ac <__libc_init_array+0x44>)
 800b87c:	f000 ff20 	bl	800c6c0 <_init>
 800b880:	1ba4      	subs	r4, r4, r6
 800b882:	10a4      	asrs	r4, r4, #2
 800b884:	2500      	movs	r5, #0
 800b886:	42a5      	cmp	r5, r4
 800b888:	d105      	bne.n	800b896 <__libc_init_array+0x2e>
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b890:	4798      	blx	r3
 800b892:	3501      	adds	r5, #1
 800b894:	e7ee      	b.n	800b874 <__libc_init_array+0xc>
 800b896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b89a:	4798      	blx	r3
 800b89c:	3501      	adds	r5, #1
 800b89e:	e7f2      	b.n	800b886 <__libc_init_array+0x1e>
 800b8a0:	0800c820 	.word	0x0800c820
 800b8a4:	0800c820 	.word	0x0800c820
 800b8a8:	0800c820 	.word	0x0800c820
 800b8ac:	0800c824 	.word	0x0800c824

0800b8b0 <malloc>:
 800b8b0:	4b02      	ldr	r3, [pc, #8]	; (800b8bc <malloc+0xc>)
 800b8b2:	4601      	mov	r1, r0
 800b8b4:	6818      	ldr	r0, [r3, #0]
 800b8b6:	f000 b86d 	b.w	800b994 <_malloc_r>
 800b8ba:	bf00      	nop
 800b8bc:	2000018c 	.word	0x2000018c

0800b8c0 <free>:
 800b8c0:	4b02      	ldr	r3, [pc, #8]	; (800b8cc <free+0xc>)
 800b8c2:	4601      	mov	r1, r0
 800b8c4:	6818      	ldr	r0, [r3, #0]
 800b8c6:	f000 b817 	b.w	800b8f8 <_free_r>
 800b8ca:	bf00      	nop
 800b8cc:	2000018c 	.word	0x2000018c

0800b8d0 <memcpy>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	1e43      	subs	r3, r0, #1
 800b8d4:	440a      	add	r2, r1
 800b8d6:	4291      	cmp	r1, r2
 800b8d8:	d100      	bne.n	800b8dc <memcpy+0xc>
 800b8da:	bd10      	pop	{r4, pc}
 800b8dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8e4:	e7f7      	b.n	800b8d6 <memcpy+0x6>

0800b8e6 <memset>:
 800b8e6:	4402      	add	r2, r0
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d100      	bne.n	800b8f0 <memset+0xa>
 800b8ee:	4770      	bx	lr
 800b8f0:	f803 1b01 	strb.w	r1, [r3], #1
 800b8f4:	e7f9      	b.n	800b8ea <memset+0x4>
	...

0800b8f8 <_free_r>:
 800b8f8:	b538      	push	{r3, r4, r5, lr}
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	2900      	cmp	r1, #0
 800b8fe:	d045      	beq.n	800b98c <_free_r+0x94>
 800b900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b904:	1f0c      	subs	r4, r1, #4
 800b906:	2b00      	cmp	r3, #0
 800b908:	bfb8      	it	lt
 800b90a:	18e4      	addlt	r4, r4, r3
 800b90c:	f000 f98e 	bl	800bc2c <__malloc_lock>
 800b910:	4a1f      	ldr	r2, [pc, #124]	; (800b990 <_free_r+0x98>)
 800b912:	6813      	ldr	r3, [r2, #0]
 800b914:	4610      	mov	r0, r2
 800b916:	b933      	cbnz	r3, 800b926 <_free_r+0x2e>
 800b918:	6063      	str	r3, [r4, #4]
 800b91a:	6014      	str	r4, [r2, #0]
 800b91c:	4628      	mov	r0, r5
 800b91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b922:	f000 b984 	b.w	800bc2e <__malloc_unlock>
 800b926:	42a3      	cmp	r3, r4
 800b928:	d90c      	bls.n	800b944 <_free_r+0x4c>
 800b92a:	6821      	ldr	r1, [r4, #0]
 800b92c:	1862      	adds	r2, r4, r1
 800b92e:	4293      	cmp	r3, r2
 800b930:	bf04      	itt	eq
 800b932:	681a      	ldreq	r2, [r3, #0]
 800b934:	685b      	ldreq	r3, [r3, #4]
 800b936:	6063      	str	r3, [r4, #4]
 800b938:	bf04      	itt	eq
 800b93a:	1852      	addeq	r2, r2, r1
 800b93c:	6022      	streq	r2, [r4, #0]
 800b93e:	6004      	str	r4, [r0, #0]
 800b940:	e7ec      	b.n	800b91c <_free_r+0x24>
 800b942:	4613      	mov	r3, r2
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	b10a      	cbz	r2, 800b94c <_free_r+0x54>
 800b948:	42a2      	cmp	r2, r4
 800b94a:	d9fa      	bls.n	800b942 <_free_r+0x4a>
 800b94c:	6819      	ldr	r1, [r3, #0]
 800b94e:	1858      	adds	r0, r3, r1
 800b950:	42a0      	cmp	r0, r4
 800b952:	d10b      	bne.n	800b96c <_free_r+0x74>
 800b954:	6820      	ldr	r0, [r4, #0]
 800b956:	4401      	add	r1, r0
 800b958:	1858      	adds	r0, r3, r1
 800b95a:	4282      	cmp	r2, r0
 800b95c:	6019      	str	r1, [r3, #0]
 800b95e:	d1dd      	bne.n	800b91c <_free_r+0x24>
 800b960:	6810      	ldr	r0, [r2, #0]
 800b962:	6852      	ldr	r2, [r2, #4]
 800b964:	605a      	str	r2, [r3, #4]
 800b966:	4401      	add	r1, r0
 800b968:	6019      	str	r1, [r3, #0]
 800b96a:	e7d7      	b.n	800b91c <_free_r+0x24>
 800b96c:	d902      	bls.n	800b974 <_free_r+0x7c>
 800b96e:	230c      	movs	r3, #12
 800b970:	602b      	str	r3, [r5, #0]
 800b972:	e7d3      	b.n	800b91c <_free_r+0x24>
 800b974:	6820      	ldr	r0, [r4, #0]
 800b976:	1821      	adds	r1, r4, r0
 800b978:	428a      	cmp	r2, r1
 800b97a:	bf04      	itt	eq
 800b97c:	6811      	ldreq	r1, [r2, #0]
 800b97e:	6852      	ldreq	r2, [r2, #4]
 800b980:	6062      	str	r2, [r4, #4]
 800b982:	bf04      	itt	eq
 800b984:	1809      	addeq	r1, r1, r0
 800b986:	6021      	streq	r1, [r4, #0]
 800b988:	605c      	str	r4, [r3, #4]
 800b98a:	e7c7      	b.n	800b91c <_free_r+0x24>
 800b98c:	bd38      	pop	{r3, r4, r5, pc}
 800b98e:	bf00      	nop
 800b990:	2000435c 	.word	0x2000435c

0800b994 <_malloc_r>:
 800b994:	b570      	push	{r4, r5, r6, lr}
 800b996:	1ccd      	adds	r5, r1, #3
 800b998:	f025 0503 	bic.w	r5, r5, #3
 800b99c:	3508      	adds	r5, #8
 800b99e:	2d0c      	cmp	r5, #12
 800b9a0:	bf38      	it	cc
 800b9a2:	250c      	movcc	r5, #12
 800b9a4:	2d00      	cmp	r5, #0
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	db01      	blt.n	800b9ae <_malloc_r+0x1a>
 800b9aa:	42a9      	cmp	r1, r5
 800b9ac:	d903      	bls.n	800b9b6 <_malloc_r+0x22>
 800b9ae:	230c      	movs	r3, #12
 800b9b0:	6033      	str	r3, [r6, #0]
 800b9b2:	2000      	movs	r0, #0
 800b9b4:	bd70      	pop	{r4, r5, r6, pc}
 800b9b6:	f000 f939 	bl	800bc2c <__malloc_lock>
 800b9ba:	4a21      	ldr	r2, [pc, #132]	; (800ba40 <_malloc_r+0xac>)
 800b9bc:	6814      	ldr	r4, [r2, #0]
 800b9be:	4621      	mov	r1, r4
 800b9c0:	b991      	cbnz	r1, 800b9e8 <_malloc_r+0x54>
 800b9c2:	4c20      	ldr	r4, [pc, #128]	; (800ba44 <_malloc_r+0xb0>)
 800b9c4:	6823      	ldr	r3, [r4, #0]
 800b9c6:	b91b      	cbnz	r3, 800b9d0 <_malloc_r+0x3c>
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f000 f855 	bl	800ba78 <_sbrk_r>
 800b9ce:	6020      	str	r0, [r4, #0]
 800b9d0:	4629      	mov	r1, r5
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f000 f850 	bl	800ba78 <_sbrk_r>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d124      	bne.n	800ba26 <_malloc_r+0x92>
 800b9dc:	230c      	movs	r3, #12
 800b9de:	6033      	str	r3, [r6, #0]
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	f000 f924 	bl	800bc2e <__malloc_unlock>
 800b9e6:	e7e4      	b.n	800b9b2 <_malloc_r+0x1e>
 800b9e8:	680b      	ldr	r3, [r1, #0]
 800b9ea:	1b5b      	subs	r3, r3, r5
 800b9ec:	d418      	bmi.n	800ba20 <_malloc_r+0x8c>
 800b9ee:	2b0b      	cmp	r3, #11
 800b9f0:	d90f      	bls.n	800ba12 <_malloc_r+0x7e>
 800b9f2:	600b      	str	r3, [r1, #0]
 800b9f4:	50cd      	str	r5, [r1, r3]
 800b9f6:	18cc      	adds	r4, r1, r3
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f000 f918 	bl	800bc2e <__malloc_unlock>
 800b9fe:	f104 000b 	add.w	r0, r4, #11
 800ba02:	1d23      	adds	r3, r4, #4
 800ba04:	f020 0007 	bic.w	r0, r0, #7
 800ba08:	1ac3      	subs	r3, r0, r3
 800ba0a:	d0d3      	beq.n	800b9b4 <_malloc_r+0x20>
 800ba0c:	425a      	negs	r2, r3
 800ba0e:	50e2      	str	r2, [r4, r3]
 800ba10:	e7d0      	b.n	800b9b4 <_malloc_r+0x20>
 800ba12:	428c      	cmp	r4, r1
 800ba14:	684b      	ldr	r3, [r1, #4]
 800ba16:	bf16      	itet	ne
 800ba18:	6063      	strne	r3, [r4, #4]
 800ba1a:	6013      	streq	r3, [r2, #0]
 800ba1c:	460c      	movne	r4, r1
 800ba1e:	e7eb      	b.n	800b9f8 <_malloc_r+0x64>
 800ba20:	460c      	mov	r4, r1
 800ba22:	6849      	ldr	r1, [r1, #4]
 800ba24:	e7cc      	b.n	800b9c0 <_malloc_r+0x2c>
 800ba26:	1cc4      	adds	r4, r0, #3
 800ba28:	f024 0403 	bic.w	r4, r4, #3
 800ba2c:	42a0      	cmp	r0, r4
 800ba2e:	d005      	beq.n	800ba3c <_malloc_r+0xa8>
 800ba30:	1a21      	subs	r1, r4, r0
 800ba32:	4630      	mov	r0, r6
 800ba34:	f000 f820 	bl	800ba78 <_sbrk_r>
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d0cf      	beq.n	800b9dc <_malloc_r+0x48>
 800ba3c:	6025      	str	r5, [r4, #0]
 800ba3e:	e7db      	b.n	800b9f8 <_malloc_r+0x64>
 800ba40:	2000435c 	.word	0x2000435c
 800ba44:	20004360 	.word	0x20004360

0800ba48 <iprintf>:
 800ba48:	b40f      	push	{r0, r1, r2, r3}
 800ba4a:	4b0a      	ldr	r3, [pc, #40]	; (800ba74 <iprintf+0x2c>)
 800ba4c:	b513      	push	{r0, r1, r4, lr}
 800ba4e:	681c      	ldr	r4, [r3, #0]
 800ba50:	b124      	cbz	r4, 800ba5c <iprintf+0x14>
 800ba52:	69a3      	ldr	r3, [r4, #24]
 800ba54:	b913      	cbnz	r3, 800ba5c <iprintf+0x14>
 800ba56:	4620      	mov	r0, r4
 800ba58:	f000 f85e 	bl	800bb18 <__sinit>
 800ba5c:	ab05      	add	r3, sp, #20
 800ba5e:	9a04      	ldr	r2, [sp, #16]
 800ba60:	68a1      	ldr	r1, [r4, #8]
 800ba62:	9301      	str	r3, [sp, #4]
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 f90d 	bl	800bc84 <_vfiprintf_r>
 800ba6a:	b002      	add	sp, #8
 800ba6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba70:	b004      	add	sp, #16
 800ba72:	4770      	bx	lr
 800ba74:	2000018c 	.word	0x2000018c

0800ba78 <_sbrk_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4c06      	ldr	r4, [pc, #24]	; (800ba94 <_sbrk_r+0x1c>)
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	4605      	mov	r5, r0
 800ba80:	4608      	mov	r0, r1
 800ba82:	6023      	str	r3, [r4, #0]
 800ba84:	f7ff f8ce 	bl	800ac24 <_sbrk>
 800ba88:	1c43      	adds	r3, r0, #1
 800ba8a:	d102      	bne.n	800ba92 <_sbrk_r+0x1a>
 800ba8c:	6823      	ldr	r3, [r4, #0]
 800ba8e:	b103      	cbz	r3, 800ba92 <_sbrk_r+0x1a>
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	bd38      	pop	{r3, r4, r5, pc}
 800ba94:	20025dac 	.word	0x20025dac

0800ba98 <std>:
 800ba98:	2300      	movs	r3, #0
 800ba9a:	b510      	push	{r4, lr}
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	e9c0 3300 	strd	r3, r3, [r0]
 800baa2:	6083      	str	r3, [r0, #8]
 800baa4:	8181      	strh	r1, [r0, #12]
 800baa6:	6643      	str	r3, [r0, #100]	; 0x64
 800baa8:	81c2      	strh	r2, [r0, #14]
 800baaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baae:	6183      	str	r3, [r0, #24]
 800bab0:	4619      	mov	r1, r3
 800bab2:	2208      	movs	r2, #8
 800bab4:	305c      	adds	r0, #92	; 0x5c
 800bab6:	f7ff ff16 	bl	800b8e6 <memset>
 800baba:	4b05      	ldr	r3, [pc, #20]	; (800bad0 <std+0x38>)
 800babc:	6263      	str	r3, [r4, #36]	; 0x24
 800babe:	4b05      	ldr	r3, [pc, #20]	; (800bad4 <std+0x3c>)
 800bac0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bac2:	4b05      	ldr	r3, [pc, #20]	; (800bad8 <std+0x40>)
 800bac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bac6:	4b05      	ldr	r3, [pc, #20]	; (800badc <std+0x44>)
 800bac8:	6224      	str	r4, [r4, #32]
 800baca:	6323      	str	r3, [r4, #48]	; 0x30
 800bacc:	bd10      	pop	{r4, pc}
 800bace:	bf00      	nop
 800bad0:	0800c1c1 	.word	0x0800c1c1
 800bad4:	0800c1e3 	.word	0x0800c1e3
 800bad8:	0800c21b 	.word	0x0800c21b
 800badc:	0800c23f 	.word	0x0800c23f

0800bae0 <_cleanup_r>:
 800bae0:	4901      	ldr	r1, [pc, #4]	; (800bae8 <_cleanup_r+0x8>)
 800bae2:	f000 b885 	b.w	800bbf0 <_fwalk_reent>
 800bae6:	bf00      	nop
 800bae8:	0800c519 	.word	0x0800c519

0800baec <__sfmoreglue>:
 800baec:	b570      	push	{r4, r5, r6, lr}
 800baee:	1e4a      	subs	r2, r1, #1
 800baf0:	2568      	movs	r5, #104	; 0x68
 800baf2:	4355      	muls	r5, r2
 800baf4:	460e      	mov	r6, r1
 800baf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bafa:	f7ff ff4b 	bl	800b994 <_malloc_r>
 800bafe:	4604      	mov	r4, r0
 800bb00:	b140      	cbz	r0, 800bb14 <__sfmoreglue+0x28>
 800bb02:	2100      	movs	r1, #0
 800bb04:	e9c0 1600 	strd	r1, r6, [r0]
 800bb08:	300c      	adds	r0, #12
 800bb0a:	60a0      	str	r0, [r4, #8]
 800bb0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb10:	f7ff fee9 	bl	800b8e6 <memset>
 800bb14:	4620      	mov	r0, r4
 800bb16:	bd70      	pop	{r4, r5, r6, pc}

0800bb18 <__sinit>:
 800bb18:	6983      	ldr	r3, [r0, #24]
 800bb1a:	b510      	push	{r4, lr}
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	bb33      	cbnz	r3, 800bb6e <__sinit+0x56>
 800bb20:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bb24:	6503      	str	r3, [r0, #80]	; 0x50
 800bb26:	4b12      	ldr	r3, [pc, #72]	; (800bb70 <__sinit+0x58>)
 800bb28:	4a12      	ldr	r2, [pc, #72]	; (800bb74 <__sinit+0x5c>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	6282      	str	r2, [r0, #40]	; 0x28
 800bb2e:	4298      	cmp	r0, r3
 800bb30:	bf04      	itt	eq
 800bb32:	2301      	moveq	r3, #1
 800bb34:	6183      	streq	r3, [r0, #24]
 800bb36:	f000 f81f 	bl	800bb78 <__sfp>
 800bb3a:	6060      	str	r0, [r4, #4]
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f000 f81b 	bl	800bb78 <__sfp>
 800bb42:	60a0      	str	r0, [r4, #8]
 800bb44:	4620      	mov	r0, r4
 800bb46:	f000 f817 	bl	800bb78 <__sfp>
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	60e0      	str	r0, [r4, #12]
 800bb4e:	2104      	movs	r1, #4
 800bb50:	6860      	ldr	r0, [r4, #4]
 800bb52:	f7ff ffa1 	bl	800ba98 <std>
 800bb56:	2201      	movs	r2, #1
 800bb58:	2109      	movs	r1, #9
 800bb5a:	68a0      	ldr	r0, [r4, #8]
 800bb5c:	f7ff ff9c 	bl	800ba98 <std>
 800bb60:	2202      	movs	r2, #2
 800bb62:	2112      	movs	r1, #18
 800bb64:	68e0      	ldr	r0, [r4, #12]
 800bb66:	f7ff ff97 	bl	800ba98 <std>
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	61a3      	str	r3, [r4, #24]
 800bb6e:	bd10      	pop	{r4, pc}
 800bb70:	0800c780 	.word	0x0800c780
 800bb74:	0800bae1 	.word	0x0800bae1

0800bb78 <__sfp>:
 800bb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb7a:	4b1b      	ldr	r3, [pc, #108]	; (800bbe8 <__sfp+0x70>)
 800bb7c:	681e      	ldr	r6, [r3, #0]
 800bb7e:	69b3      	ldr	r3, [r6, #24]
 800bb80:	4607      	mov	r7, r0
 800bb82:	b913      	cbnz	r3, 800bb8a <__sfp+0x12>
 800bb84:	4630      	mov	r0, r6
 800bb86:	f7ff ffc7 	bl	800bb18 <__sinit>
 800bb8a:	3648      	adds	r6, #72	; 0x48
 800bb8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	d503      	bpl.n	800bb9c <__sfp+0x24>
 800bb94:	6833      	ldr	r3, [r6, #0]
 800bb96:	b133      	cbz	r3, 800bba6 <__sfp+0x2e>
 800bb98:	6836      	ldr	r6, [r6, #0]
 800bb9a:	e7f7      	b.n	800bb8c <__sfp+0x14>
 800bb9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bba0:	b16d      	cbz	r5, 800bbbe <__sfp+0x46>
 800bba2:	3468      	adds	r4, #104	; 0x68
 800bba4:	e7f4      	b.n	800bb90 <__sfp+0x18>
 800bba6:	2104      	movs	r1, #4
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff ff9f 	bl	800baec <__sfmoreglue>
 800bbae:	6030      	str	r0, [r6, #0]
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d1f1      	bne.n	800bb98 <__sfp+0x20>
 800bbb4:	230c      	movs	r3, #12
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	4604      	mov	r4, r0
 800bbba:	4620      	mov	r0, r4
 800bbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbbe:	4b0b      	ldr	r3, [pc, #44]	; (800bbec <__sfp+0x74>)
 800bbc0:	6665      	str	r5, [r4, #100]	; 0x64
 800bbc2:	e9c4 5500 	strd	r5, r5, [r4]
 800bbc6:	60a5      	str	r5, [r4, #8]
 800bbc8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bbcc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbd8:	f7ff fe85 	bl	800b8e6 <memset>
 800bbdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbe4:	e7e9      	b.n	800bbba <__sfp+0x42>
 800bbe6:	bf00      	nop
 800bbe8:	0800c780 	.word	0x0800c780
 800bbec:	ffff0001 	.word	0xffff0001

0800bbf0 <_fwalk_reent>:
 800bbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbf4:	4680      	mov	r8, r0
 800bbf6:	4689      	mov	r9, r1
 800bbf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bbfc:	2600      	movs	r6, #0
 800bbfe:	b914      	cbnz	r4, 800bc06 <_fwalk_reent+0x16>
 800bc00:	4630      	mov	r0, r6
 800bc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc06:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800bc0a:	3f01      	subs	r7, #1
 800bc0c:	d501      	bpl.n	800bc12 <_fwalk_reent+0x22>
 800bc0e:	6824      	ldr	r4, [r4, #0]
 800bc10:	e7f5      	b.n	800bbfe <_fwalk_reent+0xe>
 800bc12:	89ab      	ldrh	r3, [r5, #12]
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d907      	bls.n	800bc28 <_fwalk_reent+0x38>
 800bc18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	d003      	beq.n	800bc28 <_fwalk_reent+0x38>
 800bc20:	4629      	mov	r1, r5
 800bc22:	4640      	mov	r0, r8
 800bc24:	47c8      	blx	r9
 800bc26:	4306      	orrs	r6, r0
 800bc28:	3568      	adds	r5, #104	; 0x68
 800bc2a:	e7ee      	b.n	800bc0a <_fwalk_reent+0x1a>

0800bc2c <__malloc_lock>:
 800bc2c:	4770      	bx	lr

0800bc2e <__malloc_unlock>:
 800bc2e:	4770      	bx	lr

0800bc30 <__sfputc_r>:
 800bc30:	6893      	ldr	r3, [r2, #8]
 800bc32:	3b01      	subs	r3, #1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	b410      	push	{r4}
 800bc38:	6093      	str	r3, [r2, #8]
 800bc3a:	da08      	bge.n	800bc4e <__sfputc_r+0x1e>
 800bc3c:	6994      	ldr	r4, [r2, #24]
 800bc3e:	42a3      	cmp	r3, r4
 800bc40:	db01      	blt.n	800bc46 <__sfputc_r+0x16>
 800bc42:	290a      	cmp	r1, #10
 800bc44:	d103      	bne.n	800bc4e <__sfputc_r+0x1e>
 800bc46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc4a:	f000 bafd 	b.w	800c248 <__swbuf_r>
 800bc4e:	6813      	ldr	r3, [r2, #0]
 800bc50:	1c58      	adds	r0, r3, #1
 800bc52:	6010      	str	r0, [r2, #0]
 800bc54:	7019      	strb	r1, [r3, #0]
 800bc56:	4608      	mov	r0, r1
 800bc58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc5c:	4770      	bx	lr

0800bc5e <__sfputs_r>:
 800bc5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc60:	4606      	mov	r6, r0
 800bc62:	460f      	mov	r7, r1
 800bc64:	4614      	mov	r4, r2
 800bc66:	18d5      	adds	r5, r2, r3
 800bc68:	42ac      	cmp	r4, r5
 800bc6a:	d101      	bne.n	800bc70 <__sfputs_r+0x12>
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	e007      	b.n	800bc80 <__sfputs_r+0x22>
 800bc70:	463a      	mov	r2, r7
 800bc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc76:	4630      	mov	r0, r6
 800bc78:	f7ff ffda 	bl	800bc30 <__sfputc_r>
 800bc7c:	1c43      	adds	r3, r0, #1
 800bc7e:	d1f3      	bne.n	800bc68 <__sfputs_r+0xa>
 800bc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc84 <_vfiprintf_r>:
 800bc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	460c      	mov	r4, r1
 800bc8a:	b09d      	sub	sp, #116	; 0x74
 800bc8c:	4617      	mov	r7, r2
 800bc8e:	461d      	mov	r5, r3
 800bc90:	4606      	mov	r6, r0
 800bc92:	b118      	cbz	r0, 800bc9c <_vfiprintf_r+0x18>
 800bc94:	6983      	ldr	r3, [r0, #24]
 800bc96:	b90b      	cbnz	r3, 800bc9c <_vfiprintf_r+0x18>
 800bc98:	f7ff ff3e 	bl	800bb18 <__sinit>
 800bc9c:	4b7c      	ldr	r3, [pc, #496]	; (800be90 <_vfiprintf_r+0x20c>)
 800bc9e:	429c      	cmp	r4, r3
 800bca0:	d158      	bne.n	800bd54 <_vfiprintf_r+0xd0>
 800bca2:	6874      	ldr	r4, [r6, #4]
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	0718      	lsls	r0, r3, #28
 800bca8:	d55e      	bpl.n	800bd68 <_vfiprintf_r+0xe4>
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d05b      	beq.n	800bd68 <_vfiprintf_r+0xe4>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb4:	2320      	movs	r3, #32
 800bcb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcba:	2330      	movs	r3, #48	; 0x30
 800bcbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcc0:	9503      	str	r5, [sp, #12]
 800bcc2:	f04f 0b01 	mov.w	fp, #1
 800bcc6:	46b8      	mov	r8, r7
 800bcc8:	4645      	mov	r5, r8
 800bcca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bcce:	b10b      	cbz	r3, 800bcd4 <_vfiprintf_r+0x50>
 800bcd0:	2b25      	cmp	r3, #37	; 0x25
 800bcd2:	d154      	bne.n	800bd7e <_vfiprintf_r+0xfa>
 800bcd4:	ebb8 0a07 	subs.w	sl, r8, r7
 800bcd8:	d00b      	beq.n	800bcf2 <_vfiprintf_r+0x6e>
 800bcda:	4653      	mov	r3, sl
 800bcdc:	463a      	mov	r2, r7
 800bcde:	4621      	mov	r1, r4
 800bce0:	4630      	mov	r0, r6
 800bce2:	f7ff ffbc 	bl	800bc5e <__sfputs_r>
 800bce6:	3001      	adds	r0, #1
 800bce8:	f000 80c2 	beq.w	800be70 <_vfiprintf_r+0x1ec>
 800bcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcee:	4453      	add	r3, sl
 800bcf0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf2:	f898 3000 	ldrb.w	r3, [r8]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f000 80ba 	beq.w	800be70 <_vfiprintf_r+0x1ec>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd06:	9304      	str	r3, [sp, #16]
 800bd08:	9307      	str	r3, [sp, #28]
 800bd0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd0e:	931a      	str	r3, [sp, #104]	; 0x68
 800bd10:	46a8      	mov	r8, r5
 800bd12:	2205      	movs	r2, #5
 800bd14:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bd18:	485e      	ldr	r0, [pc, #376]	; (800be94 <_vfiprintf_r+0x210>)
 800bd1a:	f7f4 fa91 	bl	8000240 <memchr>
 800bd1e:	9b04      	ldr	r3, [sp, #16]
 800bd20:	bb78      	cbnz	r0, 800bd82 <_vfiprintf_r+0xfe>
 800bd22:	06d9      	lsls	r1, r3, #27
 800bd24:	bf44      	itt	mi
 800bd26:	2220      	movmi	r2, #32
 800bd28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd2c:	071a      	lsls	r2, r3, #28
 800bd2e:	bf44      	itt	mi
 800bd30:	222b      	movmi	r2, #43	; 0x2b
 800bd32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bd36:	782a      	ldrb	r2, [r5, #0]
 800bd38:	2a2a      	cmp	r2, #42	; 0x2a
 800bd3a:	d02a      	beq.n	800bd92 <_vfiprintf_r+0x10e>
 800bd3c:	9a07      	ldr	r2, [sp, #28]
 800bd3e:	46a8      	mov	r8, r5
 800bd40:	2000      	movs	r0, #0
 800bd42:	250a      	movs	r5, #10
 800bd44:	4641      	mov	r1, r8
 800bd46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd4a:	3b30      	subs	r3, #48	; 0x30
 800bd4c:	2b09      	cmp	r3, #9
 800bd4e:	d969      	bls.n	800be24 <_vfiprintf_r+0x1a0>
 800bd50:	b360      	cbz	r0, 800bdac <_vfiprintf_r+0x128>
 800bd52:	e024      	b.n	800bd9e <_vfiprintf_r+0x11a>
 800bd54:	4b50      	ldr	r3, [pc, #320]	; (800be98 <_vfiprintf_r+0x214>)
 800bd56:	429c      	cmp	r4, r3
 800bd58:	d101      	bne.n	800bd5e <_vfiprintf_r+0xda>
 800bd5a:	68b4      	ldr	r4, [r6, #8]
 800bd5c:	e7a2      	b.n	800bca4 <_vfiprintf_r+0x20>
 800bd5e:	4b4f      	ldr	r3, [pc, #316]	; (800be9c <_vfiprintf_r+0x218>)
 800bd60:	429c      	cmp	r4, r3
 800bd62:	bf08      	it	eq
 800bd64:	68f4      	ldreq	r4, [r6, #12]
 800bd66:	e79d      	b.n	800bca4 <_vfiprintf_r+0x20>
 800bd68:	4621      	mov	r1, r4
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f000 fad0 	bl	800c310 <__swsetup_r>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d09d      	beq.n	800bcb0 <_vfiprintf_r+0x2c>
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd78:	b01d      	add	sp, #116	; 0x74
 800bd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7e:	46a8      	mov	r8, r5
 800bd80:	e7a2      	b.n	800bcc8 <_vfiprintf_r+0x44>
 800bd82:	4a44      	ldr	r2, [pc, #272]	; (800be94 <_vfiprintf_r+0x210>)
 800bd84:	1a80      	subs	r0, r0, r2
 800bd86:	fa0b f000 	lsl.w	r0, fp, r0
 800bd8a:	4318      	orrs	r0, r3
 800bd8c:	9004      	str	r0, [sp, #16]
 800bd8e:	4645      	mov	r5, r8
 800bd90:	e7be      	b.n	800bd10 <_vfiprintf_r+0x8c>
 800bd92:	9a03      	ldr	r2, [sp, #12]
 800bd94:	1d11      	adds	r1, r2, #4
 800bd96:	6812      	ldr	r2, [r2, #0]
 800bd98:	9103      	str	r1, [sp, #12]
 800bd9a:	2a00      	cmp	r2, #0
 800bd9c:	db01      	blt.n	800bda2 <_vfiprintf_r+0x11e>
 800bd9e:	9207      	str	r2, [sp, #28]
 800bda0:	e004      	b.n	800bdac <_vfiprintf_r+0x128>
 800bda2:	4252      	negs	r2, r2
 800bda4:	f043 0302 	orr.w	r3, r3, #2
 800bda8:	9207      	str	r2, [sp, #28]
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	f898 3000 	ldrb.w	r3, [r8]
 800bdb0:	2b2e      	cmp	r3, #46	; 0x2e
 800bdb2:	d10e      	bne.n	800bdd2 <_vfiprintf_r+0x14e>
 800bdb4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bdb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdba:	d138      	bne.n	800be2e <_vfiprintf_r+0x1aa>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	1d1a      	adds	r2, r3, #4
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	9203      	str	r2, [sp, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	bfb8      	it	lt
 800bdc8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bdcc:	f108 0802 	add.w	r8, r8, #2
 800bdd0:	9305      	str	r3, [sp, #20]
 800bdd2:	4d33      	ldr	r5, [pc, #204]	; (800bea0 <_vfiprintf_r+0x21c>)
 800bdd4:	f898 1000 	ldrb.w	r1, [r8]
 800bdd8:	2203      	movs	r2, #3
 800bdda:	4628      	mov	r0, r5
 800bddc:	f7f4 fa30 	bl	8000240 <memchr>
 800bde0:	b140      	cbz	r0, 800bdf4 <_vfiprintf_r+0x170>
 800bde2:	2340      	movs	r3, #64	; 0x40
 800bde4:	1b40      	subs	r0, r0, r5
 800bde6:	fa03 f000 	lsl.w	r0, r3, r0
 800bdea:	9b04      	ldr	r3, [sp, #16]
 800bdec:	4303      	orrs	r3, r0
 800bdee:	f108 0801 	add.w	r8, r8, #1
 800bdf2:	9304      	str	r3, [sp, #16]
 800bdf4:	f898 1000 	ldrb.w	r1, [r8]
 800bdf8:	482a      	ldr	r0, [pc, #168]	; (800bea4 <_vfiprintf_r+0x220>)
 800bdfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdfe:	2206      	movs	r2, #6
 800be00:	f108 0701 	add.w	r7, r8, #1
 800be04:	f7f4 fa1c 	bl	8000240 <memchr>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d037      	beq.n	800be7c <_vfiprintf_r+0x1f8>
 800be0c:	4b26      	ldr	r3, [pc, #152]	; (800bea8 <_vfiprintf_r+0x224>)
 800be0e:	bb1b      	cbnz	r3, 800be58 <_vfiprintf_r+0x1d4>
 800be10:	9b03      	ldr	r3, [sp, #12]
 800be12:	3307      	adds	r3, #7
 800be14:	f023 0307 	bic.w	r3, r3, #7
 800be18:	3308      	adds	r3, #8
 800be1a:	9303      	str	r3, [sp, #12]
 800be1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be1e:	444b      	add	r3, r9
 800be20:	9309      	str	r3, [sp, #36]	; 0x24
 800be22:	e750      	b.n	800bcc6 <_vfiprintf_r+0x42>
 800be24:	fb05 3202 	mla	r2, r5, r2, r3
 800be28:	2001      	movs	r0, #1
 800be2a:	4688      	mov	r8, r1
 800be2c:	e78a      	b.n	800bd44 <_vfiprintf_r+0xc0>
 800be2e:	2300      	movs	r3, #0
 800be30:	f108 0801 	add.w	r8, r8, #1
 800be34:	9305      	str	r3, [sp, #20]
 800be36:	4619      	mov	r1, r3
 800be38:	250a      	movs	r5, #10
 800be3a:	4640      	mov	r0, r8
 800be3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be40:	3a30      	subs	r2, #48	; 0x30
 800be42:	2a09      	cmp	r2, #9
 800be44:	d903      	bls.n	800be4e <_vfiprintf_r+0x1ca>
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0c3      	beq.n	800bdd2 <_vfiprintf_r+0x14e>
 800be4a:	9105      	str	r1, [sp, #20]
 800be4c:	e7c1      	b.n	800bdd2 <_vfiprintf_r+0x14e>
 800be4e:	fb05 2101 	mla	r1, r5, r1, r2
 800be52:	2301      	movs	r3, #1
 800be54:	4680      	mov	r8, r0
 800be56:	e7f0      	b.n	800be3a <_vfiprintf_r+0x1b6>
 800be58:	ab03      	add	r3, sp, #12
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	4622      	mov	r2, r4
 800be5e:	4b13      	ldr	r3, [pc, #76]	; (800beac <_vfiprintf_r+0x228>)
 800be60:	a904      	add	r1, sp, #16
 800be62:	4630      	mov	r0, r6
 800be64:	f3af 8000 	nop.w
 800be68:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800be6c:	4681      	mov	r9, r0
 800be6e:	d1d5      	bne.n	800be1c <_vfiprintf_r+0x198>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	065b      	lsls	r3, r3, #25
 800be74:	f53f af7e 	bmi.w	800bd74 <_vfiprintf_r+0xf0>
 800be78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be7a:	e77d      	b.n	800bd78 <_vfiprintf_r+0xf4>
 800be7c:	ab03      	add	r3, sp, #12
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	4622      	mov	r2, r4
 800be82:	4b0a      	ldr	r3, [pc, #40]	; (800beac <_vfiprintf_r+0x228>)
 800be84:	a904      	add	r1, sp, #16
 800be86:	4630      	mov	r0, r6
 800be88:	f000 f888 	bl	800bf9c <_printf_i>
 800be8c:	e7ec      	b.n	800be68 <_vfiprintf_r+0x1e4>
 800be8e:	bf00      	nop
 800be90:	0800c7a4 	.word	0x0800c7a4
 800be94:	0800c7e4 	.word	0x0800c7e4
 800be98:	0800c7c4 	.word	0x0800c7c4
 800be9c:	0800c784 	.word	0x0800c784
 800bea0:	0800c7ea 	.word	0x0800c7ea
 800bea4:	0800c7ee 	.word	0x0800c7ee
 800bea8:	00000000 	.word	0x00000000
 800beac:	0800bc5f 	.word	0x0800bc5f

0800beb0 <_printf_common>:
 800beb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beb4:	4691      	mov	r9, r2
 800beb6:	461f      	mov	r7, r3
 800beb8:	688a      	ldr	r2, [r1, #8]
 800beba:	690b      	ldr	r3, [r1, #16]
 800bebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bec0:	4293      	cmp	r3, r2
 800bec2:	bfb8      	it	lt
 800bec4:	4613      	movlt	r3, r2
 800bec6:	f8c9 3000 	str.w	r3, [r9]
 800beca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bece:	4606      	mov	r6, r0
 800bed0:	460c      	mov	r4, r1
 800bed2:	b112      	cbz	r2, 800beda <_printf_common+0x2a>
 800bed4:	3301      	adds	r3, #1
 800bed6:	f8c9 3000 	str.w	r3, [r9]
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	0699      	lsls	r1, r3, #26
 800bede:	bf42      	ittt	mi
 800bee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bee4:	3302      	addmi	r3, #2
 800bee6:	f8c9 3000 	strmi.w	r3, [r9]
 800beea:	6825      	ldr	r5, [r4, #0]
 800beec:	f015 0506 	ands.w	r5, r5, #6
 800bef0:	d107      	bne.n	800bf02 <_printf_common+0x52>
 800bef2:	f104 0a19 	add.w	sl, r4, #25
 800bef6:	68e3      	ldr	r3, [r4, #12]
 800bef8:	f8d9 2000 	ldr.w	r2, [r9]
 800befc:	1a9b      	subs	r3, r3, r2
 800befe:	42ab      	cmp	r3, r5
 800bf00:	dc28      	bgt.n	800bf54 <_printf_common+0xa4>
 800bf02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf06:	6822      	ldr	r2, [r4, #0]
 800bf08:	3300      	adds	r3, #0
 800bf0a:	bf18      	it	ne
 800bf0c:	2301      	movne	r3, #1
 800bf0e:	0692      	lsls	r2, r2, #26
 800bf10:	d42d      	bmi.n	800bf6e <_printf_common+0xbe>
 800bf12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf16:	4639      	mov	r1, r7
 800bf18:	4630      	mov	r0, r6
 800bf1a:	47c0      	blx	r8
 800bf1c:	3001      	adds	r0, #1
 800bf1e:	d020      	beq.n	800bf62 <_printf_common+0xb2>
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	68e5      	ldr	r5, [r4, #12]
 800bf24:	f8d9 2000 	ldr.w	r2, [r9]
 800bf28:	f003 0306 	and.w	r3, r3, #6
 800bf2c:	2b04      	cmp	r3, #4
 800bf2e:	bf08      	it	eq
 800bf30:	1aad      	subeq	r5, r5, r2
 800bf32:	68a3      	ldr	r3, [r4, #8]
 800bf34:	6922      	ldr	r2, [r4, #16]
 800bf36:	bf0c      	ite	eq
 800bf38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf3c:	2500      	movne	r5, #0
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	bfc4      	itt	gt
 800bf42:	1a9b      	subgt	r3, r3, r2
 800bf44:	18ed      	addgt	r5, r5, r3
 800bf46:	f04f 0900 	mov.w	r9, #0
 800bf4a:	341a      	adds	r4, #26
 800bf4c:	454d      	cmp	r5, r9
 800bf4e:	d11a      	bne.n	800bf86 <_printf_common+0xd6>
 800bf50:	2000      	movs	r0, #0
 800bf52:	e008      	b.n	800bf66 <_printf_common+0xb6>
 800bf54:	2301      	movs	r3, #1
 800bf56:	4652      	mov	r2, sl
 800bf58:	4639      	mov	r1, r7
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	47c0      	blx	r8
 800bf5e:	3001      	adds	r0, #1
 800bf60:	d103      	bne.n	800bf6a <_printf_common+0xba>
 800bf62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf6a:	3501      	adds	r5, #1
 800bf6c:	e7c3      	b.n	800bef6 <_printf_common+0x46>
 800bf6e:	18e1      	adds	r1, r4, r3
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	2030      	movs	r0, #48	; 0x30
 800bf74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf78:	4422      	add	r2, r4
 800bf7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf82:	3302      	adds	r3, #2
 800bf84:	e7c5      	b.n	800bf12 <_printf_common+0x62>
 800bf86:	2301      	movs	r3, #1
 800bf88:	4622      	mov	r2, r4
 800bf8a:	4639      	mov	r1, r7
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	47c0      	blx	r8
 800bf90:	3001      	adds	r0, #1
 800bf92:	d0e6      	beq.n	800bf62 <_printf_common+0xb2>
 800bf94:	f109 0901 	add.w	r9, r9, #1
 800bf98:	e7d8      	b.n	800bf4c <_printf_common+0x9c>
	...

0800bf9c <_printf_i>:
 800bf9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	7e09      	ldrb	r1, [r1, #24]
 800bfa8:	b085      	sub	sp, #20
 800bfaa:	296e      	cmp	r1, #110	; 0x6e
 800bfac:	4617      	mov	r7, r2
 800bfae:	4606      	mov	r6, r0
 800bfb0:	4698      	mov	r8, r3
 800bfb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bfb4:	f000 80b3 	beq.w	800c11e <_printf_i+0x182>
 800bfb8:	d822      	bhi.n	800c000 <_printf_i+0x64>
 800bfba:	2963      	cmp	r1, #99	; 0x63
 800bfbc:	d036      	beq.n	800c02c <_printf_i+0x90>
 800bfbe:	d80a      	bhi.n	800bfd6 <_printf_i+0x3a>
 800bfc0:	2900      	cmp	r1, #0
 800bfc2:	f000 80b9 	beq.w	800c138 <_printf_i+0x19c>
 800bfc6:	2958      	cmp	r1, #88	; 0x58
 800bfc8:	f000 8083 	beq.w	800c0d2 <_printf_i+0x136>
 800bfcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bfd4:	e032      	b.n	800c03c <_printf_i+0xa0>
 800bfd6:	2964      	cmp	r1, #100	; 0x64
 800bfd8:	d001      	beq.n	800bfde <_printf_i+0x42>
 800bfda:	2969      	cmp	r1, #105	; 0x69
 800bfdc:	d1f6      	bne.n	800bfcc <_printf_i+0x30>
 800bfde:	6820      	ldr	r0, [r4, #0]
 800bfe0:	6813      	ldr	r3, [r2, #0]
 800bfe2:	0605      	lsls	r5, r0, #24
 800bfe4:	f103 0104 	add.w	r1, r3, #4
 800bfe8:	d52a      	bpl.n	800c040 <_printf_i+0xa4>
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	6011      	str	r1, [r2, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	da03      	bge.n	800bffa <_printf_i+0x5e>
 800bff2:	222d      	movs	r2, #45	; 0x2d
 800bff4:	425b      	negs	r3, r3
 800bff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bffa:	486f      	ldr	r0, [pc, #444]	; (800c1b8 <_printf_i+0x21c>)
 800bffc:	220a      	movs	r2, #10
 800bffe:	e039      	b.n	800c074 <_printf_i+0xd8>
 800c000:	2973      	cmp	r1, #115	; 0x73
 800c002:	f000 809d 	beq.w	800c140 <_printf_i+0x1a4>
 800c006:	d808      	bhi.n	800c01a <_printf_i+0x7e>
 800c008:	296f      	cmp	r1, #111	; 0x6f
 800c00a:	d020      	beq.n	800c04e <_printf_i+0xb2>
 800c00c:	2970      	cmp	r1, #112	; 0x70
 800c00e:	d1dd      	bne.n	800bfcc <_printf_i+0x30>
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	f043 0320 	orr.w	r3, r3, #32
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	e003      	b.n	800c022 <_printf_i+0x86>
 800c01a:	2975      	cmp	r1, #117	; 0x75
 800c01c:	d017      	beq.n	800c04e <_printf_i+0xb2>
 800c01e:	2978      	cmp	r1, #120	; 0x78
 800c020:	d1d4      	bne.n	800bfcc <_printf_i+0x30>
 800c022:	2378      	movs	r3, #120	; 0x78
 800c024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c028:	4864      	ldr	r0, [pc, #400]	; (800c1bc <_printf_i+0x220>)
 800c02a:	e055      	b.n	800c0d8 <_printf_i+0x13c>
 800c02c:	6813      	ldr	r3, [r2, #0]
 800c02e:	1d19      	adds	r1, r3, #4
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	6011      	str	r1, [r2, #0]
 800c034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c03c:	2301      	movs	r3, #1
 800c03e:	e08c      	b.n	800c15a <_printf_i+0x1be>
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	6011      	str	r1, [r2, #0]
 800c044:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c048:	bf18      	it	ne
 800c04a:	b21b      	sxthne	r3, r3
 800c04c:	e7cf      	b.n	800bfee <_printf_i+0x52>
 800c04e:	6813      	ldr	r3, [r2, #0]
 800c050:	6825      	ldr	r5, [r4, #0]
 800c052:	1d18      	adds	r0, r3, #4
 800c054:	6010      	str	r0, [r2, #0]
 800c056:	0628      	lsls	r0, r5, #24
 800c058:	d501      	bpl.n	800c05e <_printf_i+0xc2>
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	e002      	b.n	800c064 <_printf_i+0xc8>
 800c05e:	0668      	lsls	r0, r5, #25
 800c060:	d5fb      	bpl.n	800c05a <_printf_i+0xbe>
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	4854      	ldr	r0, [pc, #336]	; (800c1b8 <_printf_i+0x21c>)
 800c066:	296f      	cmp	r1, #111	; 0x6f
 800c068:	bf14      	ite	ne
 800c06a:	220a      	movne	r2, #10
 800c06c:	2208      	moveq	r2, #8
 800c06e:	2100      	movs	r1, #0
 800c070:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c074:	6865      	ldr	r5, [r4, #4]
 800c076:	60a5      	str	r5, [r4, #8]
 800c078:	2d00      	cmp	r5, #0
 800c07a:	f2c0 8095 	blt.w	800c1a8 <_printf_i+0x20c>
 800c07e:	6821      	ldr	r1, [r4, #0]
 800c080:	f021 0104 	bic.w	r1, r1, #4
 800c084:	6021      	str	r1, [r4, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d13d      	bne.n	800c106 <_printf_i+0x16a>
 800c08a:	2d00      	cmp	r5, #0
 800c08c:	f040 808e 	bne.w	800c1ac <_printf_i+0x210>
 800c090:	4665      	mov	r5, ip
 800c092:	2a08      	cmp	r2, #8
 800c094:	d10b      	bne.n	800c0ae <_printf_i+0x112>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	07db      	lsls	r3, r3, #31
 800c09a:	d508      	bpl.n	800c0ae <_printf_i+0x112>
 800c09c:	6923      	ldr	r3, [r4, #16]
 800c09e:	6862      	ldr	r2, [r4, #4]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	bfde      	ittt	le
 800c0a4:	2330      	movle	r3, #48	; 0x30
 800c0a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c0ae:	ebac 0305 	sub.w	r3, ip, r5
 800c0b2:	6123      	str	r3, [r4, #16]
 800c0b4:	f8cd 8000 	str.w	r8, [sp]
 800c0b8:	463b      	mov	r3, r7
 800c0ba:	aa03      	add	r2, sp, #12
 800c0bc:	4621      	mov	r1, r4
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff fef6 	bl	800beb0 <_printf_common>
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	d14d      	bne.n	800c164 <_printf_i+0x1c8>
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0cc:	b005      	add	sp, #20
 800c0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0d2:	4839      	ldr	r0, [pc, #228]	; (800c1b8 <_printf_i+0x21c>)
 800c0d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c0d8:	6813      	ldr	r3, [r2, #0]
 800c0da:	6821      	ldr	r1, [r4, #0]
 800c0dc:	1d1d      	adds	r5, r3, #4
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6015      	str	r5, [r2, #0]
 800c0e2:	060a      	lsls	r2, r1, #24
 800c0e4:	d50b      	bpl.n	800c0fe <_printf_i+0x162>
 800c0e6:	07ca      	lsls	r2, r1, #31
 800c0e8:	bf44      	itt	mi
 800c0ea:	f041 0120 	orrmi.w	r1, r1, #32
 800c0ee:	6021      	strmi	r1, [r4, #0]
 800c0f0:	b91b      	cbnz	r3, 800c0fa <_printf_i+0x15e>
 800c0f2:	6822      	ldr	r2, [r4, #0]
 800c0f4:	f022 0220 	bic.w	r2, r2, #32
 800c0f8:	6022      	str	r2, [r4, #0]
 800c0fa:	2210      	movs	r2, #16
 800c0fc:	e7b7      	b.n	800c06e <_printf_i+0xd2>
 800c0fe:	064d      	lsls	r5, r1, #25
 800c100:	bf48      	it	mi
 800c102:	b29b      	uxthmi	r3, r3
 800c104:	e7ef      	b.n	800c0e6 <_printf_i+0x14a>
 800c106:	4665      	mov	r5, ip
 800c108:	fbb3 f1f2 	udiv	r1, r3, r2
 800c10c:	fb02 3311 	mls	r3, r2, r1, r3
 800c110:	5cc3      	ldrb	r3, [r0, r3]
 800c112:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c116:	460b      	mov	r3, r1
 800c118:	2900      	cmp	r1, #0
 800c11a:	d1f5      	bne.n	800c108 <_printf_i+0x16c>
 800c11c:	e7b9      	b.n	800c092 <_printf_i+0xf6>
 800c11e:	6813      	ldr	r3, [r2, #0]
 800c120:	6825      	ldr	r5, [r4, #0]
 800c122:	6961      	ldr	r1, [r4, #20]
 800c124:	1d18      	adds	r0, r3, #4
 800c126:	6010      	str	r0, [r2, #0]
 800c128:	0628      	lsls	r0, r5, #24
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	d501      	bpl.n	800c132 <_printf_i+0x196>
 800c12e:	6019      	str	r1, [r3, #0]
 800c130:	e002      	b.n	800c138 <_printf_i+0x19c>
 800c132:	066a      	lsls	r2, r5, #25
 800c134:	d5fb      	bpl.n	800c12e <_printf_i+0x192>
 800c136:	8019      	strh	r1, [r3, #0]
 800c138:	2300      	movs	r3, #0
 800c13a:	6123      	str	r3, [r4, #16]
 800c13c:	4665      	mov	r5, ip
 800c13e:	e7b9      	b.n	800c0b4 <_printf_i+0x118>
 800c140:	6813      	ldr	r3, [r2, #0]
 800c142:	1d19      	adds	r1, r3, #4
 800c144:	6011      	str	r1, [r2, #0]
 800c146:	681d      	ldr	r5, [r3, #0]
 800c148:	6862      	ldr	r2, [r4, #4]
 800c14a:	2100      	movs	r1, #0
 800c14c:	4628      	mov	r0, r5
 800c14e:	f7f4 f877 	bl	8000240 <memchr>
 800c152:	b108      	cbz	r0, 800c158 <_printf_i+0x1bc>
 800c154:	1b40      	subs	r0, r0, r5
 800c156:	6060      	str	r0, [r4, #4]
 800c158:	6863      	ldr	r3, [r4, #4]
 800c15a:	6123      	str	r3, [r4, #16]
 800c15c:	2300      	movs	r3, #0
 800c15e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c162:	e7a7      	b.n	800c0b4 <_printf_i+0x118>
 800c164:	6923      	ldr	r3, [r4, #16]
 800c166:	462a      	mov	r2, r5
 800c168:	4639      	mov	r1, r7
 800c16a:	4630      	mov	r0, r6
 800c16c:	47c0      	blx	r8
 800c16e:	3001      	adds	r0, #1
 800c170:	d0aa      	beq.n	800c0c8 <_printf_i+0x12c>
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	079b      	lsls	r3, r3, #30
 800c176:	d413      	bmi.n	800c1a0 <_printf_i+0x204>
 800c178:	68e0      	ldr	r0, [r4, #12]
 800c17a:	9b03      	ldr	r3, [sp, #12]
 800c17c:	4298      	cmp	r0, r3
 800c17e:	bfb8      	it	lt
 800c180:	4618      	movlt	r0, r3
 800c182:	e7a3      	b.n	800c0cc <_printf_i+0x130>
 800c184:	2301      	movs	r3, #1
 800c186:	464a      	mov	r2, r9
 800c188:	4639      	mov	r1, r7
 800c18a:	4630      	mov	r0, r6
 800c18c:	47c0      	blx	r8
 800c18e:	3001      	adds	r0, #1
 800c190:	d09a      	beq.n	800c0c8 <_printf_i+0x12c>
 800c192:	3501      	adds	r5, #1
 800c194:	68e3      	ldr	r3, [r4, #12]
 800c196:	9a03      	ldr	r2, [sp, #12]
 800c198:	1a9b      	subs	r3, r3, r2
 800c19a:	42ab      	cmp	r3, r5
 800c19c:	dcf2      	bgt.n	800c184 <_printf_i+0x1e8>
 800c19e:	e7eb      	b.n	800c178 <_printf_i+0x1dc>
 800c1a0:	2500      	movs	r5, #0
 800c1a2:	f104 0919 	add.w	r9, r4, #25
 800c1a6:	e7f5      	b.n	800c194 <_printf_i+0x1f8>
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d1ac      	bne.n	800c106 <_printf_i+0x16a>
 800c1ac:	7803      	ldrb	r3, [r0, #0]
 800c1ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1b6:	e76c      	b.n	800c092 <_printf_i+0xf6>
 800c1b8:	0800c7f5 	.word	0x0800c7f5
 800c1bc:	0800c806 	.word	0x0800c806

0800c1c0 <__sread>:
 800c1c0:	b510      	push	{r4, lr}
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c8:	f000 fa46 	bl	800c658 <_read_r>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	bfab      	itete	ge
 800c1d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1d2:	89a3      	ldrhlt	r3, [r4, #12]
 800c1d4:	181b      	addge	r3, r3, r0
 800c1d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1da:	bfac      	ite	ge
 800c1dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1de:	81a3      	strhlt	r3, [r4, #12]
 800c1e0:	bd10      	pop	{r4, pc}

0800c1e2 <__swrite>:
 800c1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e6:	461f      	mov	r7, r3
 800c1e8:	898b      	ldrh	r3, [r1, #12]
 800c1ea:	05db      	lsls	r3, r3, #23
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	4616      	mov	r6, r2
 800c1f2:	d505      	bpl.n	800c200 <__swrite+0x1e>
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1fc:	f000 f9b6 	bl	800c56c <_lseek_r>
 800c200:	89a3      	ldrh	r3, [r4, #12]
 800c202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c20a:	81a3      	strh	r3, [r4, #12]
 800c20c:	4632      	mov	r2, r6
 800c20e:	463b      	mov	r3, r7
 800c210:	4628      	mov	r0, r5
 800c212:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c216:	f000 b869 	b.w	800c2ec <_write_r>

0800c21a <__sseek>:
 800c21a:	b510      	push	{r4, lr}
 800c21c:	460c      	mov	r4, r1
 800c21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c222:	f000 f9a3 	bl	800c56c <_lseek_r>
 800c226:	1c43      	adds	r3, r0, #1
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	bf15      	itete	ne
 800c22c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c22e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c236:	81a3      	strheq	r3, [r4, #12]
 800c238:	bf18      	it	ne
 800c23a:	81a3      	strhne	r3, [r4, #12]
 800c23c:	bd10      	pop	{r4, pc}

0800c23e <__sclose>:
 800c23e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c242:	f000 b8d3 	b.w	800c3ec <_close_r>
	...

0800c248 <__swbuf_r>:
 800c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24a:	460e      	mov	r6, r1
 800c24c:	4614      	mov	r4, r2
 800c24e:	4605      	mov	r5, r0
 800c250:	b118      	cbz	r0, 800c25a <__swbuf_r+0x12>
 800c252:	6983      	ldr	r3, [r0, #24]
 800c254:	b90b      	cbnz	r3, 800c25a <__swbuf_r+0x12>
 800c256:	f7ff fc5f 	bl	800bb18 <__sinit>
 800c25a:	4b21      	ldr	r3, [pc, #132]	; (800c2e0 <__swbuf_r+0x98>)
 800c25c:	429c      	cmp	r4, r3
 800c25e:	d12a      	bne.n	800c2b6 <__swbuf_r+0x6e>
 800c260:	686c      	ldr	r4, [r5, #4]
 800c262:	69a3      	ldr	r3, [r4, #24]
 800c264:	60a3      	str	r3, [r4, #8]
 800c266:	89a3      	ldrh	r3, [r4, #12]
 800c268:	071a      	lsls	r2, r3, #28
 800c26a:	d52e      	bpl.n	800c2ca <__swbuf_r+0x82>
 800c26c:	6923      	ldr	r3, [r4, #16]
 800c26e:	b363      	cbz	r3, 800c2ca <__swbuf_r+0x82>
 800c270:	6923      	ldr	r3, [r4, #16]
 800c272:	6820      	ldr	r0, [r4, #0]
 800c274:	1ac0      	subs	r0, r0, r3
 800c276:	6963      	ldr	r3, [r4, #20]
 800c278:	b2f6      	uxtb	r6, r6
 800c27a:	4283      	cmp	r3, r0
 800c27c:	4637      	mov	r7, r6
 800c27e:	dc04      	bgt.n	800c28a <__swbuf_r+0x42>
 800c280:	4621      	mov	r1, r4
 800c282:	4628      	mov	r0, r5
 800c284:	f000 f948 	bl	800c518 <_fflush_r>
 800c288:	bb28      	cbnz	r0, 800c2d6 <__swbuf_r+0x8e>
 800c28a:	68a3      	ldr	r3, [r4, #8]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	60a3      	str	r3, [r4, #8]
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	1c5a      	adds	r2, r3, #1
 800c294:	6022      	str	r2, [r4, #0]
 800c296:	701e      	strb	r6, [r3, #0]
 800c298:	6963      	ldr	r3, [r4, #20]
 800c29a:	3001      	adds	r0, #1
 800c29c:	4283      	cmp	r3, r0
 800c29e:	d004      	beq.n	800c2aa <__swbuf_r+0x62>
 800c2a0:	89a3      	ldrh	r3, [r4, #12]
 800c2a2:	07db      	lsls	r3, r3, #31
 800c2a4:	d519      	bpl.n	800c2da <__swbuf_r+0x92>
 800c2a6:	2e0a      	cmp	r6, #10
 800c2a8:	d117      	bne.n	800c2da <__swbuf_r+0x92>
 800c2aa:	4621      	mov	r1, r4
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	f000 f933 	bl	800c518 <_fflush_r>
 800c2b2:	b190      	cbz	r0, 800c2da <__swbuf_r+0x92>
 800c2b4:	e00f      	b.n	800c2d6 <__swbuf_r+0x8e>
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	; (800c2e4 <__swbuf_r+0x9c>)
 800c2b8:	429c      	cmp	r4, r3
 800c2ba:	d101      	bne.n	800c2c0 <__swbuf_r+0x78>
 800c2bc:	68ac      	ldr	r4, [r5, #8]
 800c2be:	e7d0      	b.n	800c262 <__swbuf_r+0x1a>
 800c2c0:	4b09      	ldr	r3, [pc, #36]	; (800c2e8 <__swbuf_r+0xa0>)
 800c2c2:	429c      	cmp	r4, r3
 800c2c4:	bf08      	it	eq
 800c2c6:	68ec      	ldreq	r4, [r5, #12]
 800c2c8:	e7cb      	b.n	800c262 <__swbuf_r+0x1a>
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f000 f81f 	bl	800c310 <__swsetup_r>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d0cc      	beq.n	800c270 <__swbuf_r+0x28>
 800c2d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c2da:	4638      	mov	r0, r7
 800c2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	0800c7a4 	.word	0x0800c7a4
 800c2e4:	0800c7c4 	.word	0x0800c7c4
 800c2e8:	0800c784 	.word	0x0800c784

0800c2ec <_write_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4c07      	ldr	r4, [pc, #28]	; (800c30c <_write_r+0x20>)
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	6022      	str	r2, [r4, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f7fe fc41 	bl	800ab82 <_write>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_write_r+0x1e>
 800c304:	6823      	ldr	r3, [r4, #0]
 800c306:	b103      	cbz	r3, 800c30a <_write_r+0x1e>
 800c308:	602b      	str	r3, [r5, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	20025dac 	.word	0x20025dac

0800c310 <__swsetup_r>:
 800c310:	4b32      	ldr	r3, [pc, #200]	; (800c3dc <__swsetup_r+0xcc>)
 800c312:	b570      	push	{r4, r5, r6, lr}
 800c314:	681d      	ldr	r5, [r3, #0]
 800c316:	4606      	mov	r6, r0
 800c318:	460c      	mov	r4, r1
 800c31a:	b125      	cbz	r5, 800c326 <__swsetup_r+0x16>
 800c31c:	69ab      	ldr	r3, [r5, #24]
 800c31e:	b913      	cbnz	r3, 800c326 <__swsetup_r+0x16>
 800c320:	4628      	mov	r0, r5
 800c322:	f7ff fbf9 	bl	800bb18 <__sinit>
 800c326:	4b2e      	ldr	r3, [pc, #184]	; (800c3e0 <__swsetup_r+0xd0>)
 800c328:	429c      	cmp	r4, r3
 800c32a:	d10f      	bne.n	800c34c <__swsetup_r+0x3c>
 800c32c:	686c      	ldr	r4, [r5, #4]
 800c32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c332:	b29a      	uxth	r2, r3
 800c334:	0715      	lsls	r5, r2, #28
 800c336:	d42c      	bmi.n	800c392 <__swsetup_r+0x82>
 800c338:	06d0      	lsls	r0, r2, #27
 800c33a:	d411      	bmi.n	800c360 <__swsetup_r+0x50>
 800c33c:	2209      	movs	r2, #9
 800c33e:	6032      	str	r2, [r6, #0]
 800c340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c344:	81a3      	strh	r3, [r4, #12]
 800c346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c34a:	e03e      	b.n	800c3ca <__swsetup_r+0xba>
 800c34c:	4b25      	ldr	r3, [pc, #148]	; (800c3e4 <__swsetup_r+0xd4>)
 800c34e:	429c      	cmp	r4, r3
 800c350:	d101      	bne.n	800c356 <__swsetup_r+0x46>
 800c352:	68ac      	ldr	r4, [r5, #8]
 800c354:	e7eb      	b.n	800c32e <__swsetup_r+0x1e>
 800c356:	4b24      	ldr	r3, [pc, #144]	; (800c3e8 <__swsetup_r+0xd8>)
 800c358:	429c      	cmp	r4, r3
 800c35a:	bf08      	it	eq
 800c35c:	68ec      	ldreq	r4, [r5, #12]
 800c35e:	e7e6      	b.n	800c32e <__swsetup_r+0x1e>
 800c360:	0751      	lsls	r1, r2, #29
 800c362:	d512      	bpl.n	800c38a <__swsetup_r+0x7a>
 800c364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c366:	b141      	cbz	r1, 800c37a <__swsetup_r+0x6a>
 800c368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c36c:	4299      	cmp	r1, r3
 800c36e:	d002      	beq.n	800c376 <__swsetup_r+0x66>
 800c370:	4630      	mov	r0, r6
 800c372:	f7ff fac1 	bl	800b8f8 <_free_r>
 800c376:	2300      	movs	r3, #0
 800c378:	6363      	str	r3, [r4, #52]	; 0x34
 800c37a:	89a3      	ldrh	r3, [r4, #12]
 800c37c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	2300      	movs	r3, #0
 800c384:	6063      	str	r3, [r4, #4]
 800c386:	6923      	ldr	r3, [r4, #16]
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	f043 0308 	orr.w	r3, r3, #8
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	6923      	ldr	r3, [r4, #16]
 800c394:	b94b      	cbnz	r3, 800c3aa <__swsetup_r+0x9a>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3a0:	d003      	beq.n	800c3aa <__swsetup_r+0x9a>
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	4630      	mov	r0, r6
 800c3a6:	f000 f917 	bl	800c5d8 <__smakebuf_r>
 800c3aa:	89a2      	ldrh	r2, [r4, #12]
 800c3ac:	f012 0301 	ands.w	r3, r2, #1
 800c3b0:	d00c      	beq.n	800c3cc <__swsetup_r+0xbc>
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60a3      	str	r3, [r4, #8]
 800c3b6:	6963      	ldr	r3, [r4, #20]
 800c3b8:	425b      	negs	r3, r3
 800c3ba:	61a3      	str	r3, [r4, #24]
 800c3bc:	6923      	ldr	r3, [r4, #16]
 800c3be:	b953      	cbnz	r3, 800c3d6 <__swsetup_r+0xc6>
 800c3c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c3c8:	d1ba      	bne.n	800c340 <__swsetup_r+0x30>
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	0792      	lsls	r2, r2, #30
 800c3ce:	bf58      	it	pl
 800c3d0:	6963      	ldrpl	r3, [r4, #20]
 800c3d2:	60a3      	str	r3, [r4, #8]
 800c3d4:	e7f2      	b.n	800c3bc <__swsetup_r+0xac>
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	e7f7      	b.n	800c3ca <__swsetup_r+0xba>
 800c3da:	bf00      	nop
 800c3dc:	2000018c 	.word	0x2000018c
 800c3e0:	0800c7a4 	.word	0x0800c7a4
 800c3e4:	0800c7c4 	.word	0x0800c7c4
 800c3e8:	0800c784 	.word	0x0800c784

0800c3ec <_close_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	4c06      	ldr	r4, [pc, #24]	; (800c408 <_close_r+0x1c>)
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4605      	mov	r5, r0
 800c3f4:	4608      	mov	r0, r1
 800c3f6:	6023      	str	r3, [r4, #0]
 800c3f8:	f7fe fbdf 	bl	800abba <_close>
 800c3fc:	1c43      	adds	r3, r0, #1
 800c3fe:	d102      	bne.n	800c406 <_close_r+0x1a>
 800c400:	6823      	ldr	r3, [r4, #0]
 800c402:	b103      	cbz	r3, 800c406 <_close_r+0x1a>
 800c404:	602b      	str	r3, [r5, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	20025dac 	.word	0x20025dac

0800c40c <__sflush_r>:
 800c40c:	898a      	ldrh	r2, [r1, #12]
 800c40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c412:	4605      	mov	r5, r0
 800c414:	0710      	lsls	r0, r2, #28
 800c416:	460c      	mov	r4, r1
 800c418:	d458      	bmi.n	800c4cc <__sflush_r+0xc0>
 800c41a:	684b      	ldr	r3, [r1, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	dc05      	bgt.n	800c42c <__sflush_r+0x20>
 800c420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c422:	2b00      	cmp	r3, #0
 800c424:	dc02      	bgt.n	800c42c <__sflush_r+0x20>
 800c426:	2000      	movs	r0, #0
 800c428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c42c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c42e:	2e00      	cmp	r6, #0
 800c430:	d0f9      	beq.n	800c426 <__sflush_r+0x1a>
 800c432:	2300      	movs	r3, #0
 800c434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c438:	682f      	ldr	r7, [r5, #0]
 800c43a:	6a21      	ldr	r1, [r4, #32]
 800c43c:	602b      	str	r3, [r5, #0]
 800c43e:	d032      	beq.n	800c4a6 <__sflush_r+0x9a>
 800c440:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	075a      	lsls	r2, r3, #29
 800c446:	d505      	bpl.n	800c454 <__sflush_r+0x48>
 800c448:	6863      	ldr	r3, [r4, #4]
 800c44a:	1ac0      	subs	r0, r0, r3
 800c44c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c44e:	b10b      	cbz	r3, 800c454 <__sflush_r+0x48>
 800c450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c452:	1ac0      	subs	r0, r0, r3
 800c454:	2300      	movs	r3, #0
 800c456:	4602      	mov	r2, r0
 800c458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c45a:	6a21      	ldr	r1, [r4, #32]
 800c45c:	4628      	mov	r0, r5
 800c45e:	47b0      	blx	r6
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	d106      	bne.n	800c474 <__sflush_r+0x68>
 800c466:	6829      	ldr	r1, [r5, #0]
 800c468:	291d      	cmp	r1, #29
 800c46a:	d848      	bhi.n	800c4fe <__sflush_r+0xf2>
 800c46c:	4a29      	ldr	r2, [pc, #164]	; (800c514 <__sflush_r+0x108>)
 800c46e:	40ca      	lsrs	r2, r1
 800c470:	07d6      	lsls	r6, r2, #31
 800c472:	d544      	bpl.n	800c4fe <__sflush_r+0xf2>
 800c474:	2200      	movs	r2, #0
 800c476:	6062      	str	r2, [r4, #4]
 800c478:	04d9      	lsls	r1, r3, #19
 800c47a:	6922      	ldr	r2, [r4, #16]
 800c47c:	6022      	str	r2, [r4, #0]
 800c47e:	d504      	bpl.n	800c48a <__sflush_r+0x7e>
 800c480:	1c42      	adds	r2, r0, #1
 800c482:	d101      	bne.n	800c488 <__sflush_r+0x7c>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	b903      	cbnz	r3, 800c48a <__sflush_r+0x7e>
 800c488:	6560      	str	r0, [r4, #84]	; 0x54
 800c48a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c48c:	602f      	str	r7, [r5, #0]
 800c48e:	2900      	cmp	r1, #0
 800c490:	d0c9      	beq.n	800c426 <__sflush_r+0x1a>
 800c492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c496:	4299      	cmp	r1, r3
 800c498:	d002      	beq.n	800c4a0 <__sflush_r+0x94>
 800c49a:	4628      	mov	r0, r5
 800c49c:	f7ff fa2c 	bl	800b8f8 <_free_r>
 800c4a0:	2000      	movs	r0, #0
 800c4a2:	6360      	str	r0, [r4, #52]	; 0x34
 800c4a4:	e7c0      	b.n	800c428 <__sflush_r+0x1c>
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	47b0      	blx	r6
 800c4ac:	1c41      	adds	r1, r0, #1
 800c4ae:	d1c8      	bne.n	800c442 <__sflush_r+0x36>
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d0c5      	beq.n	800c442 <__sflush_r+0x36>
 800c4b6:	2b1d      	cmp	r3, #29
 800c4b8:	d001      	beq.n	800c4be <__sflush_r+0xb2>
 800c4ba:	2b16      	cmp	r3, #22
 800c4bc:	d101      	bne.n	800c4c2 <__sflush_r+0xb6>
 800c4be:	602f      	str	r7, [r5, #0]
 800c4c0:	e7b1      	b.n	800c426 <__sflush_r+0x1a>
 800c4c2:	89a3      	ldrh	r3, [r4, #12]
 800c4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4c8:	81a3      	strh	r3, [r4, #12]
 800c4ca:	e7ad      	b.n	800c428 <__sflush_r+0x1c>
 800c4cc:	690f      	ldr	r7, [r1, #16]
 800c4ce:	2f00      	cmp	r7, #0
 800c4d0:	d0a9      	beq.n	800c426 <__sflush_r+0x1a>
 800c4d2:	0793      	lsls	r3, r2, #30
 800c4d4:	680e      	ldr	r6, [r1, #0]
 800c4d6:	bf08      	it	eq
 800c4d8:	694b      	ldreq	r3, [r1, #20]
 800c4da:	600f      	str	r7, [r1, #0]
 800c4dc:	bf18      	it	ne
 800c4de:	2300      	movne	r3, #0
 800c4e0:	eba6 0807 	sub.w	r8, r6, r7
 800c4e4:	608b      	str	r3, [r1, #8]
 800c4e6:	f1b8 0f00 	cmp.w	r8, #0
 800c4ea:	dd9c      	ble.n	800c426 <__sflush_r+0x1a>
 800c4ec:	4643      	mov	r3, r8
 800c4ee:	463a      	mov	r2, r7
 800c4f0:	6a21      	ldr	r1, [r4, #32]
 800c4f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	47b0      	blx	r6
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	dc06      	bgt.n	800c50a <__sflush_r+0xfe>
 800c4fc:	89a3      	ldrh	r3, [r4, #12]
 800c4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c502:	81a3      	strh	r3, [r4, #12]
 800c504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c508:	e78e      	b.n	800c428 <__sflush_r+0x1c>
 800c50a:	4407      	add	r7, r0
 800c50c:	eba8 0800 	sub.w	r8, r8, r0
 800c510:	e7e9      	b.n	800c4e6 <__sflush_r+0xda>
 800c512:	bf00      	nop
 800c514:	20400001 	.word	0x20400001

0800c518 <_fflush_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	690b      	ldr	r3, [r1, #16]
 800c51c:	4605      	mov	r5, r0
 800c51e:	460c      	mov	r4, r1
 800c520:	b1db      	cbz	r3, 800c55a <_fflush_r+0x42>
 800c522:	b118      	cbz	r0, 800c52c <_fflush_r+0x14>
 800c524:	6983      	ldr	r3, [r0, #24]
 800c526:	b90b      	cbnz	r3, 800c52c <_fflush_r+0x14>
 800c528:	f7ff faf6 	bl	800bb18 <__sinit>
 800c52c:	4b0c      	ldr	r3, [pc, #48]	; (800c560 <_fflush_r+0x48>)
 800c52e:	429c      	cmp	r4, r3
 800c530:	d109      	bne.n	800c546 <_fflush_r+0x2e>
 800c532:	686c      	ldr	r4, [r5, #4]
 800c534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c538:	b17b      	cbz	r3, 800c55a <_fflush_r+0x42>
 800c53a:	4621      	mov	r1, r4
 800c53c:	4628      	mov	r0, r5
 800c53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c542:	f7ff bf63 	b.w	800c40c <__sflush_r>
 800c546:	4b07      	ldr	r3, [pc, #28]	; (800c564 <_fflush_r+0x4c>)
 800c548:	429c      	cmp	r4, r3
 800c54a:	d101      	bne.n	800c550 <_fflush_r+0x38>
 800c54c:	68ac      	ldr	r4, [r5, #8]
 800c54e:	e7f1      	b.n	800c534 <_fflush_r+0x1c>
 800c550:	4b05      	ldr	r3, [pc, #20]	; (800c568 <_fflush_r+0x50>)
 800c552:	429c      	cmp	r4, r3
 800c554:	bf08      	it	eq
 800c556:	68ec      	ldreq	r4, [r5, #12]
 800c558:	e7ec      	b.n	800c534 <_fflush_r+0x1c>
 800c55a:	2000      	movs	r0, #0
 800c55c:	bd38      	pop	{r3, r4, r5, pc}
 800c55e:	bf00      	nop
 800c560:	0800c7a4 	.word	0x0800c7a4
 800c564:	0800c7c4 	.word	0x0800c7c4
 800c568:	0800c784 	.word	0x0800c784

0800c56c <_lseek_r>:
 800c56c:	b538      	push	{r3, r4, r5, lr}
 800c56e:	4c07      	ldr	r4, [pc, #28]	; (800c58c <_lseek_r+0x20>)
 800c570:	4605      	mov	r5, r0
 800c572:	4608      	mov	r0, r1
 800c574:	4611      	mov	r1, r2
 800c576:	2200      	movs	r2, #0
 800c578:	6022      	str	r2, [r4, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	f7fe fb44 	bl	800ac08 <_lseek>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_lseek_r+0x1e>
 800c584:	6823      	ldr	r3, [r4, #0]
 800c586:	b103      	cbz	r3, 800c58a <_lseek_r+0x1e>
 800c588:	602b      	str	r3, [r5, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20025dac 	.word	0x20025dac

0800c590 <__swhatbuf_r>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	460e      	mov	r6, r1
 800c594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c598:	2900      	cmp	r1, #0
 800c59a:	b096      	sub	sp, #88	; 0x58
 800c59c:	4614      	mov	r4, r2
 800c59e:	461d      	mov	r5, r3
 800c5a0:	da07      	bge.n	800c5b2 <__swhatbuf_r+0x22>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	602b      	str	r3, [r5, #0]
 800c5a6:	89b3      	ldrh	r3, [r6, #12]
 800c5a8:	061a      	lsls	r2, r3, #24
 800c5aa:	d410      	bmi.n	800c5ce <__swhatbuf_r+0x3e>
 800c5ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5b0:	e00e      	b.n	800c5d0 <__swhatbuf_r+0x40>
 800c5b2:	466a      	mov	r2, sp
 800c5b4:	f000 f862 	bl	800c67c <_fstat_r>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	dbf2      	blt.n	800c5a2 <__swhatbuf_r+0x12>
 800c5bc:	9a01      	ldr	r2, [sp, #4]
 800c5be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c5c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c5c6:	425a      	negs	r2, r3
 800c5c8:	415a      	adcs	r2, r3
 800c5ca:	602a      	str	r2, [r5, #0]
 800c5cc:	e7ee      	b.n	800c5ac <__swhatbuf_r+0x1c>
 800c5ce:	2340      	movs	r3, #64	; 0x40
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	6023      	str	r3, [r4, #0]
 800c5d4:	b016      	add	sp, #88	; 0x58
 800c5d6:	bd70      	pop	{r4, r5, r6, pc}

0800c5d8 <__smakebuf_r>:
 800c5d8:	898b      	ldrh	r3, [r1, #12]
 800c5da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5dc:	079d      	lsls	r5, r3, #30
 800c5de:	4606      	mov	r6, r0
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	d507      	bpl.n	800c5f4 <__smakebuf_r+0x1c>
 800c5e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5e8:	6023      	str	r3, [r4, #0]
 800c5ea:	6123      	str	r3, [r4, #16]
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	6163      	str	r3, [r4, #20]
 800c5f0:	b002      	add	sp, #8
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	ab01      	add	r3, sp, #4
 800c5f6:	466a      	mov	r2, sp
 800c5f8:	f7ff ffca 	bl	800c590 <__swhatbuf_r>
 800c5fc:	9900      	ldr	r1, [sp, #0]
 800c5fe:	4605      	mov	r5, r0
 800c600:	4630      	mov	r0, r6
 800c602:	f7ff f9c7 	bl	800b994 <_malloc_r>
 800c606:	b948      	cbnz	r0, 800c61c <__smakebuf_r+0x44>
 800c608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c60c:	059a      	lsls	r2, r3, #22
 800c60e:	d4ef      	bmi.n	800c5f0 <__smakebuf_r+0x18>
 800c610:	f023 0303 	bic.w	r3, r3, #3
 800c614:	f043 0302 	orr.w	r3, r3, #2
 800c618:	81a3      	strh	r3, [r4, #12]
 800c61a:	e7e3      	b.n	800c5e4 <__smakebuf_r+0xc>
 800c61c:	4b0d      	ldr	r3, [pc, #52]	; (800c654 <__smakebuf_r+0x7c>)
 800c61e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	6020      	str	r0, [r4, #0]
 800c624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c628:	81a3      	strh	r3, [r4, #12]
 800c62a:	9b00      	ldr	r3, [sp, #0]
 800c62c:	6163      	str	r3, [r4, #20]
 800c62e:	9b01      	ldr	r3, [sp, #4]
 800c630:	6120      	str	r0, [r4, #16]
 800c632:	b15b      	cbz	r3, 800c64c <__smakebuf_r+0x74>
 800c634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c638:	4630      	mov	r0, r6
 800c63a:	f000 f831 	bl	800c6a0 <_isatty_r>
 800c63e:	b128      	cbz	r0, 800c64c <__smakebuf_r+0x74>
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	f023 0303 	bic.w	r3, r3, #3
 800c646:	f043 0301 	orr.w	r3, r3, #1
 800c64a:	81a3      	strh	r3, [r4, #12]
 800c64c:	89a3      	ldrh	r3, [r4, #12]
 800c64e:	431d      	orrs	r5, r3
 800c650:	81a5      	strh	r5, [r4, #12]
 800c652:	e7cd      	b.n	800c5f0 <__smakebuf_r+0x18>
 800c654:	0800bae1 	.word	0x0800bae1

0800c658 <_read_r>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4c07      	ldr	r4, [pc, #28]	; (800c678 <_read_r+0x20>)
 800c65c:	4605      	mov	r5, r0
 800c65e:	4608      	mov	r0, r1
 800c660:	4611      	mov	r1, r2
 800c662:	2200      	movs	r2, #0
 800c664:	6022      	str	r2, [r4, #0]
 800c666:	461a      	mov	r2, r3
 800c668:	f7fe fa6e 	bl	800ab48 <_read>
 800c66c:	1c43      	adds	r3, r0, #1
 800c66e:	d102      	bne.n	800c676 <_read_r+0x1e>
 800c670:	6823      	ldr	r3, [r4, #0]
 800c672:	b103      	cbz	r3, 800c676 <_read_r+0x1e>
 800c674:	602b      	str	r3, [r5, #0]
 800c676:	bd38      	pop	{r3, r4, r5, pc}
 800c678:	20025dac 	.word	0x20025dac

0800c67c <_fstat_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	4c07      	ldr	r4, [pc, #28]	; (800c69c <_fstat_r+0x20>)
 800c680:	2300      	movs	r3, #0
 800c682:	4605      	mov	r5, r0
 800c684:	4608      	mov	r0, r1
 800c686:	4611      	mov	r1, r2
 800c688:	6023      	str	r3, [r4, #0]
 800c68a:	f7fe faa2 	bl	800abd2 <_fstat>
 800c68e:	1c43      	adds	r3, r0, #1
 800c690:	d102      	bne.n	800c698 <_fstat_r+0x1c>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	b103      	cbz	r3, 800c698 <_fstat_r+0x1c>
 800c696:	602b      	str	r3, [r5, #0]
 800c698:	bd38      	pop	{r3, r4, r5, pc}
 800c69a:	bf00      	nop
 800c69c:	20025dac 	.word	0x20025dac

0800c6a0 <_isatty_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4c06      	ldr	r4, [pc, #24]	; (800c6bc <_isatty_r+0x1c>)
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	6023      	str	r3, [r4, #0]
 800c6ac:	f7fe faa1 	bl	800abf2 <_isatty>
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	d102      	bne.n	800c6ba <_isatty_r+0x1a>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	b103      	cbz	r3, 800c6ba <_isatty_r+0x1a>
 800c6b8:	602b      	str	r3, [r5, #0]
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
 800c6bc:	20025dac 	.word	0x20025dac

0800c6c0 <_init>:
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c2:	bf00      	nop
 800c6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c6:	bc08      	pop	{r3}
 800c6c8:	469e      	mov	lr, r3
 800c6ca:	4770      	bx	lr

0800c6cc <_fini>:
 800c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ce:	bf00      	nop
 800c6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6d2:	bc08      	pop	{r3}
 800c6d4:	469e      	mov	lr, r3
 800c6d6:	4770      	bx	lr
